var search_data = {"index":{"searchIndex":["faraday","adapter","httpclient","parallelism","patron","rack","test","stub","stubs","notfound","typhoeus","adapterregistry","autoloadhelper","badrequesterror","clienterror","compositereadio","conflicterror","connection","connectionfailed","connectionoptions","decodemethods","dependencyloader","encodemethods","env","error","flatparamsencoder","forbiddenerror","logging","formatter","middleware","middlewareregistry","nestedparamsencoder","nilstatuserror","options","parampart","parsingerror","proxyautherror","proxyoptions","rackbuilder","handler","stacklocked","request","authorization","basicauthentication","instrumentation","options","multipart","retry","options","matcher","tokenauthentication","urlencoded","requestoptions","resourcenotfound","response","logger","middleware","raiseerror","retriableresponse","sslerror","ssloptions","servererror","timeouterror","unauthorizederror","unprocessableentityerror","utils","headers","paramshash","object","==()","==()","uri()","[]()","[]()","[]()","[]()","[]()","[]()","[]=()","[]=()","[]=()","[]=()","[]=()","adapter()","adapter_set?()","add_parsed()","add_to_context()","advance_io()","all_loaded_constants()","allocate()","app()","apply_filters()","apply_request()","assert_index()","attribute_options()","authorization()","autoload_all()","backoff_factor()","backtrace()","basic_auth()","body()","body()","body=()","build()","build()","build_connection()","build_connection()","build_env()","build_exception_matcher()","build_exclusive_url()","build_hash()","build_nested_query()","build_query()","build_rack_env()","build_request()","build_response()","build_url()","calculate_retry_after()","calculate_retry_interval()","calculate_sleep_amount()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","clear()","clear_body()","close()","close()","close()","close()","configure()","configure_client()","configure_proxy()","configure_proxy()","configure_socket()","configure_ssl()","configure_ssl()","configure_timeouts()","configure_timeouts()","connection()","connection_timed_out_message?()","convert_key()","create()","create_multipart()","current_body()","current_io()","custom_members()","decode()","decode()","decode_pair()","deep_dup()","deep_merge()","deep_merge!()","default_adapter=()","default_connection()","default_connection_options()","default_connection_options=()","default_parallel_manager()","default_params_encoder()","default_space_encoding()","default_uri_parser()","default_uri_parser=()","dehash()","delete()","delete()","delete()","delete()","delete()","dependency()","disable?()","dump_body()","dump_headers()","dup()","dup()","each()","each_key()","each_value()","empty?()","empty?()","encode()","encode()","encode_array()","encode_hash()","encode_pair()","ensure_open_and_readable()","escape()","exc_msg_and_response()","exc_msg_and_response!()","exceptions()","execute_request()","fetch()","fetch()","fetch_error_class()","fetch_middleware()","filter()","find_default_proxy()","finish()","finished?()","from()","from()","from()","from()","from()","get()","get()","has_key?()","has_key?()","has_key?()","has_multipart?()","has_value?()","head()","header()","header()","header()","headers()","headers()","headers=()","headers=()","headers_match?()","in_member_set?()","in_parallel()","in_parallel?()","include?()","include?()","inherited()","inherited()","inherited()","initialize_copy()","initialize_names()","initialize_proxy()","insert()","insert_after()","insert_before()","inspect()","inspect()","inspect()","inspect()","instrumenter()","interval()","interval_randomness()","is_adapter?()","key?()","key?()","key?()","keys()","klass()","length()","load_autoloaded_constants()","load_middleware()","loaded?()","lock!()","locked?()","log_body()","log_body?()","log_headers()","log_headers?()","log_level()","lookup_middleware()","marshal_dump()","marshal_dump()","marshal_load()","marshal_load()","match()","match_content_type()","match_context()","matches?()","matches?()","max()","max_interval()","member?()","member?()","member_set()","memoized()","memoized_attributes()","merge()","merge()","merge()","merge!()","merge!()","merge!()","merge_query()","method()","method_missing()","methods()","middleware_mutex()","name()","needs_body?()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_builder()","new_context()","new_stub()","normalize_path()","on_complete()","on_complete()","on_complete()","on_complete()","options()","options()","options()","options_for()","parallel?()","params=()","params=()","params_match?()","parse()","parse_body?()","parse_nested_query()","parse_query()","part()","patch()","path_match?()","path_prefix=()","post()","prepare_context()","pretty_inspect()","process_params()","process_request?()","process_request?()","proxy=()","proxy_for_request()","proxy_from_env()","put()","raise_if_adapter()","raise_if_locked()","read()","reason_phrase()","register_middleware()","replace()","replace()","request()","request()","request_timeout()","request_type()","require_lib()","require_libs()","respond_to_missing?()","response()","response()","response_body()","response_headers()","response_status()","response_values()","retry_block()","retry_if()","retry_request?()","retry_statuses()","rewind()","rewind_files()","run_request()","save_response()","set()","set_authorization_header()","sort_query_params()","ssl_cert_store()","ssl_verify_mode()","status()","stream_response?()","success?()","success?()","support_parallel?()","supports_parallel?()","swap()","symbolized_key_set()","to_app()","to_env()","to_hash()","to_hash()","to_hash()","to_part()","to_query()","to_s()","token_auth()","unescape()","unique_boundary()","unregister_middleware()","update()","update()","update()","url()","url_prefix=()","use()","use_symbol()","value?()","values_at()","verify?()","verify_stubbed_calls()","with_uri_credentials()"],"longSearchIndex":["faraday","faraday::adapter","faraday::adapter::httpclient","faraday::adapter::parallelism","faraday::adapter::patron","faraday::adapter::rack","faraday::adapter::test","faraday::adapter::test::stub","faraday::adapter::test::stubs","faraday::adapter::test::stubs::notfound","faraday::adapter::typhoeus","faraday::adapterregistry","faraday::autoloadhelper","faraday::badrequesterror","faraday::clienterror","faraday::compositereadio","faraday::conflicterror","faraday::connection","faraday::connectionfailed","faraday::connectionoptions","faraday::decodemethods","faraday::dependencyloader","faraday::encodemethods","faraday::env","faraday::error","faraday::flatparamsencoder","faraday::forbiddenerror","faraday::logging","faraday::logging::formatter","faraday::middleware","faraday::middlewareregistry","faraday::nestedparamsencoder","faraday::nilstatuserror","faraday::options","faraday::parampart","faraday::parsingerror","faraday::proxyautherror","faraday::proxyoptions","faraday::rackbuilder","faraday::rackbuilder::handler","faraday::rackbuilder::stacklocked","faraday::request","faraday::request::authorization","faraday::request::basicauthentication","faraday::request::instrumentation","faraday::request::instrumentation::options","faraday::request::multipart","faraday::request::retry","faraday::request::retry::options","faraday::request::retry::matcher","faraday::request::tokenauthentication","faraday::request::urlencoded","faraday::requestoptions","faraday::resourcenotfound","faraday::response","faraday::response::logger","faraday::response::middleware","faraday::response::raiseerror","faraday::retriableresponse","faraday::sslerror","faraday::ssloptions","faraday::servererror","faraday::timeouterror","faraday::unauthorizederror","faraday::unprocessableentityerror","faraday::utils","faraday::utils::headers","faraday::utils::paramshash","object","faraday::rackbuilder#==()","faraday::rackbuilder::handler#==()","faraday::utils#uri()","faraday::env#[]()","faraday::options#[]()","faraday::rackbuilder#[]()","faraday::request#[]()","faraday::utils::headers#[]()","faraday::utils::paramshash#[]()","faraday::env#[]=()","faraday::request#[]=()","faraday::requestoptions#[]=()","faraday::utils::headers#[]=()","faraday::utils::paramshash#[]=()","faraday::rackbuilder#adapter()","faraday::rackbuilder#adapter_set?()","faraday::utils::headers#add_parsed()","faraday::decodemethods#add_to_context()","faraday::compositereadio#advance_io()","faraday::autoloadhelper#all_loaded_constants()","faraday::utils::headers::allocate()","faraday::rackbuilder#app()","faraday::logging::formatter#apply_filters()","faraday::response#apply_request()","faraday::rackbuilder#assert_index()","faraday::options::attribute_options()","faraday::connection#authorization()","faraday::autoloadhelper#autoload_all()","faraday::request::retry::options#backoff_factor()","faraday::error#backtrace()","faraday::connection#basic_auth()","faraday::env#body()","faraday::response#body()","faraday::env#body=()","faraday::rackbuilder#build()","faraday::rackbuilder::handler#build()","faraday::adapter::httpclient#build_connection()","faraday::adapter::patron#build_connection()","faraday::rackbuilder#build_env()","faraday::request::retry#build_exception_matcher()","faraday::connection#build_exclusive_url()","faraday::request::authorization::build_hash()","faraday::utils#build_nested_query()","faraday::utils#build_query()","faraday::adapter::rack#build_rack_env()","faraday::connection#build_request()","faraday::rackbuilder#build_response()","faraday::connection#build_url()","faraday::request::retry#calculate_retry_after()","faraday::request::retry#calculate_retry_interval()","faraday::request::retry#calculate_sleep_amount()","faraday::adapter#call()","faraday::adapter::httpclient#call()","faraday::adapter::patron#call()","faraday::adapter::rack#call()","faraday::adapter::test#call()","faraday::adapter::typhoeus#call()","faraday::middleware#call()","faraday::request::authorization#call()","faraday::request::instrumentation#call()","faraday::request::multipart#call()","faraday::request::retry#call()","faraday::request::urlencoded#call()","faraday::response::logger#call()","faraday::options#clear()","faraday::env#clear_body()","faraday::adapter#close()","faraday::compositereadio#close()","faraday::connection#close()","faraday::middleware#close()","faraday::adapter::test#configure()","faraday::adapter::httpclient#configure_client()","faraday::adapter::httpclient#configure_proxy()","faraday::adapter::patron#configure_proxy()","faraday::adapter::httpclient#configure_socket()","faraday::adapter::httpclient#configure_ssl()","faraday::adapter::patron#configure_ssl()","faraday::adapter::httpclient#configure_timeouts()","faraday::adapter::patron#configure_timeouts()","faraday::adapter#connection()","faraday::adapter::patron#connection_timed_out_message?()","faraday::utils::paramshash#convert_key()","faraday::request::create()","faraday::request::multipart#create_multipart()","faraday::env#current_body()","faraday::compositereadio#current_io()","faraday::env#custom_members()","faraday::decodemethods#decode()","faraday::flatparamsencoder::decode()","faraday::decodemethods#decode_pair()","faraday::options#deep_dup()","faraday::utils#deep_merge()","faraday::utils#deep_merge!()","faraday::default_adapter=()","faraday::default_connection()","faraday::default_connection_options()","faraday::default_connection_options=()","faraday::connection#default_parallel_manager()","faraday::utils#default_params_encoder()","faraday::utils#default_space_encoding()","faraday::utils#default_uri_parser()","faraday::utils#default_uri_parser=()","faraday::decodemethods#dehash()","faraday::adapter::test::stubs#delete()","faraday::options#delete()","faraday::rackbuilder#delete()","faraday::utils::headers#delete()","faraday::utils::paramshash#delete()","faraday::dependencyloader#dependency()","faraday::ssloptions#disable?()","faraday::logging::formatter#dump_body()","faraday::logging::formatter#dump_headers()","faraday::connection#dup()","faraday::rackbuilder#dup()","faraday::options#each()","faraday::options#each_key()","faraday::options#each_value()","faraday::adapter::test::stubs#empty?()","faraday::options#empty?()","faraday::encodemethods#encode()","faraday::flatparamsencoder::encode()","faraday::encodemethods#encode_array()","faraday::encodemethods#encode_hash()","faraday::encodemethods#encode_pair()","faraday::compositereadio#ensure_open_and_readable()","faraday::utils#escape()","faraday::error#exc_msg_and_response()","faraday::error#exc_msg_and_response!()","faraday::request::retry::options#exceptions()","faraday::adapter::rack#execute_request()","faraday::options#fetch()","faraday::utils::headers#fetch()","faraday::options::fetch_error_class()","faraday::middlewareregistry#fetch_middleware()","faraday::logging::formatter#filter()","faraday::connection#find_default_proxy()","faraday::response#finish()","faraday::response#finished?()","faraday::env::from()","faraday::options::from()","faraday::proxyoptions::from()","faraday::request::retry::options::from()","faraday::utils::headers::from()","faraday::adapter::test::stubs#get()","faraday::adapterregistry#get()","faraday::options#has_key?()","faraday::utils::headers#has_key?()","faraday::utils::paramshash#has_key?()","faraday::request::multipart#has_multipart?()","faraday::options#has_value?()","faraday::adapter::test::stubs#head()","faraday::request::authorization::header()","faraday::request::basicauthentication::header()","faraday::request::tokenauthentication::header()","faraday::parampart#headers()","faraday::response#headers()","faraday::connection#headers=()","faraday::request#headers=()","faraday::adapter::test::stub#headers_match?()","faraday::env#in_member_set?()","faraday::connection#in_parallel()","faraday::connection#in_parallel?()","faraday::utils::headers#include?()","faraday::utils::paramshash#include?()","faraday::adapter::parallelism#inherited()","faraday::dependencyloader#inherited()","faraday::options::inherited()","faraday::utils::headers#initialize_copy()","faraday::utils::headers#initialize_names()","faraday::connection#initialize_proxy()","faraday::rackbuilder#insert()","faraday::rackbuilder#insert_after()","faraday::rackbuilder#insert_before()","faraday::env#inspect()","faraday::error#inspect()","faraday::options#inspect()","faraday::rackbuilder::handler#inspect()","faraday::request::instrumentation::options#instrumenter()","faraday::request::retry::options#interval()","faraday::request::retry::options#interval_randomness()","faraday::rackbuilder#is_adapter?()","faraday::options#key?()","faraday::utils::headers#key?()","faraday::utils::paramshash#key?()","faraday::options#keys()","faraday::rackbuilder::handler#klass()","faraday::compositereadio#length()","faraday::autoloadhelper#load_autoloaded_constants()","faraday::middlewareregistry#load_middleware()","faraday::dependencyloader#loaded?()","faraday::rackbuilder#lock!()","faraday::rackbuilder#locked?()","faraday::logging::formatter#log_body()","faraday::logging::formatter#log_body?()","faraday::logging::formatter#log_headers()","faraday::logging::formatter#log_headers?()","faraday::logging::formatter#log_level()","faraday::middlewareregistry#lookup_middleware()","faraday::request#marshal_dump()","faraday::response#marshal_dump()","faraday::request#marshal_load()","faraday::response#marshal_load()","faraday::adapter::test::stubs#match()","faraday::request::urlencoded#match_content_type()","faraday::decodemethods#match_context()","faraday::adapter::test::stub#matches?()","faraday::adapter::test::stubs#matches?()","faraday::request::retry::options#max()","faraday::request::retry::options#max_interval()","faraday::utils::headers#member?()","faraday::utils::paramshash#member?()","faraday::env::member_set()","faraday::options::memoized()","faraday::options::memoized_attributes()","faraday::options#merge()","faraday::utils::headers#merge()","faraday::utils::paramshash#merge()","faraday::options#merge!()","faraday::utils::headers#merge!()","faraday::utils::paramshash#merge!()","faraday::utils::paramshash#merge_query()","faraday::request#method()","faraday::method_missing()","faraday::request::retry::options#methods()","faraday::middlewareregistry#middleware_mutex()","faraday::request::instrumentation::options#name()","faraday::env#needs_body?()","faraday::new()","faraday::adapter::new()","faraday::adapter::rack::new()","faraday::adapter::test::new()","faraday::adapter::test::stub::new()","faraday::adapter::test::stubs::new()","faraday::adapterregistry::new()","faraday::compositereadio::new()","faraday::connection::new()","faraday::dependencyloader#new()","faraday::error::new()","faraday::logging::formatter::new()","faraday::middleware::new()","faraday::nilstatuserror::new()","faraday::parampart::new()","faraday::rackbuilder::new()","faraday::rackbuilder::handler::new()","faraday::request::authorization::new()","faraday::request::instrumentation::new()","faraday::request::multipart::new()","faraday::request::retry::new()","faraday::request::tokenauthentication::new()","faraday::response::new()","faraday::response::logger::new()","faraday::timeouterror::new()","faraday::utils::headers::new()","faraday::connectionoptions#new_builder()","faraday::decodemethods#new_context()","faraday::adapter::test::stubs#new_stub()","faraday::utils#normalize_path()","faraday::response#on_complete()","faraday::response::logger#on_complete()","faraday::response::middleware#on_complete()","faraday::response::raiseerror#on_complete()","faraday::adapter::test::stubs#options()","faraday::connection#options()","faraday::options::options()","faraday::options::options_for()","faraday::env#parallel?()","faraday::connection#params=()","faraday::request#params=()","faraday::adapter::test::stub#params_match?()","faraday::utils::headers#parse()","faraday::env#parse_body?()","faraday::utils#parse_nested_query()","faraday::utils#parse_query()","faraday::request::multipart#part()","faraday::adapter::test::stubs#patch()","faraday::adapter::test::stub#path_match?()","faraday::connection#path_prefix=()","faraday::adapter::test::stubs#post()","faraday::decodemethods#prepare_context()","faraday::logging::formatter#pretty_inspect()","faraday::request::multipart#process_params()","faraday::request::multipart#process_request?()","faraday::request::urlencoded#process_request?()","faraday::connection#proxy=()","faraday::connection#proxy_for_request()","faraday::connection#proxy_from_env()","faraday::adapter::test::stubs#put()","faraday::rackbuilder#raise_if_adapter()","faraday::rackbuilder#raise_if_locked()","faraday::compositereadio#read()","faraday::response#reason_phrase()","faraday::middlewareregistry#register_middleware()","faraday::utils::headers#replace()","faraday::utils::paramshash#replace()","faraday::logging::formatter#request()","faraday::rackbuilder#request()","faraday::adapter#request_timeout()","faraday::request::urlencoded#request_type()","faraday::require_lib()","faraday::require_libs()","faraday::respond_to_missing?()","faraday::logging::formatter#response()","faraday::rackbuilder#response()","faraday::error#response_body()","faraday::error#response_headers()","faraday::error#response_status()","faraday::response::raiseerror#response_values()","faraday::request::retry::options#retry_block()","faraday::request::retry::options#retry_if()","faraday::request::retry#retry_request?()","faraday::request::retry::options#retry_statuses()","faraday::compositereadio#rewind()","faraday::request::retry#rewind_files()","faraday::connection#run_request()","faraday::adapter#save_response()","faraday::adapterregistry#set()","faraday::connection#set_authorization_header()","faraday::utils#sort_query_params()","faraday::adapter::httpclient#ssl_cert_store()","faraday::adapter::httpclient#ssl_verify_mode()","faraday::response#status()","faraday::requestoptions#stream_response?()","faraday::env#success?()","faraday::response#success?()","faraday::connection#support_parallel?()","faraday::adapter::parallelism#supports_parallel?()","faraday::rackbuilder#swap()","faraday::options#symbolized_key_set()","faraday::rackbuilder#to_app()","faraday::request#to_env()","faraday::options#to_hash()","faraday::response#to_hash()","faraday::utils::headers#to_hash()","faraday::parampart#to_part()","faraday::utils::paramshash#to_query()","faraday::adapter::test::stub#to_s()","faraday::connection#token_auth()","faraday::utils#unescape()","faraday::request::multipart#unique_boundary()","faraday::middlewareregistry#unregister_middleware()","faraday::options#update()","faraday::utils::headers#update()","faraday::utils::paramshash#update()","faraday::request#url()","faraday::connection#url_prefix=()","faraday::rackbuilder#use()","faraday::rackbuilder#use_symbol()","faraday::options#value?()","faraday::options#values_at()","faraday::ssloptions#verify?()","faraday::adapter::test::stubs#verify_stubbed_calls()","faraday::connection#with_uri_credentials()"],"info":[["Faraday","","Faraday.html","","<p>This is the main namespace for Faraday.\n<p>It provides methods to create {Connection} objects, and HTTP-related …\n"],["Faraday::Adapter","","Faraday/Adapter.html","","<p>Base class for all Faraday adapters. Adapters are responsible for fulfilling a Faraday request.\n<p>Adapter …\n"],["Faraday::Adapter::HTTPClient","","Faraday/Adapter/HTTPClient.html","","<p>HTTPClient adapter.\n"],["Faraday::Adapter::Parallelism","","Faraday/Adapter/Parallelism.html","","<p>This module marks an Adapter as supporting parallel requests.\n"],["Faraday::Adapter::Patron","","Faraday/Adapter/Patron.html","","<p>Patron adapter.\n"],["Faraday::Adapter::Rack","","Faraday/Adapter/Rack.html","","<p>Sends requests to a Rack app.\n<p>@example\n\n<pre>class MyRackApp\n  def call(env)\n    [200, {&#39;Content-Type&#39; =&gt; &#39;text/html&#39;}, ...</pre>\n"],["Faraday::Adapter::Test","","Faraday/Adapter/Test.html","","<p>@example\n\n<pre>test = Faraday::Connection.new do\n  use Faraday::Adapter::Test do |stub|\n    # Define matcher ...</pre>\n"],["Faraday::Adapter::Test::Stub","","Faraday/Adapter/Test/Stub.html","","<p>Stub request rubocop:disable Style/StructInheritance\n"],["Faraday::Adapter::Test::Stubs","","Faraday/Adapter/Test/Stubs.html","","<p>A stack of Stubs\n"],["Faraday::Adapter::Test::Stubs::NotFound","","Faraday/Adapter/Test/Stubs/NotFound.html","",""],["Faraday::Adapter::Typhoeus","","Faraday/Adapter/Typhoeus.html","","<p>Typhoeus adapter. This class is just a stub, the real adapter is in github.com/typhoeus/typhoeus/blob/master/lib/typhoeus/adapters/faraday.rb …\n"],["Faraday::AdapterRegistry","","Faraday/AdapterRegistry.html","","<p>AdapterRegistry registers adapter class names so they can be looked up by a String or Symbol name.\n"],["Faraday::AutoloadHelper","","Faraday/AutoloadHelper.html","","<p>Adds the ability for other modules to manage autoloadable constants.\n<p>@api private\n"],["Faraday::BadRequestError","","Faraday/BadRequestError.html","","<p>Raised by Faraday::Response::RaiseError in case of a 400 response.\n"],["Faraday::ClientError","","Faraday/ClientError.html","","<p>Faraday client error class. Represents 4xx status responses.\n"],["Faraday::CompositeReadIO","","Faraday/CompositeReadIO.html","","<p>Similar to, but not compatible with CompositeReadIO provided by the multipart-post gem. github.com/nicksieger/multipart-post/blob/master/lib/composite_io.rb …\n"],["Faraday::ConflictError","","Faraday/ConflictError.html","","<p>Raised by Faraday::Response::RaiseError in case of a 409 response.\n"],["Faraday::Connection","","Faraday/Connection.html","","<p>Connection objects manage the default properties and the middleware stack for fulfilling an HTTP request. …\n"],["Faraday::ConnectionFailed","","Faraday/ConnectionFailed.html","","<p>A unified error for failed connections.\n"],["Faraday::ConnectionOptions","","Faraday/ConnectionOptions.html","","<p>ConnectionOptions contains the configurable properties for a Faraday connection object.\n"],["Faraday::DecodeMethods","","Faraday/DecodeMethods.html","","<p>Sub-module for decoding query-string into parameters.\n"],["Faraday::DependencyLoader","","Faraday/DependencyLoader.html","","<p>DependencyLoader helps Faraday adapters and middleware load dependencies.\n"],["Faraday::EncodeMethods","","Faraday/EncodeMethods.html","","<p>Sub-module for encoding parameters into query-string.\n"],["Faraday::Env","","Faraday/Env.html","","<p>@!attribute method\n\n<pre>@return [Symbol] HTTP method (`:get`, `:post`)</pre>\n<p>@!attribute body\n"],["Faraday::Error","","Faraday/Error.html","","<p>Faraday error base class.\n"],["Faraday::FlatParamsEncoder","","Faraday/FlatParamsEncoder.html","","<p>FlatParamsEncoder manages URI params as a flat hash. Any Array values repeat the parameter multiple times. …\n"],["Faraday::ForbiddenError","","Faraday/ForbiddenError.html","","<p>Raised by Faraday::Response::RaiseError in case of a 403 response.\n"],["Faraday::Logging","","Faraday/Logging.html","",""],["Faraday::Logging::Formatter","","Faraday/Logging/Formatter.html","","<p>Serves as an integration point to customize logging\n"],["Faraday::Middleware","","Faraday/Middleware.html","","<p>Middleware is the basic base class of any Faraday middleware.\n"],["Faraday::MiddlewareRegistry","","Faraday/MiddlewareRegistry.html","","<p>Adds the ability for other modules to register and lookup middleware classes.\n"],["Faraday::NestedParamsEncoder","","Faraday/NestedParamsEncoder.html","","<p>This is the default encoder for Faraday requests. Using this encoder, parameters will be encoded respecting …\n"],["Faraday::NilStatusError","","Faraday/NilStatusError.html","","<p>Raised by Faraday::Response::RaiseError in case of a nil status in response.\n"],["Faraday::Options","","Faraday/Options.html","","<p>Subclasses Struct with some special helpers for converting from a Hash to a Struct.\n"],["Faraday::ParamPart","","Faraday/ParamPart.html","","<p>Multipart value used to POST data with a content type.\n"],["Faraday::ParsingError","","Faraday/ParsingError.html","","<p>Raised by FaradayMiddleware::ResponseMiddleware\n"],["Faraday::ProxyAuthError","","Faraday/ProxyAuthError.html","","<p>Raised by Faraday::Response::RaiseError in case of a 407 response.\n"],["Faraday::ProxyOptions","","Faraday/ProxyOptions.html","","<p>ProxyOptions contains the configurable properties for the proxy configuration used when making an HTTP …\n"],["Faraday::RackBuilder","","Faraday/RackBuilder.html","","<p>A Builder that processes requests into responses by passing through an inner middleware stack (heavily …\n"],["Faraday::RackBuilder::Handler","","Faraday/RackBuilder/Handler.html","","<p>borrowed from ActiveSupport::Dependencies::Reference &amp; ActionDispatch::MiddlewareStack::Middleware …\n"],["Faraday::RackBuilder::StackLocked","","Faraday/RackBuilder/StackLocked.html","","<p>Error raised when trying to modify the stack after calling `lock!`\n"],["Faraday::Request","","Faraday/Request.html","","<p>Request represents a single HTTP request for a Faraday adapter to make. @see lib/faraday/request.rb  …\n"],["Faraday::Request::Authorization","","Faraday/Request/Authorization.html","","<p>Request middleware for the Authorization HTTP header\n"],["Faraday::Request::BasicAuthentication","","Faraday/Request/BasicAuthentication.html","","<p>Authorization middleware for Basic Authentication.\n"],["Faraday::Request::Instrumentation","","Faraday/Request/Instrumentation.html","","<p>Middleware for instrumenting Requests.\n"],["Faraday::Request::Instrumentation::Options","","Faraday/Request/Instrumentation/Options.html","","<p>Options class used in Request::Instrumentation class.\n"],["Faraday::Request::Multipart","","Faraday/Request/Multipart.html","","<p>Middleware for supporting multi-part requests.\n"],["Faraday::Request::Retry","","Faraday/Request/Retry.html","","<p>Catches exceptions and retries each request a limited number of times.\n<p>By default, it retries 2 times …\n"],["Faraday::Request::Retry::Options","","Faraday/Request/Retry/Options.html","","<p>Options contains the configurable parameters for the Retry middleware.\n"],["Faraday::Request::Retry::matcher","","Faraday/Request/Retry/matcher.html","",""],["Faraday::Request::TokenAuthentication","","Faraday/Request/TokenAuthentication.html","","<p>TokenAuthentication is a middleware that adds a &#39;Token&#39; header to a Faraday request.\n"],["Faraday::Request::UrlEncoded","","Faraday/Request/UrlEncoded.html","","<p>Middleware for supporting urlencoded requests.\n"],["Faraday::RequestOptions","","Faraday/RequestOptions.html","","<p>RequestOptions contains the configurable properties for a Faraday request.\n"],["Faraday::ResourceNotFound","","Faraday/ResourceNotFound.html","","<p>Raised by Faraday::Response::RaiseError in case of a 404 response.\n"],["Faraday::Response","","Faraday/Response.html","","<p>Response represents the returned value of a sent Faraday request. @see lib/faraday/response.rb Original …\n"],["Faraday::Response::Logger","","Faraday/Response/Logger.html","","<p>Logger is a middleware that logs internal events in the HTTP request lifecycle to a given Logger object. …\n"],["Faraday::Response::Middleware","","Faraday/Response/Middleware.html","","<p>Used for simple response middleware.\n"],["Faraday::Response::RaiseError","","Faraday/Response/RaiseError.html","","<p>RaiseError is a Faraday middleware that raises exceptions on common HTTP client or server error responses. …\n"],["Faraday::RetriableResponse","","Faraday/RetriableResponse.html","","<p>Exception used to control the Retry middleware.\n<p>@see Faraday::Request::Retry\n"],["Faraday::SSLError","","Faraday/SSLError.html","","<p>A unified client error for SSL errors.\n"],["Faraday::SSLOptions","","Faraday/SSLOptions.html","","<p>SSL-related options.\n<p>@!attribute verify\n\n<pre>@return [Boolean] whether to verify SSL certificates or not</pre>\n"],["Faraday::ServerError","","Faraday/ServerError.html","","<p>Faraday server error class. Represents 5xx status responses.\n"],["Faraday::TimeoutError","","Faraday/TimeoutError.html","","<p>A unified client error for timeouts.\n"],["Faraday::UnauthorizedError","","Faraday/UnauthorizedError.html","","<p>Raised by Faraday::Response::RaiseError in case of a 401 response.\n"],["Faraday::UnprocessableEntityError","","Faraday/UnprocessableEntityError.html","","<p>Raised by Faraday::Response::RaiseError in case of a 422 response.\n"],["Faraday::Utils","","Faraday/Utils.html","","<p>Utils contains various static helper methods.\n"],["Faraday::Utils::Headers","","Faraday/Utils/Headers.html","","<p>A case-insensitive Hash that preserves the original case of a header when set.\n<p>Adapted from Rack::Utils::HeaderHash …\n"],["Faraday::Utils::ParamsHash","","Faraday/Utils/ParamsHash.html","","<p>A hash with stringified keys.\n"],["Object","","Object.html","",""],["==","Faraday::RackBuilder","Faraday/RackBuilder.html#method-i-3D-3D","(other)",""],["==","Faraday::RackBuilder::Handler","Faraday/RackBuilder/Handler.html#method-i-3D-3D","(other)",""],["URI","Faraday::Utils","Faraday/Utils.html#method-i-URI","(url)","<p>Normalize URI() behavior across Ruby versions\n<p>url - A String or URI.\n<p>Returns a parsed URI.\n"],["[]","Faraday::Env","Faraday/Env.html#method-i-5B-5D","(key)","<p>@param key [Object]\n"],["[]","Faraday::Options","Faraday/Options.html#method-i-5B-5D","(key)",""],["[]","Faraday::RackBuilder","Faraday/RackBuilder.html#method-i-5B-5D","(idx)",""],["[]","Faraday::Request","Faraday/Request.html#method-i-5B-5D","(key)","<p>@param key [Object] key to look up in headers @return [Object] value of the given header name\n"],["[]","Faraday::Utils::Headers","Faraday/Utils/Headers.html#method-i-5B-5D","(key)",""],["[]","Faraday::Utils::ParamsHash","Faraday/Utils/ParamsHash.html#method-i-5B-5D","(key)",""],["[]=","Faraday::Env","Faraday/Env.html#method-i-5B-5D-3D","(key, value)","<p>@param key [Object] @param value [Object]\n"],["[]=","Faraday::Request","Faraday/Request.html#method-i-5B-5D-3D","(key, value)","<p>@param key [Object] key of header to write @param value [Object] value of header\n"],["[]=","Faraday::RequestOptions","Faraday/RequestOptions.html#method-i-5B-5D-3D","(key, value)",""],["[]=","Faraday::Utils::Headers","Faraday/Utils/Headers.html#method-i-5B-5D-3D","(key, val)",""],["[]=","Faraday::Utils::ParamsHash","Faraday/Utils/ParamsHash.html#method-i-5B-5D-3D","(key, value)",""],["adapter","Faraday::RackBuilder","Faraday/RackBuilder.html#method-i-adapter","(klass = NO_ARGUMENT, *args, &block)",""],["adapter_set?","Faraday::RackBuilder","Faraday/RackBuilder.html#method-i-adapter_set-3F","()",""],["add_parsed","Faraday::Utils::Headers","Faraday/Utils/Headers.html#method-i-add_parsed","(key, value)","<p>Join multiple values with a comma.\n"],["add_to_context","Faraday::DecodeMethods","Faraday/DecodeMethods.html#method-i-add_to_context","(is_array, context, value, subkey)",""],["advance_io","Faraday::CompositeReadIO","Faraday/CompositeReadIO.html#method-i-advance_io","()",""],["all_loaded_constants","Faraday::AutoloadHelper","Faraday/AutoloadHelper.html#method-i-all_loaded_constants","()","<p>Filters the module&#39;s contents with those that have been already autoloaded.\n<p>@return [Array&lt;Class, …\n"],["allocate","Faraday::Utils::Headers","Faraday/Utils/Headers.html#method-c-allocate","()",""],["app","Faraday::RackBuilder","Faraday/RackBuilder.html#method-i-app","()","<p>The “rack app” wrapped in middleware. All requests are sent here.\n<p>The builder is responsible …\n"],["apply_filters","Faraday::Logging::Formatter","Faraday/Logging/Formatter.html#method-i-apply_filters","(output)",""],["apply_request","Faraday::Response","Faraday/Response.html#method-i-apply_request","(request_env)","<p>Expand the env with more properties, without overriding existing ones. Useful for applying request params …\n"],["assert_index","Faraday::RackBuilder","Faraday/RackBuilder.html#method-i-assert_index","(index)",""],["attribute_options","Faraday::Options","Faraday/Options.html#method-c-attribute_options","()","<p>Internal\n"],["authorization","Faraday::Connection","Faraday/Connection.html#method-i-authorization","(type, token)","<p>Sets up a custom Authorization header.\n<p>@param type [String] authorization type @param token [String, Hash] …\n"],["autoload_all","Faraday::AutoloadHelper","Faraday/AutoloadHelper.html#method-i-autoload_all","(prefix, options)","<p>Registers the constants to be auto loaded.\n<p>@param prefix [String] The require prefix. If the path is inside …\n"],["backoff_factor","Faraday::Request::Retry::Options","Faraday/Request/Retry/Options.html#method-i-backoff_factor","()",""],["backtrace","Faraday::Error","Faraday/Error.html#method-i-backtrace","()",""],["basic_auth","Faraday::Connection","Faraday/Connection.html#method-i-basic_auth","(login, pass)","<p>Sets up the Authorization header with these credentials, encoded with base64.\n<p>@param login [String] The …\n"],["body","Faraday::Env","Faraday/Env.html#method-i-body","()",""],["body","Faraday::Response","Faraday/Response.html#method-i-body","()",""],["body=","Faraday::Env","Faraday/Env.html#method-i-body-3D","(value)",""],["build","Faraday::RackBuilder","Faraday/RackBuilder.html#method-i-build","(options = {})",""],["build","Faraday::RackBuilder::Handler","Faraday/RackBuilder/Handler.html#method-i-build","(app = nil)",""],["build_connection","Faraday::Adapter::HTTPClient","Faraday/Adapter/HTTPClient.html#method-i-build_connection","(env)",""],["build_connection","Faraday::Adapter::Patron","Faraday/Adapter/Patron.html#method-i-build_connection","(env)",""],["build_env","Faraday::RackBuilder","Faraday/RackBuilder.html#method-i-build_env","(connection, request)","<p>ENV Keys :http_method - a symbolized request HTTP method (:get, :post) :body   - the request body that …\n"],["build_exception_matcher","Faraday::Request::Retry","Faraday/Request/Retry.html#method-i-build_exception_matcher","(exceptions)","<p>An exception matcher for the rescue clause can usually be any object that responds to `===`, but for …\n"],["build_exclusive_url","Faraday::Connection","Faraday/Connection.html#method-i-build_exclusive_url","(url = nil, params = nil, params_encoder = nil)","<p>Build an absolute URL based on url_prefix.\n<p>@param url [String, URI] @param params [Faraday::Utils::ParamsHash] …\n"],["build_hash","Faraday::Request::Authorization","Faraday/Request/Authorization.html#method-c-build_hash","(type, hash)","<p>@param type [String] @param hash [Hash] @return [String] type followed by comma-separated key=value pairs …\n"],["build_nested_query","Faraday::Utils","Faraday/Utils.html#method-i-build_nested_query","(params)",""],["build_query","Faraday::Utils","Faraday/Utils.html#method-i-build_query","(params)",""],["build_rack_env","Faraday::Adapter::Rack","Faraday/Adapter/Rack.html#method-i-build_rack_env","(env)",""],["build_request","Faraday::Connection","Faraday/Connection.html#method-i-build_request","(method)","<p>Creates and configures the request object.\n<p>@param method [Symbol]\n<p>@yield [Faraday::Request] if block given …\n"],["build_response","Faraday::RackBuilder","Faraday/RackBuilder.html#method-i-build_response","(connection, request)","<p>Processes a Request into a Response by passing it through this Builder&#39;s middleware stack.\n<p>@param …\n"],["build_url","Faraday::Connection","Faraday/Connection.html#method-i-build_url","(url = nil, extra_params = nil)","<p>Takes a relative url for a request and combines it with the defaults set on the connection instance. …\n"],["calculate_retry_after","Faraday::Request::Retry","Faraday/Request/Retry.html#method-i-calculate_retry_after","(env)","<p>MDN spec for Retry-After header: developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After\n"],["calculate_retry_interval","Faraday::Request::Retry","Faraday/Request/Retry.html#method-i-calculate_retry_interval","(retries)",""],["calculate_sleep_amount","Faraday::Request::Retry","Faraday/Request/Retry.html#method-i-calculate_sleep_amount","(retries, env)",""],["call","Faraday::Adapter","Faraday/Adapter.html#method-i-call","(env)",""],["call","Faraday::Adapter::HTTPClient","Faraday/Adapter/HTTPClient.html#method-i-call","(env)",""],["call","Faraday::Adapter::Patron","Faraday/Adapter/Patron.html#method-i-call","(env)",""],["call","Faraday::Adapter::Rack","Faraday/Adapter/Rack.html#method-i-call","(env)",""],["call","Faraday::Adapter::Test","Faraday/Adapter/Test.html#method-i-call","(env)",""],["call","Faraday::Adapter::Typhoeus","Faraday/Adapter/Typhoeus.html#method-i-call","()","<p>Needs to define this method in order to support Typhoeus &lt;= 1.3.0\n"],["call","Faraday::Middleware","Faraday/Middleware.html#method-i-call","(env)",""],["call","Faraday::Request::Authorization","Faraday/Request/Authorization.html#method-i-call","(env)","<p>@param env [Faraday::Env]\n"],["call","Faraday::Request::Instrumentation","Faraday/Request/Instrumentation.html#method-i-call","(env)","<p>@param env [Faraday::Env]\n"],["call","Faraday::Request::Multipart","Faraday/Request/Multipart.html#method-i-call","(env)","<p>Checks for files in the payload, otherwise leaves everything untouched.\n<p>@param env [Faraday::Env]\n"],["call","Faraday::Request::Retry","Faraday/Request/Retry.html#method-i-call","(env)","<p>@param env [Faraday::Env]\n"],["call","Faraday::Request::UrlEncoded","Faraday/Request/UrlEncoded.html#method-i-call","(env)","<p>Encodes as “application/x-www-form-urlencoded” if not already encoded or of another type.\n<p>@param …\n"],["call","Faraday::Response::Logger","Faraday/Response/Logger.html#method-i-call","(env)",""],["clear","Faraday::Options","Faraday/Options.html#method-i-clear","()","<p>Public\n"],["clear_body","Faraday::Env","Faraday/Env.html#method-i-clear_body","()","<p>Sets content length to zero and the body to the empty string.\n"],["close","Faraday::Adapter","Faraday/Adapter.html#method-i-close","()","<p>Close any persistent connections. The adapter should still be usable after calling close.\n"],["close","Faraday::CompositeReadIO","Faraday/CompositeReadIO.html#method-i-close","()","<p>Close each of the IOs.\n<p>@return [void]\n"],["close","Faraday::Connection","Faraday/Connection.html#method-i-close","()","<p>Closes the underlying resources and/or connections. In the case of persistent connections, this closes …\n"],["close","Faraday::Middleware","Faraday/Middleware.html#method-i-close","()",""],["configure","Faraday::Adapter::Test","Faraday/Adapter/Test.html#method-i-configure","()",""],["configure_client","Faraday::Adapter::HTTPClient","Faraday/Adapter/HTTPClient.html#method-i-configure_client","(client)",""],["configure_proxy","Faraday::Adapter::HTTPClient","Faraday/Adapter/HTTPClient.html#method-i-configure_proxy","(client, proxy)","<p>Configure proxy URI and any user credentials.\n<p>@param proxy [Hash]\n"],["configure_proxy","Faraday::Adapter::Patron","Faraday/Adapter/Patron.html#method-i-configure_proxy","(session, proxy)",""],["configure_socket","Faraday::Adapter::HTTPClient","Faraday/Adapter/HTTPClient.html#method-i-configure_socket","(client, bind)","<p>@param bind [Hash]\n"],["configure_ssl","Faraday::Adapter::HTTPClient","Faraday/Adapter/HTTPClient.html#method-i-configure_ssl","(client, ssl)","<p>@param ssl [Hash]\n"],["configure_ssl","Faraday::Adapter::Patron","Faraday/Adapter/Patron.html#method-i-configure_ssl","(session, ssl)",""],["configure_timeouts","Faraday::Adapter::HTTPClient","Faraday/Adapter/HTTPClient.html#method-i-configure_timeouts","(client, req)","<p>@param req [Hash]\n"],["configure_timeouts","Faraday::Adapter::Patron","Faraday/Adapter/Patron.html#method-i-configure_timeouts","(session, req)",""],["connection","Faraday::Adapter","Faraday/Adapter.html#method-i-connection","(env)","<p>Yields or returns an adapter&#39;s configured connection. Depends on #build_connection being defined …\n"],["connection_timed_out_message?","Faraday::Adapter::Patron","Faraday/Adapter/Patron.html#method-i-connection_timed_out_message-3F","(message)",""],["convert_key","Faraday::Utils::ParamsHash","Faraday/Utils/ParamsHash.html#method-i-convert_key","(key)",""],["create","Faraday::Request","Faraday/Request.html#method-c-create","(request_method)","<p>@param request_method [String] @yield [request] for block customization, if block given @yieldparam request …\n"],["create_multipart","Faraday::Request::Multipart","Faraday/Request/Multipart.html#method-i-create_multipart","(env, params)","<p>@param env [Faraday::Env] @param params [Hash]\n"],["current_body","Faraday::Env","Faraday/Env.html#method-i-current_body","()",""],["current_io","Faraday::CompositeReadIO","Faraday/CompositeReadIO.html#method-i-current_io","()",""],["custom_members","Faraday::Env","Faraday/Env.html#method-i-custom_members","()","<p>@private\n"],["decode","Faraday::DecodeMethods","Faraday/DecodeMethods.html#method-i-decode","(query)","<p>@param query [nil, String]\n<p>@return [Array&lt;Array, String&gt;] the decoded params\n<p>@raise [TypeError] if …\n"],["decode","Faraday::FlatParamsEncoder","Faraday/FlatParamsEncoder.html#method-c-decode","(query)","<p>Decode converts the given URI querystring into a hash.\n<p>@param query [String] query arguments to parse. …\n"],["decode_pair","Faraday::DecodeMethods","Faraday/DecodeMethods.html#method-i-decode_pair","(key, value, context)",""],["deep_dup","Faraday::Options","Faraday/Options.html#method-i-deep_dup","()","<p>Public\n"],["deep_merge","Faraday::Utils","Faraday/Utils.html#method-i-deep_merge","(source, hash)","<p>Recursive hash merge\n"],["deep_merge!","Faraday::Utils","Faraday/Utils.html#method-i-deep_merge-21","(target, hash)","<p>Recursive hash update\n"],["default_adapter=","Faraday","Faraday.html#method-c-default_adapter-3D","(adapter)","<p>Documented elsewhere, see default_adapter reader\n"],["default_connection","Faraday","Faraday.html#method-c-default_connection","()","<p>@overload default_connection\n\n<pre>Gets the default connection used for simple scripts.\n@return [Faraday::Connection] ...</pre>\n"],["default_connection_options","Faraday","Faraday.html#method-c-default_connection_options","()","<p>Gets the default connection options used when calling {Faraday#new}.\n<p>@return [Faraday::ConnectionOptions] …\n"],["default_connection_options=","Faraday","Faraday.html#method-c-default_connection_options-3D","(options)","<p>Sets the default options used when calling {Faraday#new}.\n<p>@param options [Hash, Faraday::ConnectionOptions] …\n"],["default_parallel_manager","Faraday::Connection","Faraday/Connection.html#method-i-default_parallel_manager","()","<p>Check if the adapter is parallel-capable.\n<p>@yield if the adapter isn&#39;t parallel-capable, or if no adapter …\n"],["default_params_encoder","Faraday::Utils","Faraday/Utils.html#method-i-default_params_encoder","()",""],["default_space_encoding","Faraday::Utils","Faraday/Utils.html#method-i-default_space_encoding","()",""],["default_uri_parser","Faraday::Utils","Faraday/Utils.html#method-i-default_uri_parser","()",""],["default_uri_parser=","Faraday::Utils","Faraday/Utils.html#method-i-default_uri_parser-3D","(parser)",""],["dehash","Faraday::DecodeMethods","Faraday/DecodeMethods.html#method-i-dehash","(hash, depth)","<p>Internal: convert a nested hash with purely numeric keys into an array. FIXME: this is not compatible …\n"],["delete","Faraday::Adapter::Test::Stubs","Faraday/Adapter/Test/Stubs.html#method-i-delete","(path, headers = {}, &block)",""],["delete","Faraday::Options","Faraday/Options.html#method-i-delete","(key)","<p>Public\n"],["delete","Faraday::RackBuilder","Faraday/RackBuilder.html#method-i-delete","(handler)",""],["delete","Faraday::Utils::Headers","Faraday/Utils/Headers.html#method-i-delete","(key)",""],["delete","Faraday::Utils::ParamsHash","Faraday/Utils/ParamsHash.html#method-i-delete","(key)",""],["dependency","Faraday::DependencyLoader","Faraday/DependencyLoader.html#method-i-dependency","(lib = nil)","<p>Executes a block which should try to require and reference dependent libraries\n"],["disable?","Faraday::SSLOptions","Faraday/SSLOptions.html#method-i-disable-3F","()","<p>@return [Boolean] true if should not verify\n"],["dump_body","Faraday::Logging::Formatter","Faraday/Logging/Formatter.html#method-i-dump_body","(body)",""],["dump_headers","Faraday::Logging::Formatter","Faraday/Logging/Formatter.html#method-i-dump_headers","(headers)",""],["dup","Faraday::Connection","Faraday/Connection.html#method-i-dup","()","<p>Creates a duplicate of this Faraday::Connection.\n<p>@api private\n<p>@return [Faraday::Connection]\n"],["dup","Faraday::RackBuilder","Faraday/RackBuilder.html#method-i-dup","()",""],["each","Faraday::Options","Faraday/Options.html#method-i-each","()","<p>Public\n"],["each_key","Faraday::Options","Faraday/Options.html#method-i-each_key","(&block)","<p>Public\n"],["each_value","Faraday::Options","Faraday/Options.html#method-i-each_value","(&block)","<p>Public\n"],["empty?","Faraday::Adapter::Test::Stubs","Faraday/Adapter/Test/Stubs.html#method-i-empty-3F","()",""],["empty?","Faraday::Options","Faraday/Options.html#method-i-empty-3F","()","<p>Public\n"],["encode","Faraday::EncodeMethods","Faraday/EncodeMethods.html#method-i-encode","(params)","<p>@param params [nil, Array, #to_hash] parameters to be encoded\n<p>@return [String] the encoded params\n<p>@raise …\n"],["encode","Faraday::FlatParamsEncoder","Faraday/FlatParamsEncoder.html#method-c-encode","(params)","<p>Encode converts the given param into a URI querystring. Keys and values will converted to strings and …\n"],["encode_array","Faraday::EncodeMethods","Faraday/EncodeMethods.html#method-i-encode_array","(parent, value)",""],["encode_hash","Faraday::EncodeMethods","Faraday/EncodeMethods.html#method-i-encode_hash","(parent, value)",""],["encode_pair","Faraday::EncodeMethods","Faraday/EncodeMethods.html#method-i-encode_pair","(parent, value)",""],["ensure_open_and_readable","Faraday::CompositeReadIO","Faraday/CompositeReadIO.html#method-i-ensure_open_and_readable","()",""],["escape","Faraday::Utils","Faraday/Utils.html#method-i-escape","(str)",""],["exc_msg_and_response","Faraday::Error","Faraday/Error.html#method-i-exc_msg_and_response","(exc, response = nil)","<p>Pulls out potential parent exception and response hash.\n"],["exc_msg_and_response!","Faraday::Error","Faraday/Error.html#method-i-exc_msg_and_response-21","(exc, response = nil)","<p>Pulls out potential parent exception and response hash, storing them in instance variables. exc      …\n"],["exceptions","Faraday::Request::Retry::Options","Faraday/Request/Retry/Options.html#method-i-exceptions","()",""],["execute_request","Faraday::Adapter::Rack","Faraday/Adapter/Rack.html#method-i-execute_request","(env, rack_env)",""],["fetch","Faraday::Options","Faraday/Options.html#method-i-fetch","(key, *args)","<p>Public\n"],["fetch","Faraday::Utils::Headers","Faraday/Utils/Headers.html#method-i-fetch","(key, *args, &block)",""],["fetch_error_class","Faraday::Options","Faraday/Options.html#method-c-fetch_error_class","()",""],["fetch_middleware","Faraday::MiddlewareRegistry","Faraday/MiddlewareRegistry.html#method-i-fetch_middleware","(key)",""],["filter","Faraday::Logging::Formatter","Faraday/Logging/Formatter.html#method-i-filter","(filter_word, filter_replacement)",""],["find_default_proxy","Faraday::Connection","Faraday/Connection.html#method-i-find_default_proxy","()",""],["finish","Faraday::Response","Faraday/Response.html#method-i-finish","(env)",""],["finished?","Faraday::Response","Faraday/Response.html#method-i-finished-3F","()",""],["from","Faraday::Env","Faraday/Env.html#method-c-from","(value)","<p>Build a new Env from given value. Respects and updates `custom_members`.\n<p>@param value [Object] a value …\n"],["from","Faraday::Options","Faraday/Options.html#method-c-from","(value)","<p>Public\n"],["from","Faraday::ProxyOptions","Faraday/ProxyOptions.html#method-c-from","(value)",""],["from","Faraday::Request::Retry::Options","Faraday/Request/Retry/Options.html#method-c-from","(value)",""],["from","Faraday::Utils::Headers","Faraday/Utils/Headers.html#method-c-from","(value)",""],["get","Faraday::Adapter::Test::Stubs","Faraday/Adapter/Test/Stubs.html#method-i-get","(path, headers = {}, &block)",""],["get","Faraday::AdapterRegistry","Faraday/AdapterRegistry.html#method-i-get","(name)",""],["has_key?","Faraday::Options","Faraday/Options.html#method-i-has_key-3F","(key)",""],["has_key?","Faraday::Utils::Headers","Faraday/Utils/Headers.html#method-i-has_key-3F","(key)",""],["has_key?","Faraday::Utils::ParamsHash","Faraday/Utils/ParamsHash.html#method-i-has_key-3F","(key)",""],["has_multipart?","Faraday::Request::Multipart","Faraday/Request/Multipart.html#method-i-has_multipart-3F","(obj)","<p>Returns true if obj is an enumerable with values that are multipart.\n<p>@param obj [Object] @return [Boolean] …\n"],["has_value?","Faraday::Options","Faraday/Options.html#method-i-has_value-3F","(value)",""],["head","Faraday::Adapter::Test::Stubs","Faraday/Adapter/Test/Stubs.html#method-i-head","(path, headers = {}, &block)",""],["header","Faraday::Request::Authorization","Faraday/Request/Authorization.html#method-c-header","(type, token)","<p>@param type [String, Symbol] @param token [String, Symbol, Hash] @return [String] a header value\n"],["header","Faraday::Request::BasicAuthentication","Faraday/Request/BasicAuthentication.html#method-c-header","(login, pass)","<p>@param pass [String]\n<p>@return [String] a Basic Authentication header line\n"],["header","Faraday::Request::TokenAuthentication","Faraday/Request/TokenAuthentication.html#method-c-header","(token, options = nil)",""],["headers","Faraday::ParamPart","Faraday/ParamPart.html#method-i-headers","()","<p>Returns a Hash of String key/value pairs.\n<p>@return [Hash]\n"],["headers","Faraday::Response","Faraday/Response.html#method-i-headers","()",""],["headers=","Faraday::Connection","Faraday/Connection.html#method-i-headers-3D","(hash)","<p>Sets the Hash of unencoded HTTP header key/value pairs. @param hash [Hash]\n"],["headers=","Faraday::Request","Faraday/Request.html#method-i-headers-3D","(hash)","<p>Replace request headers, preserving the existing hash type.\n<p>@param hash [Hash] new headers\n"],["headers_match?","Faraday::Adapter::Test::Stub","Faraday/Adapter/Test/Stub.html#method-i-headers_match-3F","(request_headers)",""],["in_member_set?","Faraday::Env","Faraday/Env.html#method-i-in_member_set-3F","(key)",""],["in_parallel","Faraday::Connection","Faraday/Connection.html#method-i-in_parallel","(manager = nil)","<p>Sets up the parallel manager to make a set of requests.\n<p>@param manager [Object] The parallel manager that …\n"],["in_parallel?","Faraday::Connection","Faraday/Connection.html#method-i-in_parallel-3F","()","<p>Determine if this Faraday::Connection can make parallel requests.\n<p>@return [Boolean]\n"],["include?","Faraday::Utils::Headers","Faraday/Utils/Headers.html#method-i-include-3F","(key)",""],["include?","Faraday::Utils::ParamsHash","Faraday/Utils/ParamsHash.html#method-i-include-3F","(key)",""],["inherited","Faraday::Adapter::Parallelism","Faraday/Adapter/Parallelism.html#method-i-inherited","(subclass)",""],["inherited","Faraday::DependencyLoader","Faraday/DependencyLoader.html#method-i-inherited","(subclass)",""],["inherited","Faraday::Options","Faraday/Options.html#method-c-inherited","(subclass)",""],["initialize_copy","Faraday::Utils::Headers","Faraday/Utils/Headers.html#method-i-initialize_copy","(other)","<p>on dup/clone, we need to duplicate @names hash\n"],["initialize_names","Faraday::Utils::Headers","Faraday/Utils/Headers.html#method-i-initialize_names","()",""],["initialize_proxy","Faraday::Connection","Faraday/Connection.html#method-i-initialize_proxy","(url, options)",""],["insert","Faraday::RackBuilder","Faraday/RackBuilder.html#method-i-insert","(index, *args, &block)",""],["insert_after","Faraday::RackBuilder","Faraday/RackBuilder.html#method-i-insert_after","(index, *args, &block)",""],["insert_before","Faraday::RackBuilder","Faraday/RackBuilder.html#method-i-insert_before","(index, *args, &block)",""],["inspect","Faraday::Env","Faraday/Env.html#method-i-inspect","()",""],["inspect","Faraday::Error","Faraday/Error.html#method-i-inspect","()",""],["inspect","Faraday::Options","Faraday/Options.html#method-i-inspect","()","<p>Internal\n"],["inspect","Faraday::RackBuilder::Handler","Faraday/RackBuilder/Handler.html#method-i-inspect","()",""],["instrumenter","Faraday::Request::Instrumentation::Options","Faraday/Request/Instrumentation/Options.html#method-i-instrumenter","()","<p>@return [Class]\n"],["interval","Faraday::Request::Retry::Options","Faraday/Request/Retry/Options.html#method-i-interval","()",""],["interval_randomness","Faraday::Request::Retry::Options","Faraday/Request/Retry/Options.html#method-i-interval_randomness","()",""],["is_adapter?","Faraday::RackBuilder","Faraday/RackBuilder.html#method-i-is_adapter-3F","(klass)",""],["key?","Faraday::Options","Faraday/Options.html#method-i-key-3F","(key)","<p>Public\n"],["key?","Faraday::Utils::Headers","Faraday/Utils/Headers.html#method-i-key-3F","(key)",""],["key?","Faraday::Utils::ParamsHash","Faraday/Utils/ParamsHash.html#method-i-key-3F","(key)",""],["keys","Faraday::Options","Faraday/Options.html#method-i-keys","()","<p>Public\n"],["klass","Faraday::RackBuilder::Handler","Faraday/RackBuilder/Handler.html#method-i-klass","()",""],["length","Faraday::CompositeReadIO","Faraday/CompositeReadIO.html#method-i-length","()","<p>@return [Integer] sum of the lengths of all the parts\n"],["load_autoloaded_constants","Faraday::AutoloadHelper","Faraday/AutoloadHelper.html#method-i-load_autoloaded_constants","()","<p>Loads each autoloaded constant.  If thread safety is a concern, wrap this in a Mutex.\n<p>@return [void]\n"],["load_middleware","Faraday::MiddlewareRegistry","Faraday/MiddlewareRegistry.html#method-i-load_middleware","(key)",""],["loaded?","Faraday::DependencyLoader","Faraday/DependencyLoader.html#method-i-loaded-3F","()",""],["lock!","Faraday::RackBuilder","Faraday/RackBuilder.html#method-i-lock-21","()","<p>Locks the middleware stack to ensure no further modifications are made.\n"],["locked?","Faraday::RackBuilder","Faraday/RackBuilder.html#method-i-locked-3F","()",""],["log_body","Faraday::Logging::Formatter","Faraday/Logging/Formatter.html#method-i-log_body","(type, body)",""],["log_body?","Faraday::Logging::Formatter","Faraday/Logging/Formatter.html#method-i-log_body-3F","(type)",""],["log_headers","Faraday::Logging::Formatter","Faraday/Logging/Formatter.html#method-i-log_headers","(type, headers)",""],["log_headers?","Faraday::Logging::Formatter","Faraday/Logging/Formatter.html#method-i-log_headers-3F","(type)",""],["log_level","Faraday::Logging::Formatter","Faraday/Logging/Formatter.html#method-i-log_level","()",""],["lookup_middleware","Faraday::MiddlewareRegistry","Faraday/MiddlewareRegistry.html#method-i-lookup_middleware","(key)","<p>Lookup middleware class with a registered Symbol shortcut.\n<p>@param key [Symbol] key for the registered …\n"],["marshal_dump","Faraday::Request","Faraday/Request.html#method-i-marshal_dump","()","<p>Marshal serialization support.\n<p>@return [Hash] the hash ready to be serialized in Marshal.\n"],["marshal_dump","Faraday::Response","Faraday/Response.html#method-i-marshal_dump","()","<p>because @on_complete_callbacks cannot be marshalled\n"],["marshal_load","Faraday::Request","Faraday/Request.html#method-i-marshal_load","(serialised)","<p>Marshal serialization support. Restores the instance variables according to the <code>serialised</code>. @param serialised …\n"],["marshal_load","Faraday::Response","Faraday/Response.html#method-i-marshal_load","(env)",""],["match","Faraday::Adapter::Test::Stubs","Faraday/Adapter/Test/Stubs.html#method-i-match","(request_method, host, path, headers, body)",""],["match_content_type","Faraday::Request::UrlEncoded","Faraday/Request/UrlEncoded.html#method-i-match_content_type","(env)","<p>@param env [Faraday::Env] @yield [request_body] Body of the request\n"],["match_context","Faraday::DecodeMethods","Faraday/DecodeMethods.html#method-i-match_context","(context, subkey)",""],["matches?","Faraday::Adapter::Test::Stub","Faraday/Adapter/Test/Stub.html#method-i-matches-3F","(request_host, request_uri, request_headers, request_body)",""],["matches?","Faraday::Adapter::Test::Stubs","Faraday/Adapter/Test/Stubs.html#method-i-matches-3F","(stack, host, path, headers, body)",""],["max","Faraday::Request::Retry::Options","Faraday/Request/Retry/Options.html#method-i-max","()",""],["max_interval","Faraday::Request::Retry::Options","Faraday/Request/Retry/Options.html#method-i-max_interval","()",""],["member?","Faraday::Utils::Headers","Faraday/Utils/Headers.html#method-i-member-3F","(key)",""],["member?","Faraday::Utils::ParamsHash","Faraday/Utils/ParamsHash.html#method-i-member-3F","(key)",""],["member_set","Faraday::Env","Faraday/Env.html#method-c-member_set","()","<p>@private\n"],["memoized","Faraday::Options","Faraday/Options.html#method-c-memoized","(key, &block)",""],["memoized_attributes","Faraday::Options","Faraday/Options.html#method-c-memoized_attributes","()",""],["merge","Faraday::Options","Faraday/Options.html#method-i-merge","(other)","<p>Public\n"],["merge","Faraday::Utils::Headers","Faraday/Utils/Headers.html#method-i-merge","(other)",""],["merge","Faraday::Utils::ParamsHash","Faraday/Utils/ParamsHash.html#method-i-merge","(params)",""],["merge!","Faraday::Options","Faraday/Options.html#method-i-merge-21","(other)","<p>Public\n"],["merge!","Faraday::Utils::Headers","Faraday/Utils/Headers.html#method-i-merge-21","(other)",""],["merge!","Faraday::Utils::ParamsHash","Faraday/Utils/ParamsHash.html#method-i-merge-21","(params)",""],["merge_query","Faraday::Utils::ParamsHash","Faraday/Utils/ParamsHash.html#method-i-merge_query","(query, encoder = nil)",""],["method","Faraday::Request","Faraday/Request.html#method-i-method","()",""],["method_missing","Faraday","Faraday.html#method-c-method_missing","(name, *args, &block)","<p>Internal: Proxies method calls on the Faraday constant to .default_connection.\n"],["methods","Faraday::Request::Retry::Options","Faraday/Request/Retry/Options.html#method-i-methods","()",""],["middleware_mutex","Faraday::MiddlewareRegistry","Faraday/MiddlewareRegistry.html#method-i-middleware_mutex","(&block)",""],["name","Faraday::Request::Instrumentation::Options","Faraday/Request/Instrumentation/Options.html#method-i-name","()",""],["needs_body?","Faraday::Env","Faraday/Env.html#method-i-needs_body-3F","()","<p>@return [Boolean] true if there&#39;s no body yet, and the method is in the set of {MethodsWithBodies}. …\n"],["new","Faraday","Faraday.html#method-c-new","(url = nil, options = {}, &block)","<p>Initializes a new {Connection}.\n<p>@param url [String,Hash] The optional String base URL to use as a prefix …\n"],["new","Faraday::Adapter","Faraday/Adapter.html#method-c-new","(_app = nil, opts = {}, &block)",""],["new","Faraday::Adapter::Rack","Faraday/Adapter/Rack.html#method-c-new","(faraday_app, rack_app)",""],["new","Faraday::Adapter::Test","Faraday/Adapter/Test.html#method-c-new","(app, stubs = nil, &block)",""],["new","Faraday::Adapter::Test::Stub","Faraday/Adapter/Test/Stub.html#method-c-new","(host, full, headers, body, block)",""],["new","Faraday::Adapter::Test::Stubs","Faraday/Adapter/Test/Stubs.html#method-c-new","()",""],["new","Faraday::AdapterRegistry","Faraday/AdapterRegistry.html#method-c-new","()",""],["new","Faraday::CompositeReadIO","Faraday/CompositeReadIO.html#method-c-new","(*parts)",""],["new","Faraday::Connection","Faraday/Connection.html#method-c-new","(url = nil, options = nil)","<p>Initializes a new Faraday::Connection.\n<p>@param url [URI, String] URI or String base URL to use as a prefix …\n"],["new","Faraday::DependencyLoader","Faraday/DependencyLoader.html#method-i-new","(*)",""],["new","Faraday::Error","Faraday/Error.html#method-c-new","(exc, response = nil)",""],["new","Faraday::Logging::Formatter","Faraday/Logging/Formatter.html#method-c-new","(logger:, options:)",""],["new","Faraday::Middleware","Faraday/Middleware.html#method-c-new","(app = nil, options = {})",""],["new","Faraday::NilStatusError","Faraday/NilStatusError.html#method-c-new","(exc, response = nil)",""],["new","Faraday::ParamPart","Faraday/ParamPart.html#method-c-new","(value, content_type, content_id = nil)","<p>@param value [String] Uploaded content as a String. @param content_type [String] String content type …\n"],["new","Faraday::RackBuilder","Faraday/RackBuilder.html#method-c-new","(handlers = [], adapter = nil, &block)",""],["new","Faraday::RackBuilder::Handler","Faraday/RackBuilder/Handler.html#method-c-new","(klass, *args, &block)",""],["new","Faraday::Request::Authorization","Faraday/Request/Authorization.html#method-c-new","(app, type, token)","<p>@param app [#call] @param type [String, Symbol] Type of Authorization @param token [String, Symbol, Hash] …\n"],["new","Faraday::Request::Instrumentation","Faraday/Request/Instrumentation.html#method-c-new","(app, options = nil)","<p>Instruments requests using Active Support.\n<p>Measures time spent only for synchronous requests.\n<p>@example …\n"],["new","Faraday::Request::Multipart","Faraday/Request/Multipart.html#method-c-new","(app = nil, options = {})",""],["new","Faraday::Request::Retry","Faraday/Request/Retry.html#method-c-new","(app, options = nil)","<p>@param app [#call] @param options [Hash] @option options [Integer] :max (2) Maximum number of retries …\n"],["new","Faraday::Request::TokenAuthentication","Faraday/Request/TokenAuthentication.html#method-c-new","(app, token, options = nil)",""],["new","Faraday::Response","Faraday/Response.html#method-c-new","(env = nil)",""],["new","Faraday::Response::Logger","Faraday/Response/Logger.html#method-c-new","(app, logger = nil, options = {})",""],["new","Faraday::TimeoutError","Faraday/TimeoutError.html#method-c-new","(exc = 'timeout', response = nil)",""],["new","Faraday::Utils::Headers","Faraday/Utils/Headers.html#method-c-new","(hash = nil)",""],["new_builder","Faraday::ConnectionOptions","Faraday/ConnectionOptions.html#method-i-new_builder","(block)",""],["new_context","Faraday::DecodeMethods","Faraday/DecodeMethods.html#method-i-new_context","(subkey, is_array, context)",""],["new_stub","Faraday::Adapter::Test::Stubs","Faraday/Adapter/Test/Stubs.html#method-i-new_stub","(request_method, path, headers = {}, body = nil, &block)",""],["normalize_path","Faraday::Utils","Faraday/Utils.html#method-i-normalize_path","(url)","<p>Receives a String or URI and returns just the path with the query string sorted.\n"],["on_complete","Faraday::Response","Faraday/Response.html#method-i-on_complete","(&block)",""],["on_complete","Faraday::Response::Logger","Faraday/Response/Logger.html#method-i-on_complete","(env)",""],["on_complete","Faraday::Response::Middleware","Faraday/Response/Middleware.html#method-i-on_complete","(env)","<p>Override this to modify the environment after the response has finished. Calls the `parse` method if …\n"],["on_complete","Faraday::Response::RaiseError","Faraday/Response/RaiseError.html#method-i-on_complete","(env)","<p>rubocop:enable Naming/ConstantName\n"],["options","Faraday::Adapter::Test::Stubs","Faraday/Adapter/Test/Stubs.html#method-i-options","(path, headers = {}, &block)",""],["options","Faraday::Connection","Faraday/Connection.html#method-i-options","(*args)","<p>@overload options()\n\n<pre>Returns current Connection options.</pre>\n<p>@overload options(url, params = nil, headers = …\n"],["options","Faraday::Options","Faraday/Options.html#method-c-options","(mapping)","<p>Internal\n"],["options_for","Faraday::Options","Faraday/Options.html#method-c-options_for","(key)","<p>Internal\n"],["parallel?","Faraday::Env","Faraday/Env.html#method-i-parallel-3F","()","<p>@return [Boolean] true if there is a parallel_manager\n"],["params=","Faraday::Connection","Faraday/Connection.html#method-i-params-3D","(hash)","<p>Sets the Hash of URI query unencoded key/value pairs. @param hash [Hash]\n"],["params=","Faraday::Request","Faraday/Request.html#method-i-params-3D","(hash)","<p>Replace params, preserving the existing hash type.\n<p>@param hash [Hash] new params\n"],["params_match?","Faraday::Adapter::Test::Stub","Faraday/Adapter/Test/Stub.html#method-i-params_match-3F","(request_params)",""],["parse","Faraday::Utils::Headers","Faraday/Utils/Headers.html#method-i-parse","(header_string)",""],["parse_body?","Faraday::Env","Faraday/Env.html#method-i-parse_body-3F","()","<p>@return [Boolean] true if the status isn&#39;t in the set of {StatusesWithoutBody}.\n"],["parse_nested_query","Faraday::Utils","Faraday/Utils.html#method-i-parse_nested_query","(query)",""],["parse_query","Faraday::Utils","Faraday/Utils.html#method-i-parse_query","(query)","<p>Adapted from Rack\n"],["part","Faraday::Request::Multipart","Faraday/Request/Multipart.html#method-i-part","(boundary, key, value)",""],["patch","Faraday::Adapter::Test::Stubs","Faraday/Adapter/Test/Stubs.html#method-i-patch","(path, body = nil, headers = {}, &block)",""],["path_match?","Faraday::Adapter::Test::Stub","Faraday/Adapter/Test/Stub.html#method-i-path_match-3F","(request_path, meta)",""],["path_prefix=","Faraday::Connection","Faraday/Connection.html#method-i-path_prefix-3D","(value)","<p>Sets the path prefix and ensures that it always has a leading slash.\n<p>@param value [String]\n<p>@return [String] …\n"],["post","Faraday::Adapter::Test::Stubs","Faraday/Adapter/Test/Stubs.html#method-i-post","(path, body = nil, headers = {}, &block)",""],["prepare_context","Faraday::DecodeMethods","Faraday/DecodeMethods.html#method-i-prepare_context","(context, subkey, is_array, last_subkey)",""],["pretty_inspect","Faraday::Logging::Formatter","Faraday/Logging/Formatter.html#method-i-pretty_inspect","(body)",""],["process_params","Faraday::Request::Multipart","Faraday/Request/Multipart.html#method-i-process_params","(params, prefix = nil, pieces = nil, &block)","<p>@param params [Hash] @param prefix [String] @param pieces [Array]\n"],["process_request?","Faraday::Request::Multipart","Faraday/Request/Multipart.html#method-i-process_request-3F","(env)","<p>@param env [Faraday::Env]\n"],["process_request?","Faraday::Request::UrlEncoded","Faraday/Request/UrlEncoded.html#method-i-process_request-3F","(env)","<p>@param env [Faraday::Env]\n<p>@return [Boolean] True if the request has a body and its Content-Type is\n\n<pre>urlencoded.</pre>\n"],["proxy=","Faraday::Connection","Faraday/Connection.html#method-i-proxy-3D","(new_value)","<p>Sets the Hash proxy options.\n<p>@param new_value [Object]\n"],["proxy_for_request","Faraday::Connection","Faraday/Connection.html#method-i-proxy_for_request","(url)",""],["proxy_from_env","Faraday::Connection","Faraday/Connection.html#method-i-proxy_from_env","(url)",""],["put","Faraday::Adapter::Test::Stubs","Faraday/Adapter/Test/Stubs.html#method-i-put","(path, body = nil, headers = {}, &block)",""],["raise_if_adapter","Faraday::RackBuilder","Faraday/RackBuilder.html#method-i-raise_if_adapter","(klass)",""],["raise_if_locked","Faraday::RackBuilder","Faraday/RackBuilder.html#method-i-raise_if_locked","()",""],["read","Faraday::CompositeReadIO","Faraday/CompositeReadIO.html#method-i-read","(length = nil, outbuf = nil)","<p>Read from IOs in order until `length` bytes have been received.\n<p>@param length [Integer, nil] @param outbuf …\n"],["reason_phrase","Faraday::Response","Faraday/Response.html#method-i-reason_phrase","()",""],["register_middleware","Faraday::MiddlewareRegistry","Faraday/MiddlewareRegistry.html#method-i-register_middleware","(autoload_path = nil, mapping = nil)","<p>Register middleware class(es) on the current module.\n<p>@param autoload_path [String] Middleware autoload …\n"],["replace","Faraday::Utils::Headers","Faraday/Utils/Headers.html#method-i-replace","(other)",""],["replace","Faraday::Utils::ParamsHash","Faraday/Utils/ParamsHash.html#method-i-replace","(other)",""],["request","Faraday::Logging::Formatter","Faraday/Logging/Formatter.html#method-i-request","(env)",""],["request","Faraday::RackBuilder","Faraday/RackBuilder.html#method-i-request","(key, *args, &block)",""],["request_timeout","Faraday::Adapter","Faraday/Adapter.html#method-i-request_timeout","(type, options)","<p>Fetches either a read, write, or open timeout setting. Defaults to the :timeout value if a more specific …\n"],["request_type","Faraday::Request::UrlEncoded","Faraday/Request/UrlEncoded.html#method-i-request_type","(env)","<p>@param env [Faraday::Env]\n<p>@return [String]\n"],["require_lib","Faraday","Faraday.html#method-c-require_lib","(*libs)",""],["require_libs","Faraday","Faraday.html#method-c-require_libs","(*libs)","<p>@private Internal: Requires internal Faraday libraries.\n<p>@param libs [Array] one or more relative String …\n"],["respond_to_missing?","Faraday","Faraday.html#method-c-respond_to_missing-3F","(symbol, include_private = false)",""],["response","Faraday::Logging::Formatter","Faraday/Logging/Formatter.html#method-i-response","(env)",""],["response","Faraday::RackBuilder","Faraday/RackBuilder.html#method-i-response","(key, *args, &block)",""],["response_body","Faraday::Error","Faraday/Error.html#method-i-response_body","()",""],["response_headers","Faraday::Error","Faraday/Error.html#method-i-response_headers","()",""],["response_status","Faraday::Error","Faraday/Error.html#method-i-response_status","()",""],["response_values","Faraday::Response::RaiseError","Faraday/Response/RaiseError.html#method-i-response_values","(env)",""],["retry_block","Faraday::Request::Retry::Options","Faraday/Request/Retry/Options.html#method-i-retry_block","()",""],["retry_if","Faraday::Request::Retry::Options","Faraday/Request/Retry/Options.html#method-i-retry_if","()",""],["retry_request?","Faraday::Request::Retry","Faraday/Request/Retry.html#method-i-retry_request-3F","(env, exception)",""],["retry_statuses","Faraday::Request::Retry::Options","Faraday/Request/Retry/Options.html#method-i-retry_statuses","()",""],["rewind","Faraday::CompositeReadIO","Faraday/CompositeReadIO.html#method-i-rewind","()","<p>Rewind each of the IOs and reset the index to 0.\n<p>@return [void]\n"],["rewind_files","Faraday::Request::Retry","Faraday/Request/Retry.html#method-i-rewind_files","(body)",""],["run_request","Faraday::Connection","Faraday/Connection.html#method-i-run_request","(method, url, body, headers)","<p>Builds and runs the Faraday::Request.\n<p>@param method [Symbol] HTTP method. @param url [String, URI] String …\n"],["save_response","Faraday::Adapter","Faraday/Adapter.html#method-i-save_response","(env, status, body, headers = nil, reason_phrase = nil)",""],["set","Faraday::AdapterRegistry","Faraday/AdapterRegistry.html#method-i-set","(klass, name = nil)",""],["set_authorization_header","Faraday::Connection","Faraday/Connection.html#method-i-set_authorization_header","(header_type, *args)",""],["sort_query_params","Faraday::Utils","Faraday/Utils.html#method-i-sort_query_params","(query)",""],["ssl_cert_store","Faraday::Adapter::HTTPClient","Faraday/Adapter/HTTPClient.html#method-i-ssl_cert_store","(ssl)","<p>@param ssl [Hash] @return [OpenSSL::X509::Store]\n"],["ssl_verify_mode","Faraday::Adapter::HTTPClient","Faraday/Adapter/HTTPClient.html#method-i-ssl_verify_mode","(ssl)","<p>@param ssl [Hash]\n"],["status","Faraday::Response","Faraday/Response.html#method-i-status","()",""],["stream_response?","Faraday::RequestOptions","Faraday/RequestOptions.html#method-i-stream_response-3F","()",""],["success?","Faraday::Env","Faraday/Env.html#method-i-success-3F","()","<p>@return [Boolean] true if status is in the set of {SuccessfulStatuses}.\n"],["success?","Faraday::Response","Faraday/Response.html#method-i-success-3F","()",""],["support_parallel?","Faraday::Connection","Faraday/Connection.html#method-i-support_parallel-3F","(adapter)",""],["supports_parallel?","Faraday::Adapter::Parallelism","Faraday/Adapter/Parallelism.html#method-i-supports_parallel-3F","()",""],["swap","Faraday::RackBuilder","Faraday/RackBuilder.html#method-i-swap","(index, *args, &block)",""],["symbolized_key_set","Faraday::Options","Faraday/Options.html#method-i-symbolized_key_set","()",""],["to_app","Faraday::RackBuilder","Faraday/RackBuilder.html#method-i-to_app","()",""],["to_env","Faraday::Request","Faraday/Request.html#method-i-to_env","(connection)","<p>@return [Env] the Env for this Request\n"],["to_hash","Faraday::Options","Faraday/Options.html#method-i-to_hash","()","<p>Public\n"],["to_hash","Faraday::Response","Faraday/Response.html#method-i-to_hash","()",""],["to_hash","Faraday::Utils::Headers","Faraday/Utils/Headers.html#method-i-to_hash","()",""],["to_part","Faraday::ParamPart","Faraday/ParamPart.html#method-i-to_part","(boundary, key)","<p>Converts this value to a form part.\n<p>@param boundary [String] String multipart boundary that must not exist …\n"],["to_query","Faraday::Utils::ParamsHash","Faraday/Utils/ParamsHash.html#method-i-to_query","(encoder = nil)",""],["to_s","Faraday::Adapter::Test::Stub","Faraday/Adapter/Test/Stub.html#method-i-to_s","()",""],["token_auth","Faraday::Connection","Faraday/Connection.html#method-i-token_auth","(token, options = nil)","<p>Sets up the Authorization header with the given token.\n<p>@param token [String] @param options [Hash] extra …\n"],["unescape","Faraday::Utils","Faraday/Utils.html#method-i-unescape","(str)",""],["unique_boundary","Faraday::Request::Multipart","Faraday/Request/Multipart.html#method-i-unique_boundary","()","<p>@return [String]\n"],["unregister_middleware","Faraday::MiddlewareRegistry","Faraday/MiddlewareRegistry.html#method-i-unregister_middleware","(key)","<p>Unregister a previously registered middleware class.\n<p>@param key [Symbol] key for the registered middleware. …\n"],["update","Faraday::Options","Faraday/Options.html#method-i-update","(obj)","<p>Public\n"],["update","Faraday::Utils::Headers","Faraday/Utils/Headers.html#method-i-update","(other)",""],["update","Faraday::Utils::ParamsHash","Faraday/Utils/ParamsHash.html#method-i-update","(params)",""],["url","Faraday::Request","Faraday/Request.html#method-i-url","(path, params = nil)","<p>Update path and params.\n<p>@param path [URI, String] @param params [Hash, nil] @return [void]\n"],["url_prefix=","Faraday::Connection","Faraday/Connection.html#method-i-url_prefix-3D","(url, encoder = nil)","<p>Parses the given URL with URI and stores the individual components in this connection. These components …\n"],["use","Faraday::RackBuilder","Faraday/RackBuilder.html#method-i-use","(klass, *args, &block)",""],["use_symbol","Faraday::RackBuilder","Faraday/RackBuilder.html#method-i-use_symbol","(mod, key, *args, &block)",""],["value?","Faraday::Options","Faraday/Options.html#method-i-value-3F","(value)","<p>Public\n"],["values_at","Faraday::Options","Faraday/Options.html#method-i-values_at","(*keys)","<p>Public\n"],["verify?","Faraday::SSLOptions","Faraday/SSLOptions.html#method-i-verify-3F","()","<p>@return [Boolean] true if should verify\n"],["verify_stubbed_calls","Faraday::Adapter::Test::Stubs","Faraday/Adapter/Test/Stubs.html#method-i-verify_stubbed_calls","()","<p>Raises an error if any of the stubbed calls have not been made.\n"],["with_uri_credentials","Faraday::Connection","Faraday/Connection.html#method-i-with_uri_credentials","(uri)","<p>Yields username and password extracted from a URI if they both exist.\n<p>@param uri [URI] @yield [username, …\n"]]}}