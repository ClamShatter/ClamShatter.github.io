var search_data = {"index":{"searchIndex":["object","terminal","table","cell","row","separator","style","tablehelper","<<()","<<()","==()","[]()","add_cell()","add_row()","add_separator()","align()","align_column()","alignment()","alignment=()","alignment?()","apply()","cell_padding()","cell_spacing()","column()","column_width()","column_widths()","column_with_headings()","columns()","columns_width()","defaults()","defaults=()","escape()","headings=()","headings_with_rows()","height()","length_of_column()","lines()","new()","new()","new()","new()","number_of_columns()","number_of_columns()","on_change()","recalc_column_widths()","render()","render()","render()","render()","require_column_widths_recalc()","rows()","rows=()","style()","style=()","table()","title=()","title_cell_options()","to_s()","to_s()","value_for_column_width_recalc()","width()","yield_or_eval()"],"longSearchIndex":["object","terminal","terminal::table","terminal::table::cell","terminal::table::row","terminal::table::separator","terminal::table::style","terminal::table::tablehelper","terminal::table#<<()","terminal::table::row#<<()","terminal::table#==()","terminal::table::row#[]()","terminal::table::row#add_cell()","terminal::table#add_row()","terminal::table#add_separator()","terminal::table::cell#align()","terminal::table#align_column()","terminal::table::cell#alignment()","terminal::table::cell#alignment=()","terminal::table::cell#alignment?()","terminal::table::style#apply()","terminal::table#cell_padding()","terminal::table#cell_spacing()","terminal::table#column()","terminal::table#column_width()","terminal::table#column_widths()","terminal::table#column_with_headings()","terminal::table#columns()","terminal::table#columns_width()","terminal::table::style::defaults()","terminal::table::style::defaults=()","terminal::table::cell#escape()","terminal::table#headings=()","terminal::table#headings_with_rows()","terminal::table::row#height()","terminal::table#length_of_column()","terminal::table::cell#lines()","terminal::table::new()","terminal::table::cell::new()","terminal::table::row::new()","terminal::table::style::new()","terminal::table#number_of_columns()","terminal::table::row#number_of_columns()","terminal::table::style#on_change()","terminal::table#recalc_column_widths()","terminal::table#render()","terminal::table::cell#render()","terminal::table::row#render()","terminal::table::separator#render()","terminal::table#require_column_widths_recalc()","terminal::table#rows()","terminal::table#rows=()","terminal::table#style()","terminal::table#style=()","terminal::table::tablehelper#table()","terminal::table#title=()","terminal::table#title_cell_options()","terminal::table#to_s()","terminal::table::cell#to_s()","terminal::table::cell#value_for_column_width_recalc()","terminal::table::cell#width()","terminal::table#yield_or_eval()"],"info":[["Object","","Object.html","",""],["Terminal","","Terminal.html","",""],["Terminal::Table","","Terminal/Table.html","",""],["Terminal::Table::Cell","","Terminal/Table/Cell.html","",""],["Terminal::Table::Row","","Terminal/Table/Row.html","",""],["Terminal::Table::Separator","","Terminal/Table/Separator.html","",""],["Terminal::Table::Style","","Terminal/Table/Style.html","","<p>A Style object holds all the formatting information for a Table object\n<p>To create a table with a certain …\n"],["Terminal::Table::TableHelper","","Terminal/Table/TableHelper.html","",""],["<<","Terminal::Table","Terminal/Table.html#method-i-3C-3C","(array)",""],["<<","Terminal::Table::Row","Terminal/Table/Row.html#method-i-3C-3C","(item)",""],["==","Terminal::Table","Terminal/Table.html#method-i-3D-3D","(other)","<p>Check if <em>other</em> is equal to self. <em>other</em> is considered equal if it contains the same headings and rows. …\n"],["[]","Terminal::Table::Row","Terminal/Table/Row.html#method-i-5B-5D","(index)",""],["add_cell","Terminal::Table::Row","Terminal/Table/Row.html#method-i-add_cell","(item)",""],["add_row","Terminal::Table","Terminal/Table.html#method-i-add_row","(array)","<p>Add a row.\n"],["add_separator","Terminal::Table","Terminal/Table.html#method-i-add_separator","()","<p>Add a separator.\n"],["align","Terminal::Table::Cell","Terminal/Table/Cell.html#method-i-align","(val, position, length)",""],["align_column","Terminal::Table","Terminal/Table.html#method-i-align_column","(n, alignment)","<p>Align column <em>n</em> to the given <em>alignment</em> of :center, :left, or :right.\n"],["alignment","Terminal::Table::Cell","Terminal/Table/Cell.html#method-i-alignment","()",""],["alignment=","Terminal::Table::Cell","Terminal/Table/Cell.html#method-i-alignment-3D","(val)",""],["alignment?","Terminal::Table::Cell","Terminal/Table/Cell.html#method-i-alignment-3F","()",""],["apply","Terminal::Table::Style","Terminal/Table/Style.html#method-i-apply","(options)",""],["cell_padding","Terminal::Table","Terminal/Table.html#method-i-cell_padding","()",""],["cell_spacing","Terminal::Table","Terminal/Table.html#method-i-cell_spacing","()",""],["column","Terminal::Table","Terminal/Table.html#method-i-column","(n, method = :value, array = rows)","<p>Return column <em>n</em>.\n"],["column_width","Terminal::Table","Terminal/Table.html#method-i-column_width","(n)","<p>Return length of column <em>n</em>.\n"],["column_widths","Terminal::Table","Terminal/Table.html#method-i-column_widths","()",""],["column_with_headings","Terminal::Table","Terminal/Table.html#method-i-column_with_headings","(n, method = :value)","<p>Return <em>n</em> column including headings.\n"],["columns","Terminal::Table","Terminal/Table.html#method-i-columns","()","<p>Return columns.\n"],["columns_width","Terminal::Table","Terminal/Table.html#method-i-columns_width","()",""],["defaults","Terminal::Table::Style","Terminal/Table/Style.html#method-c-defaults","()",""],["defaults=","Terminal::Table::Style","Terminal/Table/Style.html#method-c-defaults-3D","(options)",""],["escape","Terminal::Table::Cell","Terminal/Table/Cell.html#method-i-escape","(line)","<p>removes all ANSI escape sequences (e.g. color)\n"],["headings=","Terminal::Table","Terminal/Table.html#method-i-headings-3D","(arrays)","<p>Set the headings\n"],["headings_with_rows","Terminal::Table","Terminal/Table.html#method-i-headings_with_rows","()","<p>Return headings combined with rows.\n"],["height","Terminal::Table::Row","Terminal/Table/Row.html#method-i-height","()",""],["length_of_column","Terminal::Table","Terminal/Table.html#method-i-length_of_column","(n)",""],["lines","Terminal::Table::Cell","Terminal/Table/Cell.html#method-i-lines","()",""],["new","Terminal::Table","Terminal/Table.html#method-c-new","(options = {})","<p>Generates a ASCII table with the given <em>options</em>.\n"],["new","Terminal::Table::Cell","Terminal/Table/Cell.html#method-c-new","(options = nil)","<p>Initialize with <em>options</em>.\n"],["new","Terminal::Table::Row","Terminal/Table/Row.html#method-c-new","(table, array = [])","<p>Initialize with <em>width</em> and <em>options</em>.\n"],["new","Terminal::Table::Style","Terminal/Table/Style.html#method-c-new","(options = {})",""],["number_of_columns","Terminal::Table","Terminal/Table.html#method-i-number_of_columns","()","<p>Return total number of columns available.\n"],["number_of_columns","Terminal::Table::Row","Terminal/Table/Row.html#method-i-number_of_columns","()",""],["on_change","Terminal::Table::Style","Terminal/Table/Style.html#method-i-on_change","(attr)",""],["recalc_column_widths","Terminal::Table","Terminal/Table.html#method-i-recalc_column_widths","()",""],["render","Terminal::Table","Terminal/Table.html#method-i-render","()","<p>Render the table.\n"],["render","Terminal::Table::Cell","Terminal/Table/Cell.html#method-i-render","(line = 0)","<p>Render the cell.\n"],["render","Terminal::Table::Row","Terminal/Table/Row.html#method-i-render","()",""],["render","Terminal::Table::Separator","Terminal/Table/Separator.html#method-i-render","()",""],["require_column_widths_recalc","Terminal::Table","Terminal/Table.html#method-i-require_column_widths_recalc","()",""],["rows","Terminal::Table","Terminal/Table.html#method-i-rows","()","<p>Return rows without separator rows.\n"],["rows=","Terminal::Table","Terminal/Table.html#method-i-rows-3D","(array)",""],["style","Terminal::Table","Terminal/Table.html#method-i-style","()",""],["style=","Terminal::Table","Terminal/Table.html#method-i-style-3D","(options)",""],["table","Terminal::Table::TableHelper","Terminal/Table/TableHelper.html#method-i-table","(headings = [], *rows, &block)",""],["title=","Terminal::Table","Terminal/Table.html#method-i-title-3D","(title)",""],["title_cell_options","Terminal::Table","Terminal/Table.html#method-i-title_cell_options","()",""],["to_s","Terminal::Table","Terminal/Table.html#method-i-to_s","()",""],["to_s","Terminal::Table::Cell","Terminal/Table/Cell.html#method-i-to_s","(line = 0)",""],["value_for_column_width_recalc","Terminal::Table::Cell","Terminal/Table/Cell.html#method-i-value_for_column_width_recalc","()","<p>Returns the longest line in the cell and removes all ANSI escape sequences (e.g. color)\n"],["width","Terminal::Table::Cell","Terminal/Table/Cell.html#method-i-width","()","<p>Returns the width of this cell\n"],["yield_or_eval","Terminal::Table","Terminal/Table.html#method-i-yield_or_eval","(&block)",""]]}}