var search_data = {"index":{"searchIndex":["emhttpsslpatch","faraday","adapter","emhttp","manager","options","emhttp","add()","call()","certificate_store()","check_finished()","configure_compression()","configure_proxy()","configure_socket()","configure_ssl()","configure_timeout()","connection_config()","create_request()","error_message()","host()","new()","parallel?()","perform_request()","perform_request()","perform_single_request()","raise_error()","read_body()","request_config()","request_options()","reset()","run()","running?()","setup_parallel_manager()","ssl_handshake_completed()","ssl_verify_peer()","timeout_message?()","verified_cert_identity?()","verify_peer?()"],"longSearchIndex":["emhttpsslpatch","faraday","faraday::adapter","faraday::adapter::emhttp","faraday::adapter::emhttp::manager","faraday::adapter::emhttp::options","faraday::emhttp","faraday::adapter::emhttp::manager#add()","faraday::adapter::emhttp#call()","emhttpsslpatch#certificate_store()","faraday::adapter::emhttp::manager#check_finished()","faraday::adapter::emhttp::options#configure_compression()","faraday::adapter::emhttp::options#configure_proxy()","faraday::adapter::emhttp::options#configure_socket()","faraday::adapter::emhttp::options#configure_ssl()","faraday::adapter::emhttp::options#configure_timeout()","faraday::adapter::emhttp::options#connection_config()","faraday::adapter::emhttp#create_request()","faraday::adapter::emhttp#error_message()","emhttpsslpatch#host()","faraday::adapter::emhttp::manager::new()","faraday::adapter::emhttp#parallel?()","faraday::adapter::emhttp#perform_request()","faraday::adapter::emhttp::manager#perform_request()","faraday::adapter::emhttp#perform_single_request()","faraday::adapter::emhttp#raise_error()","faraday::adapter::emhttp::options#read_body()","faraday::adapter::emhttp::options#request_config()","faraday::adapter::emhttp::options#request_options()","faraday::adapter::emhttp::manager#reset()","faraday::adapter::emhttp::manager#run()","faraday::adapter::emhttp::manager#running?()","faraday::adapter::emhttp::setup_parallel_manager()","emhttpsslpatch#ssl_handshake_completed()","emhttpsslpatch#ssl_verify_peer()","faraday::adapter::emhttp#timeout_message?()","emhttpsslpatch#verified_cert_identity?()","emhttpsslpatch#verify_peer?()"],"info":[["EmHttpSslPatch","","EmHttpSslPatch.html","","<p>EventMachine patch to make SSL work.\n"],["Faraday","","Faraday.html","",""],["Faraday::Adapter","","Faraday/Adapter.html","",""],["Faraday::Adapter::EMHttp","","Faraday/Adapter/EMHttp.html","","<p>EventMachine adapter. This adapter is useful for either asynchronous requests when in an EM reactor loop, …\n"],["Faraday::Adapter::EMHttp::Manager","","Faraday/Adapter/EMHttp/Manager.html","","<p>This parallel manager is designed to start an EventMachine loop and block until all registered requests …\n"],["Faraday::Adapter::EMHttp::Options","","Faraday/Adapter/EMHttp/Options.html","","<p>Options is a module containing helpers to convert the Faraday env object into options hashes for EMHTTP …\n"],["Faraday::EmHttp","","Faraday/EmHttp.html","","<p>Main Faraday::EmHttp module\n"],["add","Faraday::Adapter::EMHttp::Manager","Faraday/Adapter/EMHttp/Manager.html#method-i-add","(&block)",""],["call","Faraday::Adapter::EMHttp","Faraday/Adapter/EMHttp.html#method-i-call","(env)",""],["certificate_store","EmHttpSslPatch","EmHttpSslPatch.html#method-i-certificate_store","()",""],["check_finished","Faraday::Adapter::EMHttp::Manager","Faraday/Adapter/EMHttp/Manager.html#method-i-check_finished","()",""],["configure_compression","Faraday::Adapter::EMHttp::Options","Faraday/Adapter/EMHttp/Options.html#method-i-configure_compression","(options, env)","<p>Reads out compression header settings from env into options\n"],["configure_proxy","Faraday::Adapter::EMHttp::Options","Faraday/Adapter/EMHttp/Options.html#method-i-configure_proxy","(options, env)","<p>Reads out proxy settings from env into options\n"],["configure_socket","Faraday::Adapter::EMHttp::Options","Faraday/Adapter/EMHttp/Options.html#method-i-configure_socket","(options, env)","<p>Reads out host and port settings from env into options\n"],["configure_ssl","Faraday::Adapter::EMHttp::Options","Faraday/Adapter/EMHttp/Options.html#method-i-configure_ssl","(options, env)","<p>Reads out SSL certificate settings from env into options\n"],["configure_timeout","Faraday::Adapter::EMHttp::Options","Faraday/Adapter/EMHttp/Options.html#method-i-configure_timeout","(options, env)","<p>Reads out timeout settings from env into options\n"],["connection_config","Faraday::Adapter::EMHttp::Options","Faraday/Adapter/EMHttp/Options.html#method-i-connection_config","(env)","<p>@return [Hash]\n"],["create_request","Faraday::Adapter::EMHttp","Faraday/Adapter/EMHttp.html#method-i-create_request","(env)",""],["error_message","Faraday::Adapter::EMHttp","Faraday/Adapter/EMHttp.html#method-i-error_message","(client)",""],["host","EmHttpSslPatch","EmHttpSslPatch.html#method-i-host","()",""],["new","Faraday::Adapter::EMHttp::Manager","Faraday/Adapter/EMHttp/Manager.html#method-c-new","()","<p>@see reset\n"],["parallel?","Faraday::Adapter::EMHttp","Faraday/Adapter/EMHttp.html#method-i-parallel-3F","(env)","<p>@return [Boolean]\n"],["perform_request","Faraday::Adapter::EMHttp","Faraday/Adapter/EMHttp.html#method-i-perform_request","(env)",""],["perform_request","Faraday::Adapter::EMHttp::Manager","Faraday/Adapter/EMHttp/Manager.html#method-i-perform_request","()",""],["perform_single_request","Faraday::Adapter::EMHttp","Faraday/Adapter/EMHttp.html#method-i-perform_single_request","(env)","<p>TODO: reuse the connection to support pipelining\n"],["raise_error","Faraday::Adapter::EMHttp","Faraday/Adapter/EMHttp.html#method-i-raise_error","(msg)",""],["read_body","Faraday::Adapter::EMHttp::Options","Faraday/Adapter/EMHttp/Options.html#method-i-read_body","(env)",""],["request_config","Faraday::Adapter::EMHttp::Options","Faraday/Adapter/EMHttp/Options.html#method-i-request_config","(env)",""],["request_options","Faraday::Adapter::EMHttp::Options","Faraday/Adapter/EMHttp/Options.html#method-i-request_options","(env)",""],["reset","Faraday::Adapter::EMHttp::Manager","Faraday/Adapter/EMHttp/Manager.html#method-i-reset","()","<p>Re-initializes instance variables\n"],["run","Faraday::Adapter::EMHttp::Manager","Faraday/Adapter/EMHttp/Manager.html#method-i-run","()",""],["running?","Faraday::Adapter::EMHttp::Manager","Faraday/Adapter/EMHttp/Manager.html#method-i-running-3F","()","<p>@return [Boolean]\n"],["setup_parallel_manager","Faraday::Adapter::EMHttp","Faraday/Adapter/EMHttp.html#method-c-setup_parallel_manager","(_options = nil)","<p>@return [Manager]\n"],["ssl_handshake_completed","EmHttpSslPatch","EmHttpSslPatch.html#method-i-ssl_handshake_completed","()",""],["ssl_verify_peer","EmHttpSslPatch","EmHttpSslPatch.html#method-i-ssl_verify_peer","(cert_string)",""],["timeout_message?","Faraday::Adapter::EMHttp","Faraday/Adapter/EMHttp.html#method-i-timeout_message-3F","(msg)",""],["verified_cert_identity?","EmHttpSslPatch","EmHttpSslPatch.html#method-i-verified_cert_identity-3F","()",""],["verify_peer?","EmHttpSslPatch","EmHttpSslPatch.html#method-i-verify_peer-3F","()",""]]}}