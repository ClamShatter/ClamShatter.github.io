var search_data = {"index":{"searchIndex":["activesupport","actionableerror","classmethods","nonactionable","arrayinquirer","autoload","backtracecleaner","benchmarkable","bigdecimalwithdefaultformat","cache","connectionpoollike","entry","filestore","memcachestore","localcachewithraw","memorystore","dupcoder","nullcoder","nullstore","rediscachestore","localcachewithraw","store","strategy","localcache","localcacheregistry","localstore","middleware","cachingkeygenerator","callbacks","calltemplate","callback","callbackchain","callbacksequence","classmethods","conditionals","value","filters","after","before","comparewithrange","concern","multipleincludedblocks","multipleprependblocks","concurrency","loadinterlockawaremonitor","sharelock","configurable","classmethods","configuration","configurationfile","formaterror","currentattributes","testhelper","dependencies","blamable","classcache","interlock","loadable","moduleconstmissing","watchstack","zeitwerkintegration","decorations","inflector","requiredependency","deprecation","behavior","deprecatedconstantaccessor","deprecatedconstantproxy","deprecatedinstancevariableproxy","deprecatedobjectproxy","deprecationproxy","disallowed","instancedelegator","classmethods","overridedelegators","methodwrapper","reporting","deprecationexception","descendantstracker","descendantsarray","digest","duration","iso8601parser","parsingerror","iso8601serializer","scalar","eachtimewithzone","encryptedconfiguration","encryptedfile","invalidkeylengtherror","missingcontenterror","missingkeyerror","environmentinquirer","eventedfileupdatechecker","core","executionwrapper","executor","fileupdatechecker","forktracker","coreext","coreextprivate","gzip","stream","hashwithindifferentaccess","hashwithindifferentaccess","includetimewithzone","inflector","inflections","uncountables","inheritableoptions","json","encoding","jsongemencoder","escapedstring","keygenerator","lazyloadhooks","logsubscriber","testhelper","mocklogger","logger","simpleformatter","loggersilence","loggerthreadsafelevel","marshalwithautoloading","messageencryptor","invalidmessage","nullserializer","nullverifier","messageverifier","invalidsignature","messages","metadata","rotationconfiguration","rotator","encryptor","verifier","multibyte","chars","unicode","notifications","event","fanout","subscribers","allmessages","eventobject","evented","matcher","monotonictimed","timed","instrumentationregistry","instrumenter","numberhelper","numberconverter","numbertocurrencyconverter","numbertodelimitedconverter","numbertohumanconverter","numbertohumansizeconverter","numbertopercentageconverter","numbertophoneconverter","numbertoroundedconverter","roundinghelper","numericwithformat","optionmerger","orderedhash","orderedoptions","parameterfilter","compiledfilter","perthreadregistry","proxyobject","railtie","rangewithformat","reloader","rescuable","classmethods","safebuffer","safeconcaterror","securecomparerotator","securityutils","stringinquirer","subscriber","subscriberqueueregistry","taggedlogging","formatter","localtagstorage","testcase","testing","assertions","constantlookup","classmethods","declarative","deprecation","filefixtures","isolation","forking","subprocess","methodcallassertions","parallelization","server","worker","setupandteardown","classmethods","simplestubs","stream","taggedlogging","timehelpers","timewithzone","timezone","tojsonwithactivesupportencoder","tryable","version","xmlconverter","disallowedtype","xmlmini","filelike","xmlmini_jdom","xmlmini_libxml","xmlmini_libxmlsax","hashbuilder","xmlmini_nokogiri","conversions","document","node","xmlmini_nokogirisax","hashbuilder","xmlmini_rexml","array","benchmark","bigdecimal","class","date","dateandtime","calculations","compatibility","zones","datetime","delegator","digest","uuid","erb","util","enumerable","exception","falseclass","file","float","hash","io","ipaddr","integer","kernel","libxml","conversions","document","node","loaderror","method","module","concerning","delegationerror","nameerror","nilclass","numeric","object","pathname","process","status","range","regexp","securerandom","string","struct","symbol","time","trueclass","uri","generic","unboundmethod","%()","%()","*()","*()","+()","+()","+()","-()","-()","-()","/()","<<()","<<()","<<()","<<()","<=>()","<=>()","<=>()","<=>()","<=>()","<=>()","==()","===()","===()","=~()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]=()","[]=()","[]=()","[]=()","_dasherize()","_decrypt()","_deep_transform_keys_in_object()","_deep_transform_keys_in_object!()","_deep_transform_values_in_object()","_deep_transform_values_in_object!()","_encrypt()","_extract_callstack()","_get()","_parse_binary()","_parse_file()","accumulate_descendants()","acronym()","action()","active_workers?()","acts_like?()","acts_like_date?()","acts_like_date?()","acts_like_string?()","acts_like_time?()","acts_like_time?()","acts_like_time?()","add()","add_event_subscriber()","add_filter()","add_gem_filter()","add_gem_silencer()","add_setup_exception()","add_silencer()","add_stdlib_silencer()","advance()","advance()","advance()","advance()","aead_mode?()","after()","after?()","after_class_unload()","after_fork()","after_reset()","after_teardown()","ago()","ago()","ago()","ago()","ago()","alias_attribute()","all()","all_day()","all_month()","all_quarter()","all_week()","all_year()","allocations()","allow()","anonymous?()","any?()","apply_inflections()","arity_coerce()","as_json()","as_json()","assert_changes()","assert_difference()","assert_no_changes()","assert_no_difference()","assert_not()","assert_nothing_raised()","assert_valid_keys()","assign_attributes()","assoc()","assoc()","at()","at()","at()","at_beginning_of_day()","at_beginning_of_day()","at_beginning_of_day()","at_beginning_of_hour()","at_beginning_of_hour()","at_beginning_of_minute()","at_beginning_of_minute()","at_beginning_of_month()","at_beginning_of_quarter()","at_beginning_of_week()","at_beginning_of_year()","at_end_of_day()","at_end_of_day()","at_end_of_day()","at_end_of_hour()","at_end_of_hour()","at_end_of_minute()","at_end_of_minute()","at_end_of_month()","at_end_of_quarter()","at_end_of_week()","at_end_of_year()","at_midday()","at_midday()","at_midday()","at_middle_of_day()","at_middle_of_day()","at_middle_of_day()","at_midnight()","at_midnight()","at_midnight()","at_noon()","at_noon()","at_noon()","at_with_coercion()","at_without_coercion()","atomic_write()","attach_to()","attr_internal()","attr_internal_accessor()","attr_internal_define()","attr_internal_ivar_name()","attr_internal_reader()","attr_internal_writer()","attribute()","autoload()","autoload_at()","autoload_under()","autoloads()","backend()","backend=()","base36()","base58()","before()","before?()","before_class_unload()","before_reset()","beginning_of_day()","beginning_of_day()","beginning_of_day()","beginning_of_hour()","beginning_of_hour()","beginning_of_minute()","beginning_of_minute()","beginning_of_month()","beginning_of_quarter()","beginning_of_week()","beginning_of_week()","beginning_of_week=()","beginning_of_year()","behavior()","behavior=()","benchmark()","between?()","blank?()","blank?()","blank?()","blank?()","blank?()","blank?()","build()","build()","build()","build_event()","build_redis_client()","build_redis_distributed_client()","build_rotation()","build_rotation()","build_rotation()","busy_for_exclusive?()","busy_for_sharing?()","bypass_local_cache()","byte()","bytes()","cached_size()","calculate_total_seconds()","call()","call()","camelcase()","camelize()","camelize()","cast_backend_name_to_module()","cattr_accessor()","cattr_reader()","cattr_writer()","cdata_block()","ceil()","change()","change()","change()","change()","change()","characters()","chars()","check_key_length()","civil_from_format()","class()","class_attribute()","class_eval()","class_methods()","classify()","classify()","clean()","cleanup()","cleanup()","cleanup()","cleanup()","cleanup()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear!()","clone_empty()","close()","color()","compact()","compact()","compact_blank()","compact_blank!()","comparable_time()","compare_with_coercion()","compare_with_coercion()","compare_without_coercion()","compare_without_coercion()","compile_ext()","compile_glob()","compile_methods!()","compile_methods!()","compiled_filter()","complete!()","compose()","compose()","compress()","compute_attributes()","concat()","concern()","concern()","concerning()","conditional()","config()","config()","config()","config_accessor()","configure()","const_missing()","const_missing()","const_regexp()","constantize()","constantize()","constantize_rescue_handler_class()","convert_dates_from()","convert_key()","convert_key()","convert_value()","convert_value()","copy_time_to()","country_zones()","cover?()","cpu_time()","create()","current()","current()","current()","current_hash()","current_hash()","current_instances()","current_instances_key()","current_thread_backend()","current_thread_backend=()","dasherize()","dasherize()","day()","days()","days_ago()","days_in_month()","days_in_year()","days_since()","days_span()","days_to_week_start()","decode()","decode()","decompose()","decompose()","decompress()","deconstantize()","deconstantize()","decrement()","decrement()","decrement()","decrement()","decrement()","decrement()","decrypt()","decrypt_and_verify()","decrypt_and_verify()","deep_dup()","deep_dup()","deep_dup()","deep_merge()","deep_merge!()","deep_stringify_keys()","deep_stringify_keys()","deep_stringify_keys()","deep_stringify_keys!()","deep_stringify_keys!()","deep_stringify_keys!()","deep_symbolize_keys()","deep_symbolize_keys()","deep_symbolize_keys()","deep_symbolize_keys!()","deep_transform_keys()","deep_transform_keys!()","deep_transform_values()","deep_transform_values!()","default()","default()","default_inspect()","default_inspect()","default_normalization_form()","default_normalization_form=()","define_acronym_regex_patterns()","define_callbacks()","delegate()","delegate_missing_to()","delete()","delete()","delete()","delete()","delete_empty_directories()","delete_entry()","delete_entry()","delete_entry()","delete_entry()","delete_entry()","delete_entry()","delete_entry()","delete_entry()","delete_matched()","delete_matched()","delete_matched()","delete_matched()","delete_matched()","delete_multi()","delete_multi_entries()","delete_multi_entries()","demodulize()","demodulize()","deprecate()","deprecate_constant()","deprecate_methods()","deprecated_method_warning()","deprecation_caller_message()","deprecation_disallowed?()","deprecation_message()","deprecation_warning()","descendants()","descendants()","descendants()","deserialize()","deserialize_entry()","deserialize_entry()","deserialize_entry()","detach_from()","dig()","dig()","direct_descendants()","direct_descendants()","disallowed_behavior()","disallowed_behavior=()","disallowed_warnings()","done_running()","done_unloading()","dst?()","dup()","dup()","duplicable?()","duplicable?()","duplicable?()","duration()","duration_of_variable_length?()","each()","eager_autoload()","eager_load!()","eager_load!()","eligible_waiters?()","empty?()","enable_warnings()","encode()","encode()","encode_with()","encode_with()","encrypt()","encrypt_and_sign()","encryptor()","end_document()","end_element()","end_of_day()","end_of_day()","end_of_day()","end_of_hour()","end_of_hour()","end_of_minute()","end_of_minute()","end_of_month()","end_of_quarter()","end_of_week()","end_of_year()","end_with?()","ends_with?()","ensure_cache_path()","ensure_connection_pool_added!()","eql?()","eql?()","eql?()","eql_with_coercion()","eql_without_coercion()","error()","escape()","event_stack()","exabyte()","exabytes()","except()","except()","except()","except!()","exclude?()","exclude?()","excluding()","excluding()","exclusive()","execute()","execute_hook()","execute_if_updated()","exist?()","expand_cache_key()","expanded_key()","expanded_version()","explicitly_allowed?()","extended()","extract!()","extract!()","extract_callstack()","extract_options!()","extractable_options?()","extractable_options?()","extractable_options?()","extractable_options?()","extractable_options?()","failsafe()","fetch()","fetch()","fetch()","fetch_multi()","fetch_public_methods()","fetch_public_methods()","fetch_values()","fetch_values()","fifth()","file_fixture()","file_path_key()","filter()","filter()","filter_backtrace()","filter_param()","find_attached_subscriber()","find_beginning_of_week!()","find_rescue_handler()","find_tzinfo()","find_zone()","find_zone!()","finish()","finish()","finish()","finish()","finish()","finish!()","finish_with_state()","first()","first_hour()","fixed_length_secure_compare()","fixed_length_secure_compare()","floor()","flush()","flush()","flush_all!()","foreign_key()","foreign_key()","fork()","fork()","forking_env?()","formatted_offset()","formatted_offset()","formatted_offset()","formatted_offset()","fortnight()","fortnights()","forty_two()","fourth()","freeze()","freeze_time()","from()","from()","from_now()","from_trusted_xml()","from_xml()","future?()","future?()","gem_version()","generate()","generate_digest()","generate_key()","generate_key()","generate_key()","generated_attribute_methods()","get()","get_entry_value()","get_period_and_ensure_valid_local_time()","getgm()","getgm()","getlocal()","getlocal()","getutc()","getutc()","gigabyte()","gigabytes()","gmt?()","gmt_offset()","gmtime()","gmtime()","gmtoff()","grapheme_length()","h()","h()","halted_callback_hook()","halting()","halting()","halting_and_conditional()","halting_and_conditional()","handle_exception()","handle_expired_entry()","handle_missing_key()","has_key?()","has_key?()","hash()","hash()","hook_state()","hour()","hours()","html_escape()","html_escape()","html_escape_interpolated_argument()","html_escape_once()","html_escape_once()","html_safe()","html_safe?()","html_safe?()","html_safe?()","httpdate()","human()","humanize()","humanize()","idle_time()","ignored_callstack()","in()","in()","in()","in()","in?()","in_days()","in_groups()","in_groups_of()","in_hours()","in_milliseconds()","in_minutes()","in_months()","in_seconds()","in_time_zone()","in_time_zone()","in_time_zone()","in_weeks()","in_years()","include?()","include?()","include?()","included()","included()","including()","including()","incorporate_utc_offset()","increment()","increment()","increment()","increment()","increment()","increment()","indent()","indent!()","index_by()","index_with()","inflections()","inheritable_copy()","inherited()","initialize_copy()","inquiry()","inquiry()","insert()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","instance()","instance()","instance()","instance_values()","instance_variable_names()","instrument()","instrument()","instrument()","instrumenter()","invalid_event?()","irregular()","is_a?()","is_missing?()","is_utf8?()","isdst()","iso8601()","iso8601()","iso8601()","json_escape()","json_escape()","key()","key?()","key?()","key?()","key_len()","key_matcher()","kilobyte()","kilobytes()","kind_of?()","last()","last_hour()","last_month()","last_quarter()","last_week()","last_weekday()","last_year()","limit()","listeners_for()","listening?()","load_country_zones()","load_interlock()","loading()","local()","local_cache()","local_cache_key()","local_to_utc()","localtime()","localtime()","lock_file()","log_subscribers()","logged()","logger()","logger()","logger_outputs_to?()","lookup_store()","many?()","marshal_dump()","marshal_load()","match?()","mattr_accessor()","mattr_reader()","mattr_writer()","max_mtime()","mb_chars()","megabyte()","megabytes()","member?()","member?()","merge()","merge()","merge!()","merge!()","merged_options()","method_added()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","midday()","midday()","midday()","middle_of_day()","middle_of_day()","middle_of_day()","middleware()","midnight()","midnight()","midnight()","minus_with_coercion()","minus_without_coercion()","minus_without_duration()","minute()","minutes()","missing_name()","missing_name?()","modify_value()","modify_value()","module_parent()","module_parent_name()","module_parents()","mon_enter()","monday()","monotonic_subscribe()","month()","months()","months_ago()","months_since()","ms()","multiline?()","multiple_of?()","mute()","name()","namespace_key()","nested_under_indifferent_access()","nested_under_indifferent_access()","nested_under_indifferent_access()","nested_under_indifferent_access()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_cipher()","new_constants()","next_day()","next_day?()","next_day?()","next_month()","next_occurring()","next_quarter()","next_week()","next_weekday()","next_year()","noise()","noon()","noon()","noon()","normalize_key()","normalize_key()","normalize_key()","normalize_key()","normalize_version()","now()","now()","now_allocations()","now_cpu()","nsec()","number_to_currency()","number_to_delimited()","number_to_human()","number_to_human_size()","number_to_percentage()","number_to_phone()","number_to_rounded()","offset_in_seconds()","on_cdata_block()","on_characters()","on_end_document()","on_end_element()","on_load()","on_start_document()","on_start_element()","on_weekday?()","on_weekend?()","options()","ordinal()","ordinal()","ordinalize()","ordinalize()","original_concat()","overlaps?()","parallelize()","parallelize_setup()","parallelize_teardown()","parameterize()","parameterize()","parent_of?()","parse()","parse()","parse_error()","parser()","parts_to_time()","past?()","past?()","pattern_subscribed?()","perform_job()","period()","period_for_local()","period_for_utc()","permit_concurrent_loads()","petabyte()","petabytes()","pick()","pluck()","plural()","pluralize()","pluralize()","pop()","pop_modules()","prepare_pattern()","prepend()","prepended()","prepended()","presence()","presence_in()","present?()","prev_day()","prev_day?()","prev_day?()","prev_month()","prev_occurring()","prev_quarter()","prev_week()","prev_weekday()","prev_year()","proxy_class()","proxy_class=()","prune()","pruning?()","publish()","publish()","raise()","raise_type_error()","read()","read()","read()","read_entry()","read_entry()","read_entry()","read_entry()","read_entry()","read_entry()","read_entry()","read_entry()","read_env_key()","read_key_file()","read_multi()","read_multi()","read_multi_entries()","read_multi_entries()","read_multi_entries()","read_multi_entries()","read_multi_entries()","read_multi_mget()","readable_inspect()","readable_inspect()","real_mod_name()","recode_windows1252_chars()","record()","redefine_method()","redefine_singleton_method()","redis()","register_hook()","regular_update()","regular_update()","regular_writer()","regular_writer()","reject()","reject()","reject()","release_unload_lock!()","reload!()","remove()","remove!()","remove_event_subscriber()","remove_filters!()","remove_possible_method()","remove_possible_singleton_method()","remove_silencers!()","rename_key()","replace()","replace()","replace()","require_dependency()","require_unload_lock!()","rescue_error_with()","rescue_from()","rescue_with_handler()","rescue_with_handler()","reset()","reset_callbacks()","resets()","resolve_verifier()","respond_to?()","respond_to_missing?()","respond_to_missing?()","respond_to_missing?()","respond_to_missing?()","respond_to_missing?()","respond_to_missing?()","retrieve_cache_key()","retrieve_pool_options()","retrieve_store_class()","reverse()","reverse_merge()","reverse_merge()","reverse_merge()","reverse_merge!()","reverse_merge!()","reverse_merge!()","reverse_update()","rfc2822()","rfc3339()","rfc3339()","rfc3339()","rfc822()","run()","run!()","run_callbacks()","run_cleanup()","run_in_isolation()","run_in_isolation()","run_interlock()","run_load_hooks()","running()","safe_concat()","safe_constantize()","safe_constantize()","safe_get()","safe_record()","save_block_result_to_cache()","search_dir()","sec_fraction()","second()","second()","second_to_last()","seconds()","seconds_since_midnight()","seconds_since_midnight()","seconds_since_unix_epoch()","seconds_to_utc_offset()","seconds_until_end_of_day()","seconds_until_end_of_day()","secure_compare()","secure_compare()","secure_compare!()","select()","select()","select()","serialize_entries()","serialize_entry()","serialize_entry()","set()","set_block_back_references()","set_callback()","set_defaults()","set_defaults()","set_logger()","set_process_title()","set_redis_capabilities()","setup()","sharing()","shutdown()","silence()","silence()","silence()","silence!()","silence_redefinition_of_method()","silence_warnings()","silenced()","simple()","simple_stubs()","since()","since()","since()","since()","since()","singular()","singularize()","singularize()","skip_callback()","slice()","slice()","slice!()","slice!()","slice!()","slice!()","split()","split()","squish()","squish!()","start()","start()","start()","start()","start()","start()","start!()","start_document()","start_element()","start_exclusive()","start_running()","start_sharing()","start_unloading()","start_with?()","start_worker()","starts_with?()","stats()","stop_exclusive()","stop_sharing()","stop_worker()","store()","store()","store()","store_inherited()","strftime()","stringify_keys()","stringify_keys()","stringify_keys()","stringify_keys!()","stringify_keys!()","stringify_keys!()","strip_heredoc()","strptime()","subclasses()","subclasses()","subclasses()","subscribe()","subscribe()","subscribed()","subscribers()","subsec()","sum()","sum()","sunday()","supports_cache_versioning?()","supports_cache_versioning?()","supports_cache_versioning?()","supports_cache_versioning?()","supports_cache_versioning?()","suppress()","symbolize_keys()","symbolize_keys()","symbolize_keys()","symbolize_keys!()","synchronize()","tableize()","tableize()","tagged()","target()","target()","target()","teardown()","terabyte()","terabytes()","test()","test_order()","test_order=()","third()","third_to_last()","thread_cattr_accessor()","thread_mattr_accessor()","tidy_bytes()","tidy_bytes()","time()","time_now()","time_with_zone()","titlecase()","titlecase()","titleize()","titleize()","titleize()","to()","to()","to_a()","to_complete()","to_date()","to_datetime()","to_datetime()","to_default_s()","to_default_s()","to_default_s()","to_default_s()","to_default_s()","to_f()","to_f()","to_formatted_s()","to_formatted_s()","to_formatted_s()","to_formatted_s()","to_formatted_s()","to_formatted_s()","to_hash()","to_hash()","to_i()","to_i()","to_i()","to_options()","to_options()","to_options()","to_options!()","to_options!()","to_options!()","to_param()","to_param()","to_param()","to_param()","to_param()","to_param()","to_param()","to_prepare()","to_query()","to_query()","to_query()","to_r()","to_regex()","to_run()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_sentence()","to_tag()","to_time()","to_time()","to_time()","to_time()","to_time()","to_time_preserves_timezone()","to_time_preserves_timezone=()","to_xml()","to_xml()","to_yaml_type()","today()","today?()","today?()","tomorrow()","tomorrow()","tomorrow()","tomorrow?()","tomorrow?()","transfer_time_values_to_utc_constructor()","transform_keys()","transform_keys()","transform_keys!()","transform_keys!()","transform_values()","transform_values()","transliterate()","travel()","travel_back()","travel_to()","truncate()","truncate_bytes()","truncate_key()","truncate_words()","try()","try()","try()","try!()","try!()","try!()","tv_sec()","uncountable()","uncountable?()","underscore()","underscore()","unescape()","unfreeze_time()","unique_id()","unload_interlock()","unloading()","unsubscribe()","unsubscribe()","until()","upcase_first()","upcase_first()","update()","update()","update_with_single_argument()","update_with_single_argument()","updated?()","updated_at()","us_zones()","use_temporary_local_cache()","use_zone()","usec()","utc()","utc()","utc?()","utc?()","utc_offset()","utc_offset()","utc_offset()","utc_to_local()","utc_to_local_returns_utc_offset_times()","utc_to_local_returns_utc_offset_times=()","uuid_from_hash()","uuid_v3()","uuid_v4()","uuid_v5()","valid_message?()","values_at()","values_at()","verified()","verified()","verify()","version()","wait()","wait()","wait_for()","warn()","warn()","warn()","watch_namespaces()","watched()","watching?()","week()","weeks()","weeks_ago()","weeks_since()","with()","with_backend()","with_defaults()","with_defaults()","with_defaults()","with_defaults!()","with_defaults!()","with_defaults!()","with_execution_control()","with_indifferent_access()","with_indifferent_access()","with_indifferent_access()","with_local_cache()","with_options()","with_warnings()","without()","without()","without()","without()","work_from_queue()","wrap()","wrap()","wrap()","wrap_with_time_zone()","write()","write()","write()","write_cache_value()","write_entry()","write_entry()","write_entry()","write_entry()","write_entry()","write_entry()","write_entry()","write_entry()","write_key_expiry()","write_multi()","write_multi_entries()","write_multi_entries()","writing()","xmlschema()","xmlschema()","year()","years()","years_ago()","years_since()","yesterday()","yesterday()","yesterday()","yesterday?()","yesterday?()","yield_shares()","zone()","zone()","zone=()","zones_map()"],"longSearchIndex":["activesupport","activesupport::actionableerror","activesupport::actionableerror::classmethods","activesupport::actionableerror::nonactionable","activesupport::arrayinquirer","activesupport::autoload","activesupport::backtracecleaner","activesupport::benchmarkable","activesupport::bigdecimalwithdefaultformat","activesupport::cache","activesupport::cache::connectionpoollike","activesupport::cache::entry","activesupport::cache::filestore","activesupport::cache::memcachestore","activesupport::cache::memcachestore::localcachewithraw","activesupport::cache::memorystore","activesupport::cache::memorystore::dupcoder","activesupport::cache::nullcoder","activesupport::cache::nullstore","activesupport::cache::rediscachestore","activesupport::cache::rediscachestore::localcachewithraw","activesupport::cache::store","activesupport::cache::strategy","activesupport::cache::strategy::localcache","activesupport::cache::strategy::localcache::localcacheregistry","activesupport::cache::strategy::localcache::localstore","activesupport::cache::strategy::localcache::middleware","activesupport::cachingkeygenerator","activesupport::callbacks","activesupport::callbacks::calltemplate","activesupport::callbacks::callback","activesupport::callbacks::callbackchain","activesupport::callbacks::callbacksequence","activesupport::callbacks::classmethods","activesupport::callbacks::conditionals","activesupport::callbacks::conditionals::value","activesupport::callbacks::filters","activesupport::callbacks::filters::after","activesupport::callbacks::filters::before","activesupport::comparewithrange","activesupport::concern","activesupport::concern::multipleincludedblocks","activesupport::concern::multipleprependblocks","activesupport::concurrency","activesupport::concurrency::loadinterlockawaremonitor","activesupport::concurrency::sharelock","activesupport::configurable","activesupport::configurable::classmethods","activesupport::configurable::configuration","activesupport::configurationfile","activesupport::configurationfile::formaterror","activesupport::currentattributes","activesupport::currentattributes::testhelper","activesupport::dependencies","activesupport::dependencies::blamable","activesupport::dependencies::classcache","activesupport::dependencies::interlock","activesupport::dependencies::loadable","activesupport::dependencies::moduleconstmissing","activesupport::dependencies::watchstack","activesupport::dependencies::zeitwerkintegration","activesupport::dependencies::zeitwerkintegration::decorations","activesupport::dependencies::zeitwerkintegration::inflector","activesupport::dependencies::zeitwerkintegration::requiredependency","activesupport::deprecation","activesupport::deprecation::behavior","activesupport::deprecation::deprecatedconstantaccessor","activesupport::deprecation::deprecatedconstantproxy","activesupport::deprecation::deprecatedinstancevariableproxy","activesupport::deprecation::deprecatedobjectproxy","activesupport::deprecation::deprecationproxy","activesupport::deprecation::disallowed","activesupport::deprecation::instancedelegator","activesupport::deprecation::instancedelegator::classmethods","activesupport::deprecation::instancedelegator::overridedelegators","activesupport::deprecation::methodwrapper","activesupport::deprecation::reporting","activesupport::deprecationexception","activesupport::descendantstracker","activesupport::descendantstracker::descendantsarray","activesupport::digest","activesupport::duration","activesupport::duration::iso8601parser","activesupport::duration::iso8601parser::parsingerror","activesupport::duration::iso8601serializer","activesupport::duration::scalar","activesupport::eachtimewithzone","activesupport::encryptedconfiguration","activesupport::encryptedfile","activesupport::encryptedfile::invalidkeylengtherror","activesupport::encryptedfile::missingcontenterror","activesupport::encryptedfile::missingkeyerror","activesupport::environmentinquirer","activesupport::eventedfileupdatechecker","activesupport::eventedfileupdatechecker::core","activesupport::executionwrapper","activesupport::executor","activesupport::fileupdatechecker","activesupport::forktracker","activesupport::forktracker::coreext","activesupport::forktracker::coreextprivate","activesupport::gzip","activesupport::gzip::stream","activesupport::hashwithindifferentaccess","activesupport::hashwithindifferentaccess","activesupport::includetimewithzone","activesupport::inflector","activesupport::inflector::inflections","activesupport::inflector::inflections::uncountables","activesupport::inheritableoptions","activesupport::json","activesupport::json::encoding","activesupport::json::encoding::jsongemencoder","activesupport::json::encoding::jsongemencoder::escapedstring","activesupport::keygenerator","activesupport::lazyloadhooks","activesupport::logsubscriber","activesupport::logsubscriber::testhelper","activesupport::logsubscriber::testhelper::mocklogger","activesupport::logger","activesupport::logger::simpleformatter","activesupport::loggersilence","activesupport::loggerthreadsafelevel","activesupport::marshalwithautoloading","activesupport::messageencryptor","activesupport::messageencryptor::invalidmessage","activesupport::messageencryptor::nullserializer","activesupport::messageencryptor::nullverifier","activesupport::messageverifier","activesupport::messageverifier::invalidsignature","activesupport::messages","activesupport::messages::metadata","activesupport::messages::rotationconfiguration","activesupport::messages::rotator","activesupport::messages::rotator::encryptor","activesupport::messages::rotator::verifier","activesupport::multibyte","activesupport::multibyte::chars","activesupport::multibyte::unicode","activesupport::notifications","activesupport::notifications::event","activesupport::notifications::fanout","activesupport::notifications::fanout::subscribers","activesupport::notifications::fanout::subscribers::allmessages","activesupport::notifications::fanout::subscribers::eventobject","activesupport::notifications::fanout::subscribers::evented","activesupport::notifications::fanout::subscribers::matcher","activesupport::notifications::fanout::subscribers::monotonictimed","activesupport::notifications::fanout::subscribers::timed","activesupport::notifications::instrumentationregistry","activesupport::notifications::instrumenter","activesupport::numberhelper","activesupport::numberhelper::numberconverter","activesupport::numberhelper::numbertocurrencyconverter","activesupport::numberhelper::numbertodelimitedconverter","activesupport::numberhelper::numbertohumanconverter","activesupport::numberhelper::numbertohumansizeconverter","activesupport::numberhelper::numbertopercentageconverter","activesupport::numberhelper::numbertophoneconverter","activesupport::numberhelper::numbertoroundedconverter","activesupport::numberhelper::roundinghelper","activesupport::numericwithformat","activesupport::optionmerger","activesupport::orderedhash","activesupport::orderedoptions","activesupport::parameterfilter","activesupport::parameterfilter::compiledfilter","activesupport::perthreadregistry","activesupport::proxyobject","activesupport::railtie","activesupport::rangewithformat","activesupport::reloader","activesupport::rescuable","activesupport::rescuable::classmethods","activesupport::safebuffer","activesupport::safebuffer::safeconcaterror","activesupport::securecomparerotator","activesupport::securityutils","activesupport::stringinquirer","activesupport::subscriber","activesupport::subscriberqueueregistry","activesupport::taggedlogging","activesupport::taggedlogging::formatter","activesupport::taggedlogging::localtagstorage","activesupport::testcase","activesupport::testing","activesupport::testing::assertions","activesupport::testing::constantlookup","activesupport::testing::constantlookup::classmethods","activesupport::testing::declarative","activesupport::testing::deprecation","activesupport::testing::filefixtures","activesupport::testing::isolation","activesupport::testing::isolation::forking","activesupport::testing::isolation::subprocess","activesupport::testing::methodcallassertions","activesupport::testing::parallelization","activesupport::testing::parallelization::server","activesupport::testing::parallelization::worker","activesupport::testing::setupandteardown","activesupport::testing::setupandteardown::classmethods","activesupport::testing::simplestubs","activesupport::testing::stream","activesupport::testing::taggedlogging","activesupport::testing::timehelpers","activesupport::timewithzone","activesupport::timezone","activesupport::tojsonwithactivesupportencoder","activesupport::tryable","activesupport::version","activesupport::xmlconverter","activesupport::xmlconverter::disallowedtype","activesupport::xmlmini","activesupport::xmlmini::filelike","activesupport::xmlmini_jdom","activesupport::xmlmini_libxml","activesupport::xmlmini_libxmlsax","activesupport::xmlmini_libxmlsax::hashbuilder","activesupport::xmlmini_nokogiri","activesupport::xmlmini_nokogiri::conversions","activesupport::xmlmini_nokogiri::conversions::document","activesupport::xmlmini_nokogiri::conversions::node","activesupport::xmlmini_nokogirisax","activesupport::xmlmini_nokogirisax::hashbuilder","activesupport::xmlmini_rexml","array","benchmark","bigdecimal","class","date","dateandtime","dateandtime::calculations","dateandtime::compatibility","dateandtime::zones","datetime","delegator","digest","digest::uuid","erb","erb::util","enumerable","exception","falseclass","file","float","hash","io","ipaddr","integer","kernel","libxml","libxml::conversions","libxml::conversions::document","libxml::conversions::node","loaderror","method","module","module::concerning","module::delegationerror","nameerror","nilclass","numeric","object","pathname","process","process::status","range","regexp","securerandom","string","struct","symbol","time","trueclass","uri","uri::generic","unboundmethod","activesupport::duration#%()","activesupport::safebuffer#%()","activesupport::duration#*()","activesupport::safebuffer#*()","activesupport::duration#+()","activesupport::safebuffer#+()","activesupport::timewithzone#+()","activesupport::duration#-()","activesupport::timewithzone#-()","time#-()","activesupport::duration#/()","activesupport::inflector::inflections::uncountables#<<()","activesupport::notifications::event#<<()","activesupport::safebuffer#<<()","activesupport::testing::parallelization::server#<<()","activesupport::duration#<=>()","activesupport::timewithzone#<=>()","activesupport::timezone#<=>()","date#<=>()","datetime#<=>()","time#<=>()","activesupport::duration#==()","activesupport::comparewithrange#===()","time::===()","activesupport::timezone#=~()","activesupport::dependencies::classcache#[]()","activesupport::hashwithindifferentaccess#[]()","activesupport::hashwithindifferentaccess#[]()","activesupport::hashwithindifferentaccess::[]()","activesupport::hashwithindifferentaccess::[]()","activesupport::orderedoptions#[]()","activesupport::safebuffer#[]()","activesupport::timezone::[]()","activesupport::hashwithindifferentaccess#[]=()","activesupport::hashwithindifferentaccess#[]=()","activesupport::orderedoptions#[]=()","activesupport::safebuffer#[]=()","activesupport::xmlmini#_dasherize()","activesupport::messageencryptor#_decrypt()","hash#_deep_transform_keys_in_object()","hash#_deep_transform_keys_in_object!()","hash#_deep_transform_values_in_object()","hash#_deep_transform_values_in_object!()","activesupport::messageencryptor#_encrypt()","activesupport::deprecation::reporting#_extract_callstack()","activesupport::orderedoptions#_get()","activesupport::xmlmini#_parse_binary()","activesupport::xmlmini#_parse_file()","activesupport::descendantstracker::accumulate_descendants()","activesupport::inflector::inflections#acronym()","activesupport::actionableerror::classmethods#action()","activesupport::testing::parallelization::server#active_workers?()","object#acts_like?()","date#acts_like_date?()","datetime#acts_like_date?()","string#acts_like_string?()","activesupport::timewithzone#acts_like_time?()","datetime#acts_like_time?()","time#acts_like_time?()","activesupport::inflector::inflections::uncountables#add()","activesupport::subscriber::add_event_subscriber()","activesupport::backtracecleaner#add_filter()","activesupport::backtracecleaner#add_gem_filter()","activesupport::backtracecleaner#add_gem_silencer()","activesupport::testing::parallelization::worker#add_setup_exception()","activesupport::backtracecleaner#add_silencer()","activesupport::backtracecleaner#add_stdlib_silencer()","activesupport::timewithzone#advance()","date#advance()","datetime#advance()","time#advance()","activesupport::messageencryptor#aead_mode?()","activesupport::duration#after()","dateandtime::calculations#after?()","activesupport::reloader::after_class_unload()","activesupport::testing::parallelization::worker#after_fork()","activesupport::currentattributes::after_reset()","activesupport::testing::timehelpers#after_teardown()","activesupport::duration#ago()","activesupport::timewithzone#ago()","date#ago()","datetime#ago()","time#ago()","module#alias_attribute()","activesupport::timezone::all()","dateandtime::calculations#all_day()","dateandtime::calculations#all_month()","dateandtime::calculations#all_quarter()","dateandtime::calculations#all_week()","dateandtime::calculations#all_year()","activesupport::notifications::event#allocations()","activesupport::deprecation::reporting#allow()","module#anonymous?()","activesupport::arrayinquirer#any?()","activesupport::inflector#apply_inflections()","activesupport::deprecation::behavior#arity_coerce()","activesupport::timewithzone#as_json()","exception#as_json()","activesupport::testing::assertions#assert_changes()","activesupport::testing::assertions#assert_difference()","activesupport::testing::assertions#assert_no_changes()","activesupport::testing::assertions#assert_no_difference()","activesupport::testing::assertions#assert_not()","activesupport::testing::assertions#assert_nothing_raised()","hash#assert_valid_keys()","activesupport::currentattributes#assign_attributes()","activesupport::hashwithindifferentaccess#assoc()","activesupport::hashwithindifferentaccess#assoc()","activesupport::timezone#at()","string#at()","time::at()","date#at_beginning_of_day()","datetime#at_beginning_of_day()","time#at_beginning_of_day()","datetime#at_beginning_of_hour()","time#at_beginning_of_hour()","datetime#at_beginning_of_minute()","time#at_beginning_of_minute()","dateandtime::calculations#at_beginning_of_month()","dateandtime::calculations#at_beginning_of_quarter()","dateandtime::calculations#at_beginning_of_week()","dateandtime::calculations#at_beginning_of_year()","date#at_end_of_day()","datetime#at_end_of_day()","time#at_end_of_day()","datetime#at_end_of_hour()","time#at_end_of_hour()","datetime#at_end_of_minute()","time#at_end_of_minute()","dateandtime::calculations#at_end_of_month()","dateandtime::calculations#at_end_of_quarter()","dateandtime::calculations#at_end_of_week()","dateandtime::calculations#at_end_of_year()","date#at_midday()","datetime#at_midday()","time#at_midday()","date#at_middle_of_day()","datetime#at_middle_of_day()","time#at_middle_of_day()","date#at_midnight()","datetime#at_midnight()","time#at_midnight()","date#at_noon()","datetime#at_noon()","time#at_noon()","time::at_with_coercion()","time::at_without_coercion()","file::atomic_write()","activesupport::subscriber::attach_to()","module#attr_internal()","module#attr_internal_accessor()","module#attr_internal_define()","module#attr_internal_ivar_name()","module#attr_internal_reader()","module#attr_internal_writer()","activesupport::currentattributes::attribute()","activesupport::autoload#autoload()","activesupport::autoload#autoload_at()","activesupport::autoload#autoload_under()","activesupport::autoload#autoloads()","activesupport::xmlmini#backend()","activesupport::xmlmini#backend=()","securerandom::base36()","securerandom::base58()","activesupport::duration#before()","dateandtime::calculations#before?()","activesupport::reloader::before_class_unload()","activesupport::currentattributes::before_reset()","date#beginning_of_day()","datetime#beginning_of_day()","time#beginning_of_day()","datetime#beginning_of_hour()","time#beginning_of_hour()","datetime#beginning_of_minute()","time#beginning_of_minute()","dateandtime::calculations#beginning_of_month()","dateandtime::calculations#beginning_of_quarter()","date::beginning_of_week()","dateandtime::calculations#beginning_of_week()","date::beginning_of_week=()","dateandtime::calculations#beginning_of_year()","activesupport::deprecation::behavior#behavior()","activesupport::deprecation::behavior#behavior=()","activesupport::benchmarkable#benchmark()","activesupport::timewithzone#between?()","activesupport::timewithzone#blank?()","falseclass#blank?()","nilclass#blank?()","object#blank?()","string#blank?()","trueclass#blank?()","activesupport::callbacks::filters::after::build()","activesupport::callbacks::filters::before::build()","activesupport::duration::build()","activesupport::notifications::fanout::subscribers::eventobject#build_event()","activesupport::cache::rediscachestore::build_redis_client()","activesupport::cache::rediscachestore::build_redis_distributed_client()","activesupport::messages::rotator::encryptor#build_rotation()","activesupport::messages::rotator::verifier#build_rotation()","activesupport::securecomparerotator#build_rotation()","activesupport::concurrency::sharelock#busy_for_exclusive?()","activesupport::concurrency::sharelock#busy_for_sharing?()","activesupport::cache::strategy::localcache#bypass_local_cache()","numeric#byte()","numeric#bytes()","activesupport::cache::memorystore#cached_size()","activesupport::duration::calculate_total_seconds()","activesupport::callbacks::conditionals::value#call()","activesupport::logger::simpleformatter#call()","string#camelcase()","activesupport::inflector#camelize()","string#camelize()","activesupport::xmlmini#cast_backend_name_to_module()","module#cattr_accessor()","module#cattr_reader()","module#cattr_writer()","activesupport::xmlmini_nokogirisax::hashbuilder#cdata_block()","time#ceil()","activesupport::encryptedfile#change()","activesupport::timewithzone#change()","date#change()","datetime#change()","time#change()","activesupport::xmlmini_nokogirisax::hashbuilder#characters()","activesupport::multibyte::chars#chars()","activesupport::encryptedfile#check_key_length()","datetime::civil_from_format()","activesupport::deprecation::deprecatedconstantproxy#class()","class#class_attribute()","kernel#class_eval()","activesupport::concern#class_methods()","activesupport::inflector#classify()","string#classify()","activesupport::backtracecleaner#clean()","activesupport::cache::filestore#cleanup()","activesupport::cache::memorystore#cleanup()","activesupport::cache::nullstore#cleanup()","activesupport::cache::rediscachestore#cleanup()","activesupport::cache::store#cleanup()","activesupport::cache::filestore#clear()","activesupport::cache::memcachestore#clear()","activesupport::cache::memorystore#clear()","activesupport::cache::nullstore#clear()","activesupport::cache::rediscachestore#clear()","activesupport::cache::store#clear()","activesupport::cache::strategy::localcache::localstore#clear()","activesupport::descendantstracker::clear()","activesupport::inflector::inflections#clear()","activesupport::dependencies::classcache#clear!()","activesupport::safebuffer#clone_empty()","activesupport::gzip::stream#close()","activesupport::logsubscriber#color()","activesupport::hashwithindifferentaccess#compact()","activesupport::hashwithindifferentaccess#compact()","enumerable#compact_blank()","hash#compact_blank!()","activesupport::timewithzone#comparable_time()","date#compare_with_coercion()","time#compare_with_coercion()","date#compare_without_coercion()","time#compare_without_coercion()","activesupport::fileupdatechecker#compile_ext()","activesupport::fileupdatechecker#compile_glob()","activesupport::configurable::configuration#compile_methods!()","activesupport::configurable::configuration::compile_methods!()","activesupport::parameterfilter#compiled_filter()","activesupport::executionwrapper#complete!()","activesupport::multibyte::chars#compose()","activesupport::multibyte::unicode#compose()","activesupport::gzip::compress()","activesupport::currentattributes#compute_attributes()","activesupport::safebuffer#concat()","kernel#concern()","module::concerning#concern()","module::concerning#concerning()","activesupport::callbacks::filters::after::conditional()","activesupport::configurable#config()","activesupport::configurable::classmethods#config()","activesupport::encryptedconfiguration#config()","activesupport::configurable::classmethods#config_accessor()","activesupport::configurable::classmethods#configure()","activesupport::deprecation::deprecatedconstantaccessor#const_missing()","activesupport::deprecation::deprecatedconstantproxy#const_missing()","activesupport::inflector#const_regexp()","activesupport::inflector#constantize()","string#constantize()","activesupport::rescuable::classmethods#constantize_rescue_handler_class()","activesupport::json::convert_dates_from()","activesupport::hashwithindifferentaccess#convert_key()","activesupport::hashwithindifferentaccess#convert_key()","activesupport::hashwithindifferentaccess#convert_value()","activesupport::hashwithindifferentaccess#convert_value()","dateandtime::calculations#copy_time_to()","activesupport::timezone::country_zones()","activesupport::comparewithrange#cover?()","activesupport::notifications::event#cpu_time()","activesupport::timezone::create()","date::current()","datetime::current()","time::current()","activesupport::xmlmini_libxmlsax::hashbuilder#current_hash()","activesupport::xmlmini_nokogirisax::hashbuilder#current_hash()","activesupport::currentattributes::current_instances()","activesupport::currentattributes::current_instances_key()","activesupport::xmlmini#current_thread_backend()","activesupport::xmlmini#current_thread_backend=()","activesupport::inflector#dasherize()","string#dasherize()","numeric#day()","numeric#days()","dateandtime::calculations#days_ago()","time::days_in_month()","time::days_in_year()","dateandtime::calculations#days_since()","dateandtime::calculations#days_span()","dateandtime::calculations#days_to_week_start()","activesupport::json::decode()","activesupport::messageverifier#decode()","activesupport::multibyte::chars#decompose()","activesupport::multibyte::unicode#decompose()","activesupport::gzip::decompress()","activesupport::inflector#deconstantize()","string#deconstantize()","activesupport::cache::filestore#decrement()","activesupport::cache::memcachestore#decrement()","activesupport::cache::memorystore#decrement()","activesupport::cache::nullstore#decrement()","activesupport::cache::rediscachestore#decrement()","activesupport::cache::store#decrement()","activesupport::encryptedfile#decrypt()","activesupport::messageencryptor#decrypt_and_verify()","activesupport::messages::rotator::encryptor#decrypt_and_verify()","array#deep_dup()","hash#deep_dup()","object#deep_dup()","hash#deep_merge()","hash#deep_merge!()","activesupport::hashwithindifferentaccess#deep_stringify_keys()","activesupport::hashwithindifferentaccess#deep_stringify_keys()","hash#deep_stringify_keys()","activesupport::hashwithindifferentaccess#deep_stringify_keys!()","activesupport::hashwithindifferentaccess#deep_stringify_keys!()","hash#deep_stringify_keys!()","activesupport::hashwithindifferentaccess#deep_symbolize_keys()","activesupport::hashwithindifferentaccess#deep_symbolize_keys()","hash#deep_symbolize_keys()","hash#deep_symbolize_keys!()","hash#deep_transform_keys()","hash#deep_transform_keys!()","hash#deep_transform_values()","hash#deep_transform_values!()","activesupport::hashwithindifferentaccess#default()","activesupport::hashwithindifferentaccess#default()","date#default_inspect()","datetime#default_inspect()","activesupport::multibyte::unicode#default_normalization_form()","activesupport::multibyte::unicode#default_normalization_form=()","activesupport::inflector::inflections#define_acronym_regex_patterns()","activesupport::callbacks::classmethods#define_callbacks()","module#delegate()","module#delegate_missing_to()","activesupport::cache::store#delete()","activesupport::hashwithindifferentaccess#delete()","activesupport::hashwithindifferentaccess#delete()","activesupport::inflector::inflections::uncountables#delete()","activesupport::cache::filestore#delete_empty_directories()","activesupport::cache::filestore#delete_entry()","activesupport::cache::memcachestore#delete_entry()","activesupport::cache::memorystore#delete_entry()","activesupport::cache::nullstore#delete_entry()","activesupport::cache::rediscachestore#delete_entry()","activesupport::cache::store#delete_entry()","activesupport::cache::strategy::localcache#delete_entry()","activesupport::cache::strategy::localcache::localstore#delete_entry()","activesupport::cache::filestore#delete_matched()","activesupport::cache::memorystore#delete_matched()","activesupport::cache::nullstore#delete_matched()","activesupport::cache::rediscachestore#delete_matched()","activesupport::cache::store#delete_matched()","activesupport::cache::store#delete_multi()","activesupport::cache::rediscachestore#delete_multi_entries()","activesupport::cache::store#delete_multi_entries()","activesupport::inflector#demodulize()","string#demodulize()","module#deprecate()","activesupport::deprecation::deprecatedconstantaccessor#deprecate_constant()","activesupport::deprecation::methodwrapper#deprecate_methods()","activesupport::deprecation::reporting#deprecated_method_warning()","activesupport::deprecation::reporting#deprecation_caller_message()","activesupport::deprecation::disallowed#deprecation_disallowed?()","activesupport::deprecation::reporting#deprecation_message()","activesupport::deprecation::reporting#deprecation_warning()","activesupport::descendantstracker#descendants()","activesupport::descendantstracker::descendants()","class#descendants()","activesupport::encryptedconfiguration#deserialize()","activesupport::cache::memcachestore#deserialize_entry()","activesupport::cache::rediscachestore#deserialize_entry()","activesupport::cache::store#deserialize_entry()","activesupport::subscriber::detach_from()","activesupport::hashwithindifferentaccess#dig()","activesupport::hashwithindifferentaccess#dig()","activesupport::descendantstracker::direct_descendants()","activesupport::descendantstracker#direct_descendants()","activesupport::deprecation::behavior#disallowed_behavior()","activesupport::deprecation::behavior#disallowed_behavior=()","activesupport::deprecation::disallowed#disallowed_warnings()","activesupport::dependencies::interlock#done_running()","activesupport::dependencies::interlock#done_unloading()","activesupport::timewithzone#dst?()","activesupport::hashwithindifferentaccess#dup()","activesupport::hashwithindifferentaccess#dup()","method#duplicable?()","object#duplicable?()","unboundmethod#duplicable?()","activesupport::notifications::event#duration()","activesupport::timewithzone#duration_of_variable_length?()","activesupport::dependencies::watchstack#each()","activesupport::autoload#eager_autoload()","activesupport::eager_load!()","activesupport::autoload#eager_load!()","activesupport::concurrency::sharelock#eligible_waiters?()","activesupport::dependencies::classcache#empty?()","kernel#enable_warnings()","activesupport::json::encode()","activesupport::messageverifier#encode()","activesupport::orderedhash#encode_with()","activesupport::safebuffer#encode_with()","activesupport::encryptedfile#encrypt()","activesupport::messageencryptor#encrypt_and_sign()","activesupport::encryptedfile#encryptor()","activesupport::xmlmini_nokogirisax::hashbuilder#end_document()","activesupport::xmlmini_nokogirisax::hashbuilder#end_element()","date#end_of_day()","datetime#end_of_day()","time#end_of_day()","datetime#end_of_hour()","time#end_of_hour()","datetime#end_of_minute()","time#end_of_minute()","dateandtime::calculations#end_of_month()","dateandtime::calculations#end_of_quarter()","dateandtime::calculations#end_of_week()","dateandtime::calculations#end_of_year()","symbol#end_with?()","symbol#ends_with?()","activesupport::cache::filestore#ensure_cache_path()","activesupport::cache::store::ensure_connection_pool_added!()","activesupport::duration#eql?()","activesupport::timewithzone#eql?()","time#eql?()","time#eql_with_coercion()","time#eql_without_coercion()","activesupport::xmlmini_nokogirisax::hashbuilder#error()","activesupport::fileupdatechecker#escape()","activesupport::subscriber#event_stack()","numeric#exabyte()","numeric#exabytes()","activesupport::hashwithindifferentaccess#except()","activesupport::hashwithindifferentaccess#except()","hash#except()","hash#except!()","enumerable#exclude?()","string#exclude?()","array#excluding()","enumerable#excluding()","activesupport::concurrency::sharelock#exclusive()","activesupport::fileupdatechecker#execute()","activesupport::lazyloadhooks#execute_hook()","activesupport::fileupdatechecker#execute_if_updated()","activesupport::cache::store#exist?()","activesupport::cache::expand_cache_key()","activesupport::cache::store#expanded_key()","activesupport::cache::store#expanded_version()","activesupport::deprecation::disallowed#explicitly_allowed?()","activesupport::perthreadregistry::extended()","array#extract!()","hash#extract!()","activesupport::deprecation::reporting#extract_callstack()","array#extract_options!()","activesupport::hashwithindifferentaccess#extractable_options?()","activesupport::hashwithindifferentaccess#extractable_options?()","activesupport::orderedhash#extractable_options?()","activesupport::orderedoptions#extractable_options?()","hash#extractable_options?()","activesupport::cache::rediscachestore#failsafe()","activesupport::cache::store#fetch()","activesupport::hashwithindifferentaccess#fetch()","activesupport::hashwithindifferentaccess#fetch()","activesupport::cache::store#fetch_multi()","activesupport::logsubscriber::fetch_public_methods()","activesupport::subscriber::fetch_public_methods()","activesupport::hashwithindifferentaccess#fetch_values()","activesupport::hashwithindifferentaccess#fetch_values()","array#fifth()","activesupport::testing::filefixtures#file_fixture()","activesupport::cache::filestore#file_path_key()","activesupport::backtracecleaner#filter()","activesupport::parameterfilter#filter()","activesupport::backtracecleaner#filter_backtrace()","activesupport::parameterfilter#filter_param()","activesupport::subscriber::find_attached_subscriber()","date::find_beginning_of_week!()","activesupport::rescuable::classmethods#find_rescue_handler()","activesupport::timezone::find_tzinfo()","time::find_zone()","time::find_zone!()","activesupport::logsubscriber#finish()","activesupport::notifications::fanout#finish()","activesupport::notifications::fanout::subscribers::eventobject#finish()","activesupport::notifications::instrumenter#finish()","activesupport::subscriber#finish()","activesupport::notifications::event#finish!()","activesupport::notifications::instrumenter#finish_with_state()","string#first()","dateandtime::calculations#first_hour()","activesupport::securityutils#fixed_length_secure_compare()","activesupport::securityutils::fixed_length_secure_compare()","time#floor()","activesupport::logsubscriber::testhelper::mocklogger#flush()","activesupport::taggedlogging#flush()","activesupport::logsubscriber::flush_all!()","activesupport::inflector#foreign_key()","string#foreign_key()","activesupport::forktracker::coreext#fork()","activesupport::forktracker::coreextprivate#fork()","activesupport::testing::isolation::forking_env?()","activesupport::timewithzone#formatted_offset()","activesupport::timezone#formatted_offset()","datetime#formatted_offset()","time#formatted_offset()","numeric#fortnight()","numeric#fortnights()","array#forty_two()","array#fourth()","activesupport::timewithzone#freeze()","activesupport::testing::timehelpers#freeze_time()","array#from()","string#from()","activesupport::duration#from_now()","hash::from_trusted_xml()","hash::from_xml()","activesupport::timewithzone#future?()","dateandtime::calculations#future?()","activesupport::gem_version()","activesupport::messageverifier#generate()","activesupport::messageverifier#generate_digest()","activesupport::cachingkeygenerator#generate_key()","activesupport::encryptedfile::generate_key()","activesupport::keygenerator#generate_key()","activesupport::currentattributes::generated_attribute_methods()","activesupport::dependencies::classcache#get()","activesupport::cache::store#get_entry_value()","activesupport::timewithzone#get_period_and_ensure_valid_local_time()","activesupport::timewithzone#getgm()","datetime#getgm()","activesupport::timewithzone#getlocal()","datetime#getlocal()","activesupport::timewithzone#getutc()","datetime#getutc()","numeric#gigabyte()","numeric#gigabytes()","activesupport::timewithzone#gmt?()","activesupport::timewithzone#gmt_offset()","activesupport::timewithzone#gmtime()","datetime#gmtime()","activesupport::timewithzone#gmtoff()","activesupport::multibyte::chars#grapheme_length()","erb::util::h()","erb::util#h()","activesupport::callbacks#halted_callback_hook()","activesupport::callbacks::filters::after::halting()","activesupport::callbacks::filters::before::halting()","activesupport::callbacks::filters::after::halting_and_conditional()","activesupport::callbacks::filters::before::halting_and_conditional()","activesupport::cache::rediscachestore#handle_exception()","activesupport::cache::store#handle_expired_entry()","activesupport::encryptedfile#handle_missing_key()","activesupport::hashwithindifferentaccess#has_key?()","activesupport::hashwithindifferentaccess#has_key?()","activesupport::duration#hash()","activesupport::timewithzone#hash()","activesupport::executionwrapper#hook_state()","numeric#hour()","numeric#hours()","erb::util#html_escape()","erb::util::html_escape()","activesupport::safebuffer#html_escape_interpolated_argument()","erb::util::html_escape_once()","erb::util#html_escape_once()","string#html_safe()","activesupport::safebuffer#html_safe?()","numeric#html_safe?()","object#html_safe?()","activesupport::timewithzone#httpdate()","activesupport::inflector::inflections#human()","activesupport::inflector#humanize()","string#humanize()","activesupport::notifications::event#idle_time()","activesupport::deprecation::reporting#ignored_callstack()","activesupport::timewithzone#in()","date#in()","datetime#in()","time#in()","object#in?()","activesupport::duration#in_days()","array#in_groups()","array#in_groups_of()","activesupport::duration#in_hours()","numeric#in_milliseconds()","activesupport::duration#in_minutes()","activesupport::duration#in_months()","activesupport::duration#in_seconds()","activesupport::timewithzone#in_time_zone()","dateandtime::zones#in_time_zone()","string#in_time_zone()","activesupport::duration#in_weeks()","activesupport::duration#in_years()","activesupport::comparewithrange#include?()","activesupport::hashwithindifferentaccess#include?()","activesupport::hashwithindifferentaccess#include?()","activesupport::concern#included()","activesupport::deprecation::deprecatedconstantaccessor::included()","array#including()","enumerable#including()","activesupport::timewithzone#incorporate_utc_offset()","activesupport::cache::filestore#increment()","activesupport::cache::memcachestore#increment()","activesupport::cache::memorystore#increment()","activesupport::cache::nullstore#increment()","activesupport::cache::rediscachestore#increment()","activesupport::cache::store#increment()","string#indent()","string#indent!()","enumerable#index_by()","enumerable#index_with()","activesupport::inflector#inflections()","activesupport::inheritableoptions#inheritable_copy()","activesupport::descendantstracker#inherited()","activesupport::safebuffer#initialize_copy()","array#inquiry()","string#inquiry()","activesupport::safebuffer#insert()","activesupport::cache::rediscachestore#inspect()","activesupport::deprecation::deprecatedconstantproxy#inspect()","activesupport::orderedoptions#inspect()","activesupport::timewithzone#inspect()","date#inspect()","datetime#inspect()","activesupport::currentattributes::instance()","activesupport::inflector::inflections::instance()","activesupport::perthreadregistry#instance()","object#instance_values()","object#instance_variable_names()","activesupport::cache::store#instrument()","activesupport::notifications::instrument()","activesupport::notifications::instrumenter#instrument()","activesupport::notifications::instrumenter()","activesupport::subscriber::invalid_event?()","activesupport::inflector::inflections#irregular()","activesupport::timewithzone#is_a?()","loaderror#is_missing?()","string#is_utf8?()","activesupport::timewithzone#isdst()","activesupport::duration#iso8601()","activesupport::timewithzone#iso8601()","activesupport::timezone#iso8601()","erb::util::json_escape()","erb::util#json_escape()","activesupport::encryptedfile#key()","activesupport::dependencies::classcache#key?()","activesupport::hashwithindifferentaccess#key?()","activesupport::hashwithindifferentaccess#key?()","activesupport::messageencryptor::key_len()","activesupport::cache::store#key_matcher()","numeric#kilobyte()","numeric#kilobytes()","activesupport::timewithzone#kind_of?()","string#last()","dateandtime::calculations#last_hour()","dateandtime::calculations#last_month()","dateandtime::calculations#last_quarter()","dateandtime::calculations#last_week()","dateandtime::calculations#last_weekday()","dateandtime::calculations#last_year()","activesupport::multibyte::chars#limit()","activesupport::notifications::fanout#listeners_for()","activesupport::notifications::fanout#listening?()","activesupport::timezone::load_country_zones()","activesupport::dependencies::load_interlock()","activesupport::dependencies::interlock#loading()","activesupport::timezone#local()","activesupport::cache::strategy::localcache#local_cache()","activesupport::cache::strategy::localcache#local_cache_key()","activesupport::timezone#local_to_utc()","activesupport::timewithzone#localtime()","datetime#localtime()","activesupport::cache::filestore#lock_file()","activesupport::logsubscriber::log_subscribers()","activesupport::logsubscriber::testhelper::mocklogger#logged()","activesupport::logsubscriber::logger()","activesupport::logsubscriber#logger()","activesupport::logger::logger_outputs_to?()","activesupport::cache::lookup_store()","enumerable#many?()","activesupport::timewithzone#marshal_dump()","activesupport::timewithzone#marshal_load()","activesupport::timezone#match?()","module#mattr_accessor()","module#mattr_reader()","module#mattr_writer()","activesupport::fileupdatechecker#max_mtime()","string#mb_chars()","numeric#megabyte()","numeric#megabytes()","activesupport::hashwithindifferentaccess#member?()","activesupport::hashwithindifferentaccess#member?()","activesupport::hashwithindifferentaccess#merge()","activesupport::hashwithindifferentaccess#merge()","activesupport::hashwithindifferentaccess#merge!()","activesupport::hashwithindifferentaccess#merge!()","activesupport::cache::store#merged_options()","activesupport::subscriber::method_added()","activesupport::arrayinquirer#method_missing()","activesupport::currentattributes::method_missing()","activesupport::deprecation::deprecatedconstantproxy#method_missing()","activesupport::duration#method_missing()","activesupport::logsubscriber::testhelper::mocklogger#method_missing()","activesupport::multibyte::chars#method_missing()","activesupport::orderedoptions#method_missing()","activesupport::perthreadregistry#method_missing()","activesupport::stringinquirer#method_missing()","activesupport::timewithzone#method_missing()","date#midday()","datetime#midday()","time#midday()","date#middle_of_day()","datetime#middle_of_day()","time#middle_of_day()","activesupport::cache::strategy::localcache#middleware()","date#midnight()","datetime#midnight()","time#midnight()","time#minus_with_coercion()","time#minus_without_coercion()","time#minus_without_duration()","numeric#minute()","numeric#minutes()","nameerror#missing_name()","nameerror#missing_name?()","activesupport::cache::filestore#modify_value()","activesupport::cache::memorystore#modify_value()","module#module_parent()","module#module_parent_name()","module#module_parents()","activesupport::concurrency::loadinterlockawaremonitor#mon_enter()","dateandtime::calculations#monday()","activesupport::notifications::monotonic_subscribe()","integer#month()","integer#months()","dateandtime::calculations#months_ago()","dateandtime::calculations#months_since()","benchmark::ms()","regexp#multiline?()","integer#multiple_of?()","activesupport::cache::store#mute()","activesupport::timewithzone::name()","activesupport::cache::store#namespace_key()","activesupport::hashwithindifferentaccess#nested_under_indifferent_access()","activesupport::hashwithindifferentaccess#nested_under_indifferent_access()","activesupport::orderedhash#nested_under_indifferent_access()","hash#nested_under_indifferent_access()","activesupport::backtracecleaner::new()","activesupport::cache::filestore::new()","activesupport::cache::memcachestore::new()","activesupport::cache::memorystore::new()","activesupport::cache::rediscachestore::new()","activesupport::cache::store::new()","activesupport::cache::strategy::localcache::localstore::new()","activesupport::cachingkeygenerator::new()","activesupport::callbacks::conditionals::value::new()","activesupport::concurrency::sharelock::new()","activesupport::currentattributes::new()","activesupport::dependencies::classcache::new()","activesupport::dependencies::watchstack::new()","activesupport::deprecation::new()","activesupport::deprecation::deprecatedconstantproxy::new()","activesupport::deprecation::deprecatedconstantproxy::new()","activesupport::deprecation::deprecatedinstancevariableproxy::new()","activesupport::deprecation::deprecatedobjectproxy::new()","activesupport::encryptedconfiguration::new()","activesupport::encryptedfile::new()","activesupport::encryptedfile::invalidkeylengtherror::new()","activesupport::encryptedfile::missingcontenterror::new()","activesupport::encryptedfile::missingkeyerror::new()","activesupport::fileupdatechecker::new()","activesupport::gzip::stream::new()","activesupport::hashwithindifferentaccess::new()","activesupport::hashwithindifferentaccess::new()","activesupport::inflector::inflections::new()","activesupport::inflector::inflections::uncountables::new()","activesupport::inheritableoptions::new()","activesupport::keygenerator::new()","activesupport::logsubscriber::testhelper::mocklogger::new()","activesupport::logger::new()","activesupport::messageencryptor::new()","activesupport::messageverifier::new()","activesupport::multibyte::chars::new()","activesupport::notifications::event::new()","activesupport::notifications::fanout::new()","activesupport::notifications::instrumenter::new()","activesupport::parameterfilter::new()","activesupport::reloader::new()","activesupport::safebuffer::new()","activesupport::safebuffer::safeconcaterror::new()","activesupport::securecomparerotator::new()","activesupport::subscriber::new()","activesupport::taggedlogging::new()","activesupport::testing::parallelization::server::new()","activesupport::testing::parallelization::worker::new()","activesupport::timewithzone::new()","activesupport::timezone::new()","activesupport::timezone::new()","activesupport::xmlconverter::disallowedtype::new()","activesupport::messageencryptor#new_cipher()","activesupport::dependencies::watchstack#new_constants()","time#next_day()","activesupport::timewithzone#next_day?()","dateandtime::calculations#next_day?()","time#next_month()","dateandtime::calculations#next_occurring()","dateandtime::calculations#next_quarter()","dateandtime::calculations#next_week()","dateandtime::calculations#next_weekday()","time#next_year()","activesupport::backtracecleaner#noise()","date#noon()","datetime#noon()","time#noon()","activesupport::cache::filestore#normalize_key()","activesupport::cache::memcachestore#normalize_key()","activesupport::cache::rediscachestore#normalize_key()","activesupport::cache::store#normalize_key()","activesupport::cache::store#normalize_version()","activesupport::notifications::event#now()","activesupport::timezone#now()","activesupport::notifications::event#now_allocations()","activesupport::notifications::event#now_cpu()","datetime#nsec()","activesupport::numberhelper#number_to_currency()","activesupport::numberhelper#number_to_delimited()","activesupport::numberhelper#number_to_human()","activesupport::numberhelper#number_to_human_size()","activesupport::numberhelper#number_to_percentage()","activesupport::numberhelper#number_to_phone()","activesupport::numberhelper#number_to_rounded()","datetime#offset_in_seconds()","activesupport::xmlmini_libxmlsax::hashbuilder#on_cdata_block()","activesupport::xmlmini_libxmlsax::hashbuilder#on_characters()","activesupport::xmlmini_libxmlsax::hashbuilder#on_end_document()","activesupport::xmlmini_libxmlsax::hashbuilder#on_end_element()","activesupport::lazyloadhooks#on_load()","activesupport::xmlmini_libxmlsax::hashbuilder#on_start_document()","activesupport::xmlmini_libxmlsax::hashbuilder#on_start_element()","dateandtime::calculations#on_weekday?()","dateandtime::calculations#on_weekend?()","activesupport::encryptedconfiguration#options()","activesupport::inflector#ordinal()","integer#ordinal()","activesupport::inflector#ordinalize()","integer#ordinalize()","activesupport::safebuffer#original_concat()","range#overlaps?()","activesupport::testcase::parallelize()","activesupport::testcase::parallelize_setup()","activesupport::testcase::parallelize_teardown()","activesupport::inflector#parameterize()","string#parameterize()","activesupport::notifications::event#parent_of?()","activesupport::duration::parse()","activesupport::timezone#parse()","activesupport::json::parse_error()","uri::parser()","activesupport::timezone#parts_to_time()","activesupport::timewithzone#past?()","dateandtime::calculations#past?()","activesupport::subscriber::pattern_subscribed?()","activesupport::testing::parallelization::worker#perform_job()","activesupport::timewithzone#period()","activesupport::timezone#period_for_local()","activesupport::timezone#period_for_utc()","activesupport::dependencies::interlock#permit_concurrent_loads()","numeric#petabyte()","numeric#petabytes()","enumerable#pick()","enumerable#pluck()","activesupport::inflector::inflections#plural()","activesupport::inflector#pluralize()","string#pluralize()","activesupport::testing::parallelization::server#pop()","activesupport::dependencies::watchstack#pop_modules()","activesupport::subscriber::prepare_pattern()","activesupport::safebuffer#prepend()","activesupport::concern#prepended()","activesupport::testing::setupandteardown::prepended()","object#presence()","object#presence_in()","object#present?()","time#prev_day()","activesupport::timewithzone#prev_day?()","dateandtime::calculations#prev_day?()","time#prev_month()","dateandtime::calculations#prev_occurring()","dateandtime::calculations#prev_quarter()","dateandtime::calculations#prev_week()","dateandtime::calculations#prev_weekday()","time#prev_year()","activesupport::multibyte::proxy_class()","activesupport::multibyte::proxy_class=()","activesupport::cache::memorystore#prune()","activesupport::cache::memorystore#pruning?()","activesupport::notifications::publish()","activesupport::notifications::fanout#publish()","activesupport::proxyobject#raise()","activesupport::duration#raise_type_error()","activesupport::cache::store#read()","activesupport::encryptedconfiguration#read()","activesupport::encryptedfile#read()","activesupport::cache::filestore#read_entry()","activesupport::cache::memcachestore#read_entry()","activesupport::cache::memorystore#read_entry()","activesupport::cache::nullstore#read_entry()","activesupport::cache::rediscachestore#read_entry()","activesupport::cache::store#read_entry()","activesupport::cache::strategy::localcache#read_entry()","activesupport::cache::strategy::localcache::localstore#read_entry()","activesupport::encryptedfile#read_env_key()","activesupport::encryptedfile#read_key_file()","activesupport::cache::rediscachestore#read_multi()","activesupport::cache::store#read_multi()","activesupport::cache::memcachestore#read_multi_entries()","activesupport::cache::rediscachestore#read_multi_entries()","activesupport::cache::store#read_multi_entries()","activesupport::cache::strategy::localcache#read_multi_entries()","activesupport::cache::strategy::localcache::localstore#read_multi_entries()","activesupport::cache::rediscachestore#read_multi_mget()","date#readable_inspect()","datetime#readable_inspect()","nameerror#real_mod_name()","activesupport::multibyte::unicode#recode_windows1252_chars()","activesupport::testing::parallelization::server#record()","module#redefine_method()","module#redefine_singleton_method()","activesupport::cache::rediscachestore#redis()","activesupport::executionwrapper::register_hook()","activesupport::hashwithindifferentaccess#regular_update()","activesupport::hashwithindifferentaccess#regular_update()","activesupport::hashwithindifferentaccess#regular_writer()","activesupport::hashwithindifferentaccess#regular_writer()","activesupport::hashwithindifferentaccess#reject()","activesupport::hashwithindifferentaccess#reject()","activesupport::orderedhash#reject()","activesupport::reloader#release_unload_lock!()","activesupport::reloader::reload!()","string#remove()","string#remove!()","activesupport::subscriber::remove_event_subscriber()","activesupport::backtracecleaner#remove_filters!()","module#remove_possible_method()","module#remove_possible_singleton_method()","activesupport::backtracecleaner#remove_silencers!()","activesupport::xmlmini#rename_key()","activesupport::hashwithindifferentaccess#replace()","activesupport::hashwithindifferentaccess#replace()","activesupport::safebuffer#replace()","activesupport::dependencies::loadable#require_dependency()","activesupport::reloader#require_unload_lock!()","activesupport::cache::memcachestore#rescue_error_with()","activesupport::rescuable::classmethods#rescue_from()","activesupport::rescuable#rescue_with_handler()","activesupport::rescuable::classmethods#rescue_with_handler()","activesupport::currentattributes#reset()","activesupport::callbacks::classmethods#reset_callbacks()","activesupport::currentattributes::resets()","activesupport::messageencryptor#resolve_verifier()","activesupport::timewithzone#respond_to?()","activesupport::arrayinquirer#respond_to_missing?()","activesupport::duration#respond_to_missing?()","activesupport::multibyte::chars#respond_to_missing?()","activesupport::orderedoptions#respond_to_missing?()","activesupport::stringinquirer#respond_to_missing?()","activesupport::timewithzone#respond_to_missing?()","activesupport::cache::retrieve_cache_key()","activesupport::cache::store::retrieve_pool_options()","activesupport::cache::retrieve_store_class()","activesupport::multibyte::chars#reverse()","activesupport::hashwithindifferentaccess#reverse_merge()","activesupport::hashwithindifferentaccess#reverse_merge()","hash#reverse_merge()","activesupport::hashwithindifferentaccess#reverse_merge!()","activesupport::hashwithindifferentaccess#reverse_merge!()","hash#reverse_merge!()","hash#reverse_update()","activesupport::timewithzone#rfc2822()","activesupport::timewithzone#rfc3339()","activesupport::timezone#rfc3339()","time::rfc3339()","activesupport::timewithzone#rfc822()","activesupport::testing::isolation#run()","activesupport::executionwrapper::run!()","activesupport::callbacks#run_callbacks()","activesupport::testing::parallelization::worker#run_cleanup()","activesupport::testing::isolation::forking#run_in_isolation()","activesupport::testing::isolation::subprocess#run_in_isolation()","activesupport::dependencies::run_interlock()","activesupport::lazyloadhooks#run_load_hooks()","activesupport::dependencies::interlock#running()","activesupport::safebuffer#safe_concat()","activesupport::inflector#safe_constantize()","string#safe_constantize()","activesupport::dependencies::classcache#safe_get()","activesupport::testing::parallelization::worker#safe_record()","activesupport::cache::store#save_block_result_to_cache()","activesupport::cache::filestore#search_dir()","time#sec_fraction()","array#second()","numeric#second()","array#second_to_last()","numeric#seconds()","datetime#seconds_since_midnight()","time#seconds_since_midnight()","datetime#seconds_since_unix_epoch()","activesupport::timezone::seconds_to_utc_offset()","datetime#seconds_until_end_of_day()","time#seconds_until_end_of_day()","activesupport::securityutils::secure_compare()","activesupport::securityutils#secure_compare()","activesupport::securecomparerotator#secure_compare!()","activesupport::hashwithindifferentaccess#select()","activesupport::hashwithindifferentaccess#select()","activesupport::orderedhash#select()","activesupport::cache::rediscachestore#serialize_entries()","activesupport::cache::rediscachestore#serialize_entry()","activesupport::cache::store#serialize_entry()","activesupport::currentattributes#set()","activesupport::safebuffer#set_block_back_references()","activesupport::callbacks::classmethods#set_callback()","activesupport::hashwithindifferentaccess#set_defaults()","activesupport::hashwithindifferentaccess#set_defaults()","activesupport::logsubscriber::testhelper#set_logger()","activesupport::testing::parallelization::worker#set_process_title()","activesupport::cache::rediscachestore#set_redis_capabilities()","activesupport::testing::setupandteardown::classmethods#setup()","activesupport::concurrency::sharelock#sharing()","activesupport::testing::parallelization::server#shutdown()","activesupport::backtracecleaner#silence()","activesupport::deprecation::reporting#silence()","activesupport::loggersilence#silence()","activesupport::cache::store#silence!()","module#silence_redefinition_of_method()","kernel#silence_warnings()","activesupport::deprecation::reporting#silenced()","activesupport::callbacks::filters::after::simple()","activesupport::testing::timehelpers#simple_stubs()","activesupport::duration#since()","activesupport::timewithzone#since()","date#since()","datetime#since()","time#since()","activesupport::inflector::inflections#singular()","activesupport::inflector#singularize()","string#singularize()","activesupport::callbacks::classmethods#skip_callback()","activesupport::hashwithindifferentaccess#slice()","activesupport::hashwithindifferentaccess#slice()","activesupport::hashwithindifferentaccess#slice!()","activesupport::hashwithindifferentaccess#slice!()","activesupport::multibyte::chars#slice!()","hash#slice!()","activesupport::multibyte::chars#split()","array#split()","string#squish()","string#squish!()","activesupport::logsubscriber#start()","activesupport::notifications::fanout#start()","activesupport::notifications::fanout::subscribers::eventobject#start()","activesupport::notifications::instrumenter#start()","activesupport::subscriber#start()","activesupport::testing::parallelization::worker#start()","activesupport::notifications::event#start!()","activesupport::xmlmini_nokogirisax::hashbuilder#start_document()","activesupport::xmlmini_nokogirisax::hashbuilder#start_element()","activesupport::concurrency::sharelock#start_exclusive()","activesupport::dependencies::interlock#start_running()","activesupport::concurrency::sharelock#start_sharing()","activesupport::dependencies::interlock#start_unloading()","symbol#start_with?()","activesupport::testing::parallelization::server#start_worker()","symbol#starts_with?()","activesupport::cache::memcachestore#stats()","activesupport::concurrency::sharelock#stop_exclusive()","activesupport::concurrency::sharelock#stop_sharing()","activesupport::testing::parallelization::server#stop_worker()","activesupport::dependencies::classcache#store()","activesupport::hashwithindifferentaccess#store()","activesupport::hashwithindifferentaccess#store()","activesupport::descendantstracker::store_inherited()","activesupport::timewithzone#strftime()","activesupport::hashwithindifferentaccess#stringify_keys()","activesupport::hashwithindifferentaccess#stringify_keys()","hash#stringify_keys()","activesupport::hashwithindifferentaccess#stringify_keys!()","activesupport::hashwithindifferentaccess#stringify_keys!()","hash#stringify_keys!()","string#strip_heredoc()","activesupport::timezone#strptime()","activesupport::descendantstracker#subclasses()","activesupport::descendantstracker::subclasses()","class#subclasses()","activesupport::notifications::subscribe()","activesupport::notifications::fanout#subscribe()","activesupport::notifications::subscribed()","activesupport::subscriber::subscribers()","datetime#subsec()","activesupport::duration#sum()","enumerable#sum()","dateandtime::calculations#sunday()","activesupport::cache::filestore::supports_cache_versioning?()","activesupport::cache::memcachestore::supports_cache_versioning?()","activesupport::cache::memorystore::supports_cache_versioning?()","activesupport::cache::nullstore::supports_cache_versioning?()","activesupport::cache::rediscachestore::supports_cache_versioning?()","kernel#suppress()","activesupport::hashwithindifferentaccess#symbolize_keys()","activesupport::hashwithindifferentaccess#symbolize_keys()","hash#symbolize_keys()","hash#symbolize_keys!()","activesupport::concurrency::loadinterlockawaremonitor#synchronize()","activesupport::inflector#tableize()","string#tableize()","activesupport::taggedlogging#tagged()","activesupport::deprecation::deprecatedconstantproxy#target()","activesupport::deprecation::deprecatedinstancevariableproxy#target()","activesupport::deprecation::deprecatedobjectproxy#target()","activesupport::testing::setupandteardown::classmethods#teardown()","numeric#terabyte()","numeric#terabytes()","activesupport::testing::declarative#test()","activesupport::testcase::test_order()","activesupport::testcase::test_order=()","array#third()","array#third_to_last()","module#thread_cattr_accessor()","module#thread_mattr_accessor()","activesupport::multibyte::chars#tidy_bytes()","activesupport::multibyte::unicode#tidy_bytes()","activesupport::timewithzone#time()","activesupport::timezone#time_now()","dateandtime::zones#time_with_zone()","activesupport::multibyte::chars#titlecase()","string#titlecase()","activesupport::inflector#titleize()","activesupport::multibyte::chars#titleize()","string#titleize()","array#to()","string#to()","activesupport::timewithzone#to_a()","activesupport::executionwrapper::to_complete()","string#to_date()","activesupport::timewithzone#to_datetime()","string#to_datetime()","activesupport::rangewithformat#to_default_s()","array#to_default_s()","date#to_default_s()","datetime#to_default_s()","time#to_default_s()","activesupport::timewithzone#to_f()","datetime#to_f()","activesupport::rangewithformat#to_formatted_s()","activesupport::timewithzone#to_formatted_s()","array#to_formatted_s()","date#to_formatted_s()","datetime#to_formatted_s()","time#to_formatted_s()","activesupport::hashwithindifferentaccess#to_hash()","activesupport::hashwithindifferentaccess#to_hash()","activesupport::duration#to_i()","activesupport::timewithzone#to_i()","datetime#to_i()","activesupport::hashwithindifferentaccess#to_options()","activesupport::hashwithindifferentaccess#to_options()","hash#to_options()","activesupport::hashwithindifferentaccess#to_options!()","activesupport::hashwithindifferentaccess#to_options!()","hash#to_options!()","activesupport::safebuffer#to_param()","array#to_param()","falseclass#to_param()","hash#to_param()","nilclass#to_param()","object#to_param()","trueclass#to_param()","activesupport::reloader::to_prepare()","array#to_query()","hash#to_query()","object#to_query()","activesupport::timewithzone#to_r()","activesupport::inflector::inflections::uncountables#to_regex()","activesupport::executionwrapper::to_run()","activesupport::duration#to_s()","activesupport::numericwithformat#to_s()","activesupport::rangewithformat#to_s()","activesupport::safebuffer#to_s()","activesupport::timewithzone#to_s()","activesupport::timezone#to_s()","array#to_s()","date#to_s()","datetime#to_s()","time#to_s()","array#to_sentence()","activesupport::xmlmini#to_tag()","activesupport::timewithzone#to_time()","date#to_time()","datetime#to_time()","string#to_time()","time#to_time()","activesupport::to_time_preserves_timezone()","activesupport::to_time_preserves_timezone=()","array#to_xml()","hash#to_xml()","activesupport::orderedhash#to_yaml_type()","activesupport::timezone#today()","activesupport::timewithzone#today?()","dateandtime::calculations#today?()","activesupport::timezone#tomorrow()","date::tomorrow()","dateandtime::calculations#tomorrow()","activesupport::timewithzone#tomorrow?()","dateandtime::calculations#tomorrow?()","activesupport::timewithzone#transfer_time_values_to_utc_constructor()","activesupport::hashwithindifferentaccess#transform_keys()","activesupport::hashwithindifferentaccess#transform_keys()","activesupport::hashwithindifferentaccess#transform_keys!()","activesupport::hashwithindifferentaccess#transform_keys!()","activesupport::hashwithindifferentaccess#transform_values()","activesupport::hashwithindifferentaccess#transform_values()","activesupport::inflector#transliterate()","activesupport::testing::timehelpers#travel()","activesupport::testing::timehelpers#travel_back()","activesupport::testing::timehelpers#travel_to()","string#truncate()","string#truncate_bytes()","activesupport::cache::rediscachestore#truncate_key()","string#truncate_words()","delegator#try()","nilclass#try()","object#try()","delegator#try!()","nilclass#try!()","object#try!()","activesupport::timewithzone#tv_sec()","activesupport::inflector::inflections#uncountable()","activesupport::inflector::inflections::uncountables#uncountable?()","activesupport::inflector#underscore()","string#underscore()","object#unescape()","activesupport::testing::timehelpers#unfreeze_time()","activesupport::notifications::instrumenter#unique_id()","activesupport::dependencies::unload_interlock()","activesupport::dependencies::interlock#unloading()","activesupport::notifications::unsubscribe()","activesupport::notifications::fanout#unsubscribe()","activesupport::duration#until()","activesupport::inflector#upcase_first()","string#upcase_first()","activesupport::hashwithindifferentaccess#update()","activesupport::hashwithindifferentaccess#update()","activesupport::hashwithindifferentaccess#update_with_single_argument()","activesupport::hashwithindifferentaccess#update_with_single_argument()","activesupport::fileupdatechecker#updated?()","activesupport::fileupdatechecker#updated_at()","activesupport::timezone::us_zones()","activesupport::cache::strategy::localcache#use_temporary_local_cache()","time::use_zone()","datetime#usec()","activesupport::timewithzone#utc()","datetime#utc()","activesupport::timewithzone#utc?()","datetime#utc?()","activesupport::timewithzone#utc_offset()","activesupport::timezone#utc_offset()","datetime#utc_offset()","activesupport::timezone#utc_to_local()","activesupport::utc_to_local_returns_utc_offset_times()","activesupport::utc_to_local_returns_utc_offset_times=()","digest::uuid::uuid_from_hash()","digest::uuid::uuid_v3()","digest::uuid::uuid_v4()","digest::uuid::uuid_v5()","activesupport::messageverifier#valid_message?()","activesupport::hashwithindifferentaccess#values_at()","activesupport::hashwithindifferentaccess#values_at()","activesupport::messageverifier#verified()","activesupport::messages::rotator::verifier#verified()","activesupport::messageverifier#verify()","activesupport::version()","activesupport::logsubscriber::testhelper#wait()","activesupport::notifications::fanout#wait()","activesupport::concurrency::sharelock#wait_for()","activesupport::deprecation::deprecatedinstancevariableproxy#warn()","activesupport::deprecation::deprecatedobjectproxy#warn()","activesupport::deprecation::reporting#warn()","activesupport::dependencies::watchstack#watch_namespaces()","activesupport::fileupdatechecker#watched()","activesupport::dependencies::watchstack#watching?()","numeric#week()","numeric#weeks()","dateandtime::calculations#weeks_ago()","dateandtime::calculations#weeks_since()","activesupport::cache::connectionpoollike#with()","activesupport::xmlmini#with_backend()","activesupport::hashwithindifferentaccess#with_defaults()","activesupport::hashwithindifferentaccess#with_defaults()","hash#with_defaults()","activesupport::hashwithindifferentaccess#with_defaults!()","activesupport::hashwithindifferentaccess#with_defaults!()","hash#with_defaults!()","activesupport::lazyloadhooks#with_execution_control()","activesupport::hashwithindifferentaccess#with_indifferent_access()","activesupport::hashwithindifferentaccess#with_indifferent_access()","hash#with_indifferent_access()","activesupport::cache::strategy::localcache#with_local_cache()","object#with_options()","kernel#with_warnings()","activesupport::hashwithindifferentaccess#without()","activesupport::hashwithindifferentaccess#without()","array#without()","enumerable#without()","activesupport::testing::parallelization::worker#work_from_queue()","activesupport::executionwrapper::wrap()","activesupport::reloader::wrap()","array::wrap()","activesupport::timewithzone#wrap_with_time_zone()","activesupport::cache::store#write()","activesupport::encryptedconfiguration#write()","activesupport::encryptedfile#write()","activesupport::cache::strategy::localcache#write_cache_value()","activesupport::cache::filestore#write_entry()","activesupport::cache::memcachestore#write_entry()","activesupport::cache::memorystore#write_entry()","activesupport::cache::nullstore#write_entry()","activesupport::cache::rediscachestore#write_entry()","activesupport::cache::store#write_entry()","activesupport::cache::strategy::localcache#write_entry()","activesupport::cache::strategy::localcache::localstore#write_entry()","activesupport::cache::rediscachestore#write_key_expiry()","activesupport::cache::store#write_multi()","activesupport::cache::rediscachestore#write_multi_entries()","activesupport::cache::store#write_multi_entries()","activesupport::encryptedfile#writing()","activesupport::timewithzone#xmlschema()","date#xmlschema()","integer#year()","integer#years()","dateandtime::calculations#years_ago()","dateandtime::calculations#years_since()","activesupport::timezone#yesterday()","date::yesterday()","dateandtime::calculations#yesterday()","activesupport::timewithzone#yesterday?()","dateandtime::calculations#yesterday?()","activesupport::concurrency::sharelock#yield_shares()","activesupport::timewithzone#zone()","time::zone()","time::zone=()","activesupport::timezone::zones_map()"],"info":[["ActiveSupport","","ActiveSupport.html","",""],["ActiveSupport::ActionableError","","ActiveSupport/ActionableError.html","","<p>Actionable errors let&#39;s you define actions to resolve an error.\n<p>To make an error actionable, include …\n"],["ActiveSupport::ActionableError::ClassMethods","","ActiveSupport/ActionableError/ClassMethods.html","",""],["ActiveSupport::ActionableError::NonActionable","","ActiveSupport/ActionableError/NonActionable.html","",""],["ActiveSupport::ArrayInquirer","","ActiveSupport/ArrayInquirer.html","","<p>Wrapping an array in an <code>ArrayInquirer</code> gives a friendlier way to check its string-like contents:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">variants</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ActiveSupport::Autoload","","ActiveSupport/Autoload.html","","<p>Autoload and eager load conveniences for your library.\n<p>This module allows you to define autoloads based …\n"],["ActiveSupport::BacktraceCleaner","","ActiveSupport/BacktraceCleaner.html","","<p>Backtraces often include many lines that are not relevant for the context under review. This makes it …\n"],["ActiveSupport::Benchmarkable","","ActiveSupport/Benchmarkable.html","",""],["ActiveSupport::BigDecimalWithDefaultFormat","","ActiveSupport/BigDecimalWithDefaultFormat.html","",""],["ActiveSupport::Cache","","ActiveSupport/Cache.html","","<p>See ActiveSupport::Cache::Store for documentation.\n"],["ActiveSupport::Cache::ConnectionPoolLike","","ActiveSupport/Cache/ConnectionPoolLike.html","",""],["ActiveSupport::Cache::Entry","","ActiveSupport/Cache/Entry.html","",""],["ActiveSupport::Cache::FileStore","","ActiveSupport/Cache/FileStore.html","","<p>A cache store implementation which stores everything on the filesystem.\n<p>FileStore implements the Strategy::LocalCache …\n"],["ActiveSupport::Cache::MemCacheStore","","ActiveSupport/Cache/MemCacheStore.html","","<p>A cache store implementation which stores data in Memcached: memcached.org\n<p>This is currently the most …\n"],["ActiveSupport::Cache::MemCacheStore::LocalCacheWithRaw","","ActiveSupport/Cache/MemCacheStore/LocalCacheWithRaw.html","",""],["ActiveSupport::Cache::MemoryStore","","ActiveSupport/Cache/MemoryStore.html","","<p>A cache store implementation which stores everything into memory in the same process. If you&#39;re running …\n"],["ActiveSupport::Cache::MemoryStore::DupCoder","","ActiveSupport/Cache/MemoryStore/DupCoder.html","",""],["ActiveSupport::Cache::NullCoder","","ActiveSupport/Cache/NullCoder.html","",""],["ActiveSupport::Cache::NullStore","","ActiveSupport/Cache/NullStore.html","","<p>A cache store implementation which doesn&#39;t actually store anything. Useful in development and test …\n"],["ActiveSupport::Cache::RedisCacheStore","","ActiveSupport/Cache/RedisCacheStore.html","","<p>Redis cache store.\n<p>Deployment note: Take care to use a *dedicated Redis cache* rather than pointing this …\n"],["ActiveSupport::Cache::RedisCacheStore::LocalCacheWithRaw","","ActiveSupport/Cache/RedisCacheStore/LocalCacheWithRaw.html","",""],["ActiveSupport::Cache::Store","","ActiveSupport/Cache/Store.html","","<p>An abstract cache store class. There are multiple cache store implementations, each having its own additional …\n"],["ActiveSupport::Cache::Strategy","","ActiveSupport/Cache/Strategy.html","",""],["ActiveSupport::Cache::Strategy::LocalCache","","ActiveSupport/Cache/Strategy/LocalCache.html","","<p>Caches that implement LocalCache will be backed by an in-memory cache for the duration of a block. Repeated …\n"],["ActiveSupport::Cache::Strategy::LocalCache::LocalCacheRegistry","","ActiveSupport/Cache/Strategy/LocalCache/LocalCacheRegistry.html","",""],["ActiveSupport::Cache::Strategy::LocalCache::LocalStore","","ActiveSupport/Cache/Strategy/LocalCache/LocalStore.html","","<p>Simple memory backed cache. This cache is not thread safe and is intended only for serving as a temporary …\n"],["ActiveSupport::Cache::Strategy::LocalCache::Middleware","","ActiveSupport/Cache/Strategy/LocalCache/Middleware.html","",""],["ActiveSupport::CachingKeyGenerator","","ActiveSupport/CachingKeyGenerator.html","","<p>CachingKeyGenerator is a wrapper around KeyGenerator which allows users to avoid re-executing the key …\n"],["ActiveSupport::Callbacks","","ActiveSupport/Callbacks.html","","<p>Callbacks are code hooks that are run at key points in an object&#39;s life cycle. The typical use case …\n"],["ActiveSupport::Callbacks::CallTemplate","","ActiveSupport/Callbacks/CallTemplate.html","",""],["ActiveSupport::Callbacks::Callback","","ActiveSupport/Callbacks/Callback.html","",""],["ActiveSupport::Callbacks::CallbackChain","","ActiveSupport/Callbacks/CallbackChain.html","",""],["ActiveSupport::Callbacks::CallbackSequence","","ActiveSupport/Callbacks/CallbackSequence.html","",""],["ActiveSupport::Callbacks::ClassMethods","","ActiveSupport/Callbacks/ClassMethods.html","",""],["ActiveSupport::Callbacks::Conditionals","","ActiveSupport/Callbacks/Conditionals.html","",""],["ActiveSupport::Callbacks::Conditionals::Value","","ActiveSupport/Callbacks/Conditionals/Value.html","",""],["ActiveSupport::Callbacks::Filters","","ActiveSupport/Callbacks/Filters.html","",""],["ActiveSupport::Callbacks::Filters::After","","ActiveSupport/Callbacks/Filters/After.html","",""],["ActiveSupport::Callbacks::Filters::Before","","ActiveSupport/Callbacks/Filters/Before.html","",""],["ActiveSupport::CompareWithRange","","ActiveSupport/CompareWithRange.html","",""],["ActiveSupport::Concern","","ActiveSupport/Concern.html","","<p>A typical module looks like this:\n\n<pre>module M\n  def self.included(base)\n    base.extend ClassMethods\n    ...</pre>\n"],["ActiveSupport::Concern::MultipleIncludedBlocks","","ActiveSupport/Concern/MultipleIncludedBlocks.html","",""],["ActiveSupport::Concern::MultiplePrependBlocks","","ActiveSupport/Concern/MultiplePrependBlocks.html","",""],["ActiveSupport::Concurrency","","ActiveSupport/Concurrency.html","",""],["ActiveSupport::Concurrency::LoadInterlockAwareMonitor","","ActiveSupport/Concurrency/LoadInterlockAwareMonitor.html","","<p>A monitor that will permit dependency loading while blocked waiting for the lock.\n"],["ActiveSupport::Concurrency::ShareLock","","ActiveSupport/Concurrency/ShareLock.html","","<p>A share/exclusive lock, otherwise known as a read/write lock.\n<p>en.wikipedia.org/wiki/Readers%E2%80%93writer_lock …\n"],["ActiveSupport::Configurable","","ActiveSupport/Configurable.html","","<p>Configurable provides a <code>config</code> method to store and retrieve configuration options as an <code>OrderedOptions</code> …\n"],["ActiveSupport::Configurable::ClassMethods","","ActiveSupport/Configurable/ClassMethods.html","",""],["ActiveSupport::Configurable::Configuration","","ActiveSupport/Configurable/Configuration.html","",""],["ActiveSupport::ConfigurationFile","","ActiveSupport/ConfigurationFile.html","",""],["ActiveSupport::ConfigurationFile::FormatError","","ActiveSupport/ConfigurationFile/FormatError.html","",""],["ActiveSupport::CurrentAttributes","","ActiveSupport/CurrentAttributes.html","","<p>Abstract super class that provides a thread-isolated attributes singleton, which resets automatically …\n"],["ActiveSupport::CurrentAttributes::TestHelper","","ActiveSupport/CurrentAttributes/TestHelper.html","",""],["ActiveSupport::Dependencies","","ActiveSupport/Dependencies.html","",""],["ActiveSupport::Dependencies::Blamable","","ActiveSupport/Dependencies/Blamable.html","",""],["ActiveSupport::Dependencies::ClassCache","","ActiveSupport/Dependencies/ClassCache.html","",""],["ActiveSupport::Dependencies::Interlock","","ActiveSupport/Dependencies/Interlock.html","",""],["ActiveSupport::Dependencies::Loadable","","ActiveSupport/Dependencies/Loadable.html","",""],["ActiveSupport::Dependencies::ModuleConstMissing","","ActiveSupport/Dependencies/ModuleConstMissing.html","",""],["ActiveSupport::Dependencies::WatchStack","","ActiveSupport/Dependencies/WatchStack.html","","<p>The WatchStack keeps a stack of the modules being watched as files are loaded. If a file in the process …\n"],["ActiveSupport::Dependencies::ZeitwerkIntegration","","ActiveSupport/Dependencies/ZeitwerkIntegration.html","",""],["ActiveSupport::Dependencies::ZeitwerkIntegration::Decorations","","ActiveSupport/Dependencies/ZeitwerkIntegration/Decorations.html","",""],["ActiveSupport::Dependencies::ZeitwerkIntegration::Inflector","","ActiveSupport/Dependencies/ZeitwerkIntegration/Inflector.html","",""],["ActiveSupport::Dependencies::ZeitwerkIntegration::RequireDependency","","ActiveSupport/Dependencies/ZeitwerkIntegration/RequireDependency.html","",""],["ActiveSupport::Deprecation","","ActiveSupport/Deprecation.html","","<p>Deprecation specifies the API used by Rails to deprecate methods, instance variables, objects and constants. …\n"],["ActiveSupport::Deprecation::Behavior","","ActiveSupport/Deprecation/Behavior.html","","<p>Behavior module allows to determine how to display deprecation messages. You can create a custom behavior …\n"],["ActiveSupport::Deprecation::DeprecatedConstantAccessor","","ActiveSupport/Deprecation/DeprecatedConstantAccessor.html","","<p>DeprecatedConstantAccessor transforms a constant into a deprecated one by hooking <code>const_missing</code>.\n<p>It takes …\n"],["ActiveSupport::Deprecation::DeprecatedConstantProxy","","ActiveSupport/Deprecation/DeprecatedConstantProxy.html","","<p>DeprecatedConstantProxy transforms a constant into a deprecated one. It takes the names of an old (deprecated) …\n"],["ActiveSupport::Deprecation::DeprecatedInstanceVariableProxy","","ActiveSupport/Deprecation/DeprecatedInstanceVariableProxy.html","","<p>DeprecatedInstanceVariableProxy transforms an instance variable into a deprecated one. It takes an instance …\n"],["ActiveSupport::Deprecation::DeprecatedObjectProxy","","ActiveSupport/Deprecation/DeprecatedObjectProxy.html","","<p>DeprecatedObjectProxy transforms an object into a deprecated one. It takes an object, a deprecation message …\n"],["ActiveSupport::Deprecation::DeprecationProxy","","ActiveSupport/Deprecation/DeprecationProxy.html","",""],["ActiveSupport::Deprecation::Disallowed","","ActiveSupport/Deprecation/Disallowed.html","",""],["ActiveSupport::Deprecation::InstanceDelegator","","ActiveSupport/Deprecation/InstanceDelegator.html","",""],["ActiveSupport::Deprecation::InstanceDelegator::ClassMethods","","ActiveSupport/Deprecation/InstanceDelegator/ClassMethods.html","",""],["ActiveSupport::Deprecation::InstanceDelegator::OverrideDelegators","","ActiveSupport/Deprecation/InstanceDelegator/OverrideDelegators.html","",""],["ActiveSupport::Deprecation::MethodWrapper","","ActiveSupport/Deprecation/MethodWrapper.html","",""],["ActiveSupport::Deprecation::Reporting","","ActiveSupport/Deprecation/Reporting.html","",""],["ActiveSupport::DeprecationException","","ActiveSupport/DeprecationException.html","","<p>Raised when <code>ActiveSupport::Deprecation::Behavior#behavior</code> is set with <code>:raise</code>. You would set <code>:raise</code>, as …\n"],["ActiveSupport::DescendantsTracker","","ActiveSupport/DescendantsTracker.html","","<p>This module provides an internal implementation to track descendants which is faster than iterating through …\n"],["ActiveSupport::DescendantsTracker::DescendantsArray","","ActiveSupport/DescendantsTracker/DescendantsArray.html","",""],["ActiveSupport::Digest","","ActiveSupport/Digest.html","",""],["ActiveSupport::Duration","","ActiveSupport/Duration.html","","<p>Provides accurate date and time measurements using Date#advance and Time#advance, respectively. It mainly …\n"],["ActiveSupport::Duration::ISO8601Parser","","ActiveSupport/Duration/ISO8601Parser.html","",""],["ActiveSupport::Duration::ISO8601Parser::ParsingError","","ActiveSupport/Duration/ISO8601Parser/ParsingError.html","",""],["ActiveSupport::Duration::ISO8601Serializer","","ActiveSupport/Duration/ISO8601Serializer.html","",""],["ActiveSupport::Duration::Scalar","","ActiveSupport/Duration/Scalar.html","",""],["ActiveSupport::EachTimeWithZone","","ActiveSupport/EachTimeWithZone.html","",""],["ActiveSupport::EncryptedConfiguration","","ActiveSupport/EncryptedConfiguration.html","",""],["ActiveSupport::EncryptedFile","","ActiveSupport/EncryptedFile.html","",""],["ActiveSupport::EncryptedFile::InvalidKeyLengthError","","ActiveSupport/EncryptedFile/InvalidKeyLengthError.html","",""],["ActiveSupport::EncryptedFile::MissingContentError","","ActiveSupport/EncryptedFile/MissingContentError.html","",""],["ActiveSupport::EncryptedFile::MissingKeyError","","ActiveSupport/EncryptedFile/MissingKeyError.html","",""],["ActiveSupport::EnvironmentInquirer","","ActiveSupport/EnvironmentInquirer.html","",""],["ActiveSupport::EventedFileUpdateChecker","","ActiveSupport/EventedFileUpdateChecker.html","",""],["ActiveSupport::EventedFileUpdateChecker::Core","","ActiveSupport/EventedFileUpdateChecker/Core.html","",""],["ActiveSupport::ExecutionWrapper","","ActiveSupport/ExecutionWrapper.html","",""],["ActiveSupport::Executor","","ActiveSupport/Executor.html","",""],["ActiveSupport::FileUpdateChecker","","ActiveSupport/FileUpdateChecker.html","","<p>FileUpdateChecker specifies the API used by Rails to watch files and control reloading. The API depends …\n"],["ActiveSupport::ForkTracker","","ActiveSupport/ForkTracker.html","",""],["ActiveSupport::ForkTracker::CoreExt","","ActiveSupport/ForkTracker/CoreExt.html","",""],["ActiveSupport::ForkTracker::CoreExtPrivate","","ActiveSupport/ForkTracker/CoreExtPrivate.html","",""],["ActiveSupport::Gzip","","ActiveSupport/Gzip.html","","<p>A convenient wrapper for the zlib standard library that allows compression/decompression of strings with …\n"],["ActiveSupport::Gzip::Stream","","ActiveSupport/Gzip/Stream.html","",""],["ActiveSupport::HashWithIndifferentAccess","","ActiveSupport/HashWithIndifferentAccess.html","","<p>Implements a hash where keys <code>:foo</code> and <code>&quot;foo&quot;</code> are considered to be the same.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">rgb</span> = <span class=\"ruby-constant\">ActiveSupport</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HashWithIndifferentAccess</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ActiveSupport::HashWithIndifferentAccess","","ActiveSupport/HashWithIndifferentAccess.html","","<p>Implements a hash where keys <code>:foo</code> and <code>&quot;foo&quot;</code> are considered to be the same.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">rgb</span> = <span class=\"ruby-constant\">ActiveSupport</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HashWithIndifferentAccess</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ActiveSupport::IncludeTimeWithZone","","ActiveSupport/IncludeTimeWithZone.html","",""],["ActiveSupport::Inflector","","ActiveSupport/Inflector.html","","<p>The Inflector transforms words from singular to plural, class names to table names, modularized class …\n"],["ActiveSupport::Inflector::Inflections","","ActiveSupport/Inflector/Inflections.html","","<p>A singleton instance of this class is yielded by Inflector.inflections, which can then be used to specify …\n"],["ActiveSupport::Inflector::Inflections::Uncountables","","ActiveSupport/Inflector/Inflections/Uncountables.html","",""],["ActiveSupport::InheritableOptions","","ActiveSupport/InheritableOptions.html","","<p><code>InheritableOptions</code> provides a constructor to build an <code>OrderedOptions</code> hash inherited from another hash. …\n"],["ActiveSupport::JSON","","ActiveSupport/JSON.html","",""],["ActiveSupport::JSON::Encoding","","ActiveSupport/JSON/Encoding.html","",""],["ActiveSupport::JSON::Encoding::JSONGemEncoder","","ActiveSupport/JSON/Encoding/JSONGemEncoder.html","",""],["ActiveSupport::JSON::Encoding::JSONGemEncoder::EscapedString","","ActiveSupport/JSON/Encoding/JSONGemEncoder/EscapedString.html","",""],["ActiveSupport::KeyGenerator","","ActiveSupport/KeyGenerator.html","","<p>KeyGenerator is a simple wrapper around OpenSSL&#39;s implementation of PBKDF2. It can be used to derive …\n"],["ActiveSupport::LazyLoadHooks","","ActiveSupport/LazyLoadHooks.html","","<p>lazy_load_hooks allows Rails to lazily load a lot of components and thus making the app boot faster. …\n"],["ActiveSupport::LogSubscriber","","ActiveSupport/LogSubscriber.html","","<p><code>ActiveSupport::LogSubscriber</code> is an object set to consume <code>ActiveSupport::Notifications</code> with the sole purpose …\n"],["ActiveSupport::LogSubscriber::TestHelper","","ActiveSupport/LogSubscriber/TestHelper.html","","<p>Provides some helpers to deal with testing log subscribers by setting up notifications. Take for instance …\n"],["ActiveSupport::LogSubscriber::TestHelper::MockLogger","","ActiveSupport/LogSubscriber/TestHelper/MockLogger.html","",""],["ActiveSupport::Logger","","ActiveSupport/Logger.html","",""],["ActiveSupport::Logger::SimpleFormatter","","ActiveSupport/Logger/SimpleFormatter.html","","<p>Simple formatter which only displays the message.\n"],["ActiveSupport::LoggerSilence","","ActiveSupport/LoggerSilence.html","",""],["ActiveSupport::LoggerThreadSafeLevel","","ActiveSupport/LoggerThreadSafeLevel.html","",""],["ActiveSupport::MarshalWithAutoloading","","ActiveSupport/MarshalWithAutoloading.html","",""],["ActiveSupport::MessageEncryptor","","ActiveSupport/MessageEncryptor.html","","<p>MessageEncryptor is a simple way to encrypt values which get stored somewhere you don&#39;t trust.\n<p>The …\n"],["ActiveSupport::MessageEncryptor::InvalidMessage","","ActiveSupport/MessageEncryptor/InvalidMessage.html","",""],["ActiveSupport::MessageEncryptor::NullSerializer","","ActiveSupport/MessageEncryptor/NullSerializer.html","",""],["ActiveSupport::MessageEncryptor::NullVerifier","","ActiveSupport/MessageEncryptor/NullVerifier.html","",""],["ActiveSupport::MessageVerifier","","ActiveSupport/MessageVerifier.html","","<p><code>MessageVerifier</code> makes it easy to generate and verify messages which are signed to prevent tampering. …\n"],["ActiveSupport::MessageVerifier::InvalidSignature","","ActiveSupport/MessageVerifier/InvalidSignature.html","",""],["ActiveSupport::Messages","","ActiveSupport/Messages.html","",""],["ActiveSupport::Messages::Metadata","","ActiveSupport/Messages/Metadata.html","",""],["ActiveSupport::Messages::RotationConfiguration","","ActiveSupport/Messages/RotationConfiguration.html","",""],["ActiveSupport::Messages::Rotator","","ActiveSupport/Messages/Rotator.html","",""],["ActiveSupport::Messages::Rotator::Encryptor","","ActiveSupport/Messages/Rotator/Encryptor.html","",""],["ActiveSupport::Messages::Rotator::Verifier","","ActiveSupport/Messages/Rotator/Verifier.html","",""],["ActiveSupport::Multibyte","","ActiveSupport/Multibyte.html","",""],["ActiveSupport::Multibyte::Chars","","ActiveSupport/Multibyte/Chars.html","","<p>Chars enables you to work transparently with UTF-8 encoding in the Ruby String class without having extensive …\n"],["ActiveSupport::Multibyte::Unicode","","ActiveSupport/Multibyte/Unicode.html","",""],["ActiveSupport::Notifications","","ActiveSupport/Notifications.html","","<p>Notifications\n<p><code>ActiveSupport::Notifications</code> provides an instrumentation API for Ruby.\n<p>Instrumenters\n"],["ActiveSupport::Notifications::Event","","ActiveSupport/Notifications/Event.html","",""],["ActiveSupport::Notifications::Fanout","","ActiveSupport/Notifications/Fanout.html","","<p>This is a default queue implementation that ships with Notifications. It just pushes events to all registered …\n"],["ActiveSupport::Notifications::Fanout::Subscribers","","ActiveSupport/Notifications/Fanout/Subscribers.html","",""],["ActiveSupport::Notifications::Fanout::Subscribers::AllMessages","","ActiveSupport/Notifications/Fanout/Subscribers/AllMessages.html","",""],["ActiveSupport::Notifications::Fanout::Subscribers::EventObject","","ActiveSupport/Notifications/Fanout/Subscribers/EventObject.html","",""],["ActiveSupport::Notifications::Fanout::Subscribers::Evented","","ActiveSupport/Notifications/Fanout/Subscribers/Evented.html","",""],["ActiveSupport::Notifications::Fanout::Subscribers::Matcher","","ActiveSupport/Notifications/Fanout/Subscribers/Matcher.html","",""],["ActiveSupport::Notifications::Fanout::Subscribers::MonotonicTimed","","ActiveSupport/Notifications/Fanout/Subscribers/MonotonicTimed.html","",""],["ActiveSupport::Notifications::Fanout::Subscribers::Timed","","ActiveSupport/Notifications/Fanout/Subscribers/Timed.html","",""],["ActiveSupport::Notifications::InstrumentationRegistry","","ActiveSupport/Notifications/InstrumentationRegistry.html","",""],["ActiveSupport::Notifications::Instrumenter","","ActiveSupport/Notifications/Instrumenter.html","","<p>Instrumenters are stored in a thread local.\n"],["ActiveSupport::NumberHelper","","ActiveSupport/NumberHelper.html","",""],["ActiveSupport::NumberHelper::NumberConverter","","ActiveSupport/NumberHelper/NumberConverter.html","",""],["ActiveSupport::NumberHelper::NumberToCurrencyConverter","","ActiveSupport/NumberHelper/NumberToCurrencyConverter.html","",""],["ActiveSupport::NumberHelper::NumberToDelimitedConverter","","ActiveSupport/NumberHelper/NumberToDelimitedConverter.html","",""],["ActiveSupport::NumberHelper::NumberToHumanConverter","","ActiveSupport/NumberHelper/NumberToHumanConverter.html","",""],["ActiveSupport::NumberHelper::NumberToHumanSizeConverter","","ActiveSupport/NumberHelper/NumberToHumanSizeConverter.html","",""],["ActiveSupport::NumberHelper::NumberToPercentageConverter","","ActiveSupport/NumberHelper/NumberToPercentageConverter.html","",""],["ActiveSupport::NumberHelper::NumberToPhoneConverter","","ActiveSupport/NumberHelper/NumberToPhoneConverter.html","",""],["ActiveSupport::NumberHelper::NumberToRoundedConverter","","ActiveSupport/NumberHelper/NumberToRoundedConverter.html","",""],["ActiveSupport::NumberHelper::RoundingHelper","","ActiveSupport/NumberHelper/RoundingHelper.html","",""],["ActiveSupport::NumericWithFormat","","ActiveSupport/NumericWithFormat.html","",""],["ActiveSupport::OptionMerger","","ActiveSupport/OptionMerger.html","",""],["ActiveSupport::OrderedHash","","ActiveSupport/OrderedHash.html","","<p>DEPRECATED: <code>ActiveSupport::OrderedHash</code> implements a hash that preserves insertion order.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">oh</span> = <span class=\"ruby-constant\">ActiveSupport</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">OrderedHash</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ActiveSupport::OrderedOptions","","ActiveSupport/OrderedOptions.html","","<p><code>OrderedOptions</code> inherits from <code>Hash</code> and provides dynamic accessor methods.\n<p>With a <code>Hash</code>, key-value pairs …\n"],["ActiveSupport::ParameterFilter","","ActiveSupport/ParameterFilter.html","","<p><code>ParameterFilter</code> allows you to specify keys for sensitive data from hash-like object and replace corresponding …\n"],["ActiveSupport::ParameterFilter::CompiledFilter","","ActiveSupport/ParameterFilter/CompiledFilter.html","",""],["ActiveSupport::PerThreadRegistry","","ActiveSupport/PerThreadRegistry.html","","<p>NOTE: This approach has been deprecated for end-user code in favor of thread_mattr_accessor and friends. …\n"],["ActiveSupport::ProxyObject","","ActiveSupport/ProxyObject.html","","<p>A class with no predefined methods that behaves similarly to Builder&#39;s BlankSlate. Used for proxy …\n"],["ActiveSupport::Railtie","","ActiveSupport/Railtie.html","",""],["ActiveSupport::RangeWithFormat","","ActiveSupport/RangeWithFormat.html","",""],["ActiveSupport::Reloader","","ActiveSupport/Reloader.html","",""],["ActiveSupport::Rescuable","","ActiveSupport/Rescuable.html","","<p>Rescuable module adds support for easier exception handling.\n"],["ActiveSupport::Rescuable::ClassMethods","","ActiveSupport/Rescuable/ClassMethods.html","",""],["ActiveSupport::SafeBuffer","","ActiveSupport/SafeBuffer.html","",""],["ActiveSupport::SafeBuffer::SafeConcatError","","ActiveSupport/SafeBuffer/SafeConcatError.html","","<p>Raised when <code>ActiveSupport::SafeBuffer#safe_concat</code> is called on unsafe buffers.\n"],["ActiveSupport::SecureCompareRotator","","ActiveSupport/SecureCompareRotator.html","","<p>The ActiveSupport::SecureCompareRotator is a wrapper around <code>ActiveSupport::SecurityUtils.secure_compare</code> …\n"],["ActiveSupport::SecurityUtils","","ActiveSupport/SecurityUtils.html","",""],["ActiveSupport::StringInquirer","","ActiveSupport/StringInquirer.html","","<p>Wrapping a string in this class gives you a prettier way to test for equality. The value returned by …\n"],["ActiveSupport::Subscriber","","ActiveSupport/Subscriber.html","","<p>ActiveSupport::Subscriber is an object set to consume ActiveSupport::Notifications. The subscriber dispatches …\n"],["ActiveSupport::SubscriberQueueRegistry","","ActiveSupport/SubscriberQueueRegistry.html","",""],["ActiveSupport::TaggedLogging","","ActiveSupport/TaggedLogging.html","","<p>Wraps any standard Logger object to provide tagging capabilities.\n<p>May be called with a block:\n\n<pre>logger = ...</pre>\n"],["ActiveSupport::TaggedLogging::Formatter","","ActiveSupport/TaggedLogging/Formatter.html","",""],["ActiveSupport::TaggedLogging::LocalTagStorage","","ActiveSupport/TaggedLogging/LocalTagStorage.html","",""],["ActiveSupport::TestCase","","ActiveSupport/TestCase.html","",""],["ActiveSupport::Testing","","ActiveSupport/Testing.html","",""],["ActiveSupport::Testing::Assertions","","ActiveSupport/Testing/Assertions.html","",""],["ActiveSupport::Testing::ConstantLookup","","ActiveSupport/Testing/ConstantLookup.html","","<p>Resolves a constant from a minitest spec name.\n<p>Given the following spec-style test:\n\n<pre>describe WidgetsController, ...</pre>\n"],["ActiveSupport::Testing::ConstantLookup::ClassMethods","","ActiveSupport/Testing/ConstantLookup/ClassMethods.html","",""],["ActiveSupport::Testing::Declarative","","ActiveSupport/Testing/Declarative.html","",""],["ActiveSupport::Testing::Deprecation","","ActiveSupport/Testing/Deprecation.html","",""],["ActiveSupport::Testing::FileFixtures","","ActiveSupport/Testing/FileFixtures.html","","<p>Adds simple access to sample files called file fixtures. File fixtures are normal files stored in <code>ActiveSupport::TestCase.file_fixture_path</code> …\n"],["ActiveSupport::Testing::Isolation","","ActiveSupport/Testing/Isolation.html","",""],["ActiveSupport::Testing::Isolation::Forking","","ActiveSupport/Testing/Isolation/Forking.html","",""],["ActiveSupport::Testing::Isolation::Subprocess","","ActiveSupport/Testing/Isolation/Subprocess.html","",""],["ActiveSupport::Testing::MethodCallAssertions","","ActiveSupport/Testing/MethodCallAssertions.html","",""],["ActiveSupport::Testing::Parallelization","","ActiveSupport/Testing/Parallelization.html","",""],["ActiveSupport::Testing::Parallelization::Server","","ActiveSupport/Testing/Parallelization/Server.html","",""],["ActiveSupport::Testing::Parallelization::Worker","","ActiveSupport/Testing/Parallelization/Worker.html","",""],["ActiveSupport::Testing::SetupAndTeardown","","ActiveSupport/Testing/SetupAndTeardown.html","","<p>Adds support for <code>setup</code> and <code>teardown</code> callbacks. These callbacks serve as a replacement to overwriting …\n"],["ActiveSupport::Testing::SetupAndTeardown::ClassMethods","","ActiveSupport/Testing/SetupAndTeardown/ClassMethods.html","",""],["ActiveSupport::Testing::SimpleStubs","","ActiveSupport/Testing/SimpleStubs.html","",""],["ActiveSupport::Testing::Stream","","ActiveSupport/Testing/Stream.html","",""],["ActiveSupport::Testing::TaggedLogging","","ActiveSupport/Testing/TaggedLogging.html","",""],["ActiveSupport::Testing::TimeHelpers","","ActiveSupport/Testing/TimeHelpers.html","","<p>Contains helpers that help you test passage of time.\n"],["ActiveSupport::TimeWithZone","","ActiveSupport/TimeWithZone.html","","<p>A Time-like class that can represent a time in any time zone. Necessary because standard Ruby Time instances …\n"],["ActiveSupport::TimeZone","","ActiveSupport/TimeZone.html","","<p>The TimeZone class serves as a wrapper around TZInfo::Timezone instances. It allows us to do the following: …\n"],["ActiveSupport::ToJsonWithActiveSupportEncoder","","ActiveSupport/ToJsonWithActiveSupportEncoder.html","",""],["ActiveSupport::Tryable","","ActiveSupport/Tryable.html","",""],["ActiveSupport::VERSION","","ActiveSupport/VERSION.html","",""],["ActiveSupport::XMLConverter","","ActiveSupport/XMLConverter.html","",""],["ActiveSupport::XMLConverter::DisallowedType","","ActiveSupport/XMLConverter/DisallowedType.html","","<p>Raised if the XML contains attributes with type=“yaml” or type=“symbol”. Read Hash#from_xml …\n"],["ActiveSupport::XmlMini","","ActiveSupport/XmlMini.html","","<p>XmlMini\n<p>To use the much faster libxml parser:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">gem</span> <span class=\"ruby-string\">&#39;libxml-ruby&#39;</span>, <span class=\"ruby-string\">&#39;=0.9.7&#39;</span>\n<span class=\"ruby-constant\">XmlMini</span>.<span class=\"ruby-identifier\">backend</span> = <span class=\"ruby-string\">&#39;LibXML&#39;</span>\n</pre>\n"],["ActiveSupport::XmlMini::FileLike","","ActiveSupport/XmlMini/FileLike.html","",""],["ActiveSupport::XmlMini_JDOM","","ActiveSupport/XmlMini_JDOM.html","",""],["ActiveSupport::XmlMini_LibXML","","ActiveSupport/XmlMini_LibXML.html","",""],["ActiveSupport::XmlMini_LibXMLSAX","","ActiveSupport/XmlMini_LibXMLSAX.html","",""],["ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","","ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html","","<p>Class that will build the hash while the XML document is being parsed using SAX events.\n"],["ActiveSupport::XmlMini_Nokogiri","","ActiveSupport/XmlMini_Nokogiri.html","",""],["ActiveSupport::XmlMini_Nokogiri::Conversions","","ActiveSupport/XmlMini_Nokogiri/Conversions.html","",""],["ActiveSupport::XmlMini_Nokogiri::Conversions::Document","","ActiveSupport/XmlMini_Nokogiri/Conversions/Document.html","",""],["ActiveSupport::XmlMini_Nokogiri::Conversions::Node","","ActiveSupport/XmlMini_Nokogiri/Conversions/Node.html","",""],["ActiveSupport::XmlMini_NokogiriSAX","","ActiveSupport/XmlMini_NokogiriSAX.html","",""],["ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","","ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html","","<p>Class that will build the hash while the XML document is being parsed using SAX events.\n"],["ActiveSupport::XmlMini_REXML","","ActiveSupport/XmlMini_REXML.html","",""],["Array","","Array.html","",""],["Benchmark","","Benchmark.html","",""],["BigDecimal","","BigDecimal.html","",""],["Class","","Class.html","",""],["Date","","Date.html","",""],["DateAndTime","","DateAndTime.html","",""],["DateAndTime::Calculations","","DateAndTime/Calculations.html","",""],["DateAndTime::Compatibility","","DateAndTime/Compatibility.html","",""],["DateAndTime::Zones","","DateAndTime/Zones.html","",""],["DateTime","","DateTime.html","",""],["Delegator","","Delegator.html","",""],["Digest","","Digest.html","",""],["Digest::UUID","","Digest/UUID.html","",""],["ERB","","ERB.html","",""],["ERB::Util","","ERB/Util.html","",""],["Enumerable","","Enumerable.html","",""],["Exception","","Exception.html","",""],["FalseClass","","FalseClass.html","",""],["File","","File.html","",""],["Float","","Float.html","",""],["Hash","","Hash.html","",""],["IO","","IO.html","",""],["IPAddr","","IPAddr.html","",""],["Integer","","Integer.html","",""],["Kernel","","Kernel.html","",""],["LibXML","","LibXML.html","",""],["LibXML::Conversions","","LibXML/Conversions.html","",""],["LibXML::Conversions::Document","","LibXML/Conversions/Document.html","",""],["LibXML::Conversions::Node","","LibXML/Conversions/Node.html","",""],["LoadError","","LoadError.html","",""],["Method","","Method.html","",""],["Module","","Module.html","","<p>Extends the module object with class/module and instance accessors for class/module attributes, just …\n"],["Module::Concerning","","Module/Concerning.html","","<p>Bite-sized separation of concerns\n<p>We often find ourselves with a medium-sized chunk of behavior that we&#39;d …\n"],["Module::DelegationError","","Module/DelegationError.html","","<p>Error generated by <code>delegate</code> when a method is called on <code>nil</code> and <code>allow_nil</code> option is not used.\n"],["NameError","","NameError.html","",""],["NilClass","","NilClass.html","",""],["Numeric","","Numeric.html","",""],["Object","","Object.html","",""],["Pathname","","Pathname.html","",""],["Process","","Process.html","",""],["Process::Status","","Process/Status.html","",""],["Range","","Range.html","",""],["Regexp","","Regexp.html","",""],["SecureRandom","","SecureRandom.html","",""],["String","","String.html","","<p>String inflections define new methods on the String class to transform names for different purposes. …\n"],["Struct","","Struct.html","",""],["Symbol","","Symbol.html","",""],["Time","","Time.html","",""],["TrueClass","","TrueClass.html","",""],["URI","","URI.html","",""],["URI::Generic","","URI/Generic.html","",""],["UnboundMethod","","UnboundMethod.html","",""],["%","ActiveSupport::Duration","ActiveSupport/Duration.html#method-i-25","(other)","<p>Returns the modulo of this Duration by another Duration or Numeric. Numeric values are treated as seconds. …\n"],["%","ActiveSupport::SafeBuffer","ActiveSupport/SafeBuffer.html#method-i-25","(args)",""],["*","ActiveSupport::Duration","ActiveSupport/Duration.html#method-i-2A","(other)","<p>Multiplies this Duration by a Numeric and returns a new Duration.\n"],["*","ActiveSupport::SafeBuffer","ActiveSupport/SafeBuffer.html#method-i-2A","(*)",""],["+","ActiveSupport::Duration","ActiveSupport/Duration.html#method-i-2B","(other)","<p>Adds another Duration or a Numeric to this Duration. Numeric values are treated as seconds.\n"],["+","ActiveSupport::SafeBuffer","ActiveSupport/SafeBuffer.html#method-i-2B","(other)",""],["+","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-2B","(other)","<p>Adds an interval of time to the current object&#39;s time and returns that value as a new TimeWithZone …\n"],["-","ActiveSupport::Duration","ActiveSupport/Duration.html#method-i-2D","(other)","<p>Subtracts another Duration or a Numeric from this Duration. Numeric values are treated as seconds.\n"],["-","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-2D","(other)","<p>Subtracts an interval of time and returns a new TimeWithZone object unless the other value <code>acts_like?</code> …\n"],["-","Time","Time.html#method-i-2D","(other)",""],["/","ActiveSupport::Duration","ActiveSupport/Duration.html#method-i-2F","(other)","<p>Divides this Duration by a Numeric and returns a new Duration.\n"],["<<","ActiveSupport::Inflector::Inflections::Uncountables","ActiveSupport/Inflector/Inflections/Uncountables.html#method-i-3C-3C","(*word)",""],["<<","ActiveSupport::Notifications::Event","ActiveSupport/Notifications/Event.html#method-i-3C-3C","(event)",""],["<<","ActiveSupport::SafeBuffer","ActiveSupport/SafeBuffer.html#method-i-3C-3C","(value)",""],["<<","ActiveSupport::Testing::Parallelization::Server","ActiveSupport/Testing/Parallelization/Server.html#method-i-3C-3C","(o)",""],["<=>","ActiveSupport::Duration","ActiveSupport/Duration.html#method-i-3C-3D-3E","(other)","<p>Compares one Duration with another or a Numeric to this Duration. Numeric values are treated as seconds. …\n"],["<=>","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-3C-3D-3E","(other)","<p>Use the time in UTC for comparisons.\n"],["<=>","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-3C-3D-3E","(zone)","<p>Compare this time zone to the parameter. The two are compared first on their offsets, and then by name. …\n"],["<=>","Date","Date.html#method-i-3C-3D-3E","(other)",""],["<=>","DateTime","DateTime.html#method-i-3C-3D-3E","(other)","<p>Layers additional behavior on DateTime#&lt;=&gt; so that Time and ActiveSupport::TimeWithZone instances …\n"],["<=>","Time","Time.html#method-i-3C-3D-3E","(other)",""],["==","ActiveSupport::Duration","ActiveSupport/Duration.html#method-i-3D-3D","(other)","<p>Returns <code>true</code> if <code>other</code> is also a Duration instance with the same <code>value</code>, or if <code>other == value</code>.\n"],["===","ActiveSupport::CompareWithRange","ActiveSupport/CompareWithRange.html#method-i-3D-3D-3D","(value)","<p>Extends the default Range#=== to support range comparisons.\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">5</span>) <span class=\"ruby-operator\">===</span> (<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">5</span>)  <span class=\"ruby-comment\"># =&gt; true</span>\n(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">5</span>) <span class=\"ruby-operator\">===</span> (<span class=\"ruby-value\">2</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">3</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["===","Time","Time.html#method-c-3D-3D-3D","(other)","<p>Overriding case equality method so that it returns true for ActiveSupport::TimeWithZone instances\n"],["=~","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-3D~","(re)","<p>Compare #name and TZInfo identifier to a supplied regexp, returning <code>true</code> if a match is found.\n"],["[]","ActiveSupport::Dependencies::ClassCache","ActiveSupport/Dependencies/ClassCache.html#method-i-5B-5D","(key)",""],["[]","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-5B-5D","(key)","<p>Same as <code>Hash#[]</code> where the key passed as argument can be either a string or a symbol:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">counters</span> = <span class=\"ruby-constant\">ActiveSupport</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HashWithIndifferentAccess</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["[]","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-5B-5D","(key)","<p>Same as <code>Hash#[]</code> where the key passed as argument can be either a string or a symbol:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">counters</span> = <span class=\"ruby-constant\">ActiveSupport</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HashWithIndifferentAccess</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["[]","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-c-5B-5D","(*args)",""],["[]","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-c-5B-5D","(*args)",""],["[]","ActiveSupport::OrderedOptions","ActiveSupport/OrderedOptions.html#method-i-5B-5D","(key)",""],["[]","ActiveSupport::SafeBuffer","ActiveSupport/SafeBuffer.html#method-i-5B-5D","(*args)",""],["[]","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-c-5B-5D","(arg)","<p>Locate a specific time zone object. If the argument is a string, it is interpreted to mean the name of …\n"],["[]=","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-5B-5D-3D","(key, value)","<p>Assigns a new value to the hash:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">hash</span> = <span class=\"ruby-constant\">ActiveSupport</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HashWithIndifferentAccess</span>.<span class=\"ruby-identifier\">new</span>\n<span class=\"ruby-identifier\">hash</span>[<span class=\"ruby-value\">:key</span>] = <span class=\"ruby-string\">&#39;value&#39;</span>\n</pre>\n"],["[]=","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-5B-5D-3D","(key, value)","<p>Assigns a new value to the hash:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">hash</span> = <span class=\"ruby-constant\">ActiveSupport</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HashWithIndifferentAccess</span>.<span class=\"ruby-identifier\">new</span>\n<span class=\"ruby-identifier\">hash</span>[<span class=\"ruby-value\">:key</span>] = <span class=\"ruby-string\">&#39;value&#39;</span>\n</pre>\n"],["[]=","ActiveSupport::OrderedOptions","ActiveSupport/OrderedOptions.html#method-i-5B-5D-3D","(key, value)",""],["[]=","ActiveSupport::SafeBuffer","ActiveSupport/SafeBuffer.html#method-i-5B-5D-3D","(*args)",""],["_dasherize","ActiveSupport::XmlMini","ActiveSupport/XmlMini.html#method-i-_dasherize","(key)",""],["_decrypt","ActiveSupport::MessageEncryptor","ActiveSupport/MessageEncryptor.html#method-i-_decrypt","(encrypted_message, purpose)",""],["_deep_transform_keys_in_object","Hash","Hash.html#method-i-_deep_transform_keys_in_object","(object, &block)","<p>Support methods for deep transforming nested hashes and arrays.\n"],["_deep_transform_keys_in_object!","Hash","Hash.html#method-i-_deep_transform_keys_in_object-21","(object, &block)",""],["_deep_transform_values_in_object","Hash","Hash.html#method-i-_deep_transform_values_in_object","(object, &block)","<p>Support methods for deep transforming nested hashes and arrays.\n"],["_deep_transform_values_in_object!","Hash","Hash.html#method-i-_deep_transform_values_in_object-21","(object, &block)",""],["_encrypt","ActiveSupport::MessageEncryptor","ActiveSupport/MessageEncryptor.html#method-i-_encrypt","(value, **metadata_options)",""],["_extract_callstack","ActiveSupport::Deprecation::Reporting","ActiveSupport/Deprecation/Reporting.html#method-i-_extract_callstack","(callstack)",""],["_get","ActiveSupport::OrderedOptions","ActiveSupport/OrderedOptions.html#method-i-_get","(key)",""],["_parse_binary","ActiveSupport::XmlMini","ActiveSupport/XmlMini.html#method-i-_parse_binary","(bin, entity)","<p>TODO: Add support for other encodings\n"],["_parse_file","ActiveSupport::XmlMini","ActiveSupport/XmlMini.html#method-i-_parse_file","(file, entity)",""],["accumulate_descendants","ActiveSupport::DescendantsTracker","ActiveSupport/DescendantsTracker.html#method-c-accumulate_descendants","(klass, acc)",""],["acronym","ActiveSupport::Inflector::Inflections","ActiveSupport/Inflector/Inflections.html#method-i-acronym","(word)","<p>Specifies a new acronym. An acronym must be specified as it will appear in a camelized string. An underscore …\n"],["action","ActiveSupport::ActionableError::ClassMethods","ActiveSupport/ActionableError/ClassMethods.html#method-i-action","(name, &block)","<p>Defines an action that can resolve the error.\n\n<pre>class PendingMigrationError &lt; MigrationError\n  include ActiveSupport::ActionableError ...</pre>\n"],["active_workers?","ActiveSupport::Testing::Parallelization::Server","ActiveSupport/Testing/Parallelization/Server.html#method-i-active_workers-3F","()",""],["acts_like?","Object","Object.html#method-i-acts_like-3F","(duck)","<p>A duck-type assistant method. For example, Active Support extends Date to define an <code>acts_like_date?</code> method, …\n"],["acts_like_date?","Date","Date.html#method-i-acts_like_date-3F","()","<p>Duck-types as a Date-like class. See Object#acts_like?.\n"],["acts_like_date?","DateTime","DateTime.html#method-i-acts_like_date-3F","()","<p>Duck-types as a Date-like class. See Object#acts_like?.\n"],["acts_like_string?","String","String.html#method-i-acts_like_string-3F","()","<p>Enables more predictable duck-typing on String-like classes. See <code>Object#acts_like?</code>.\n"],["acts_like_time?","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-acts_like_time-3F","()","<p>So that <code>self</code> <code>acts_like?(:time)</code>.\n"],["acts_like_time?","DateTime","DateTime.html#method-i-acts_like_time-3F","()","<p>Duck-types as a Time-like class. See Object#acts_like?.\n"],["acts_like_time?","Time","Time.html#method-i-acts_like_time-3F","()","<p>Duck-types as a Time-like class. See Object#acts_like?.\n"],["add","ActiveSupport::Inflector::Inflections::Uncountables","ActiveSupport/Inflector/Inflections/Uncountables.html#method-i-add","(words)",""],["add_event_subscriber","ActiveSupport::Subscriber","ActiveSupport/Subscriber.html#method-c-add_event_subscriber","(event)",""],["add_filter","ActiveSupport::BacktraceCleaner","ActiveSupport/BacktraceCleaner.html#method-i-add_filter","(&block)","<p>Adds a filter from the block provided. Each line in the backtrace will be mapped against this filter. …\n"],["add_gem_filter","ActiveSupport::BacktraceCleaner","ActiveSupport/BacktraceCleaner.html#method-i-add_gem_filter","()",""],["add_gem_silencer","ActiveSupport::BacktraceCleaner","ActiveSupport/BacktraceCleaner.html#method-i-add_gem_silencer","()",""],["add_setup_exception","ActiveSupport::Testing::Parallelization::Worker","ActiveSupport/Testing/Parallelization/Worker.html#method-i-add_setup_exception","(result)",""],["add_silencer","ActiveSupport::BacktraceCleaner","ActiveSupport/BacktraceCleaner.html#method-i-add_silencer","(&block)","<p>Adds a silencer from the block provided. If the silencer returns <code>true</code> for a given line, it will be excluded …\n"],["add_stdlib_silencer","ActiveSupport::BacktraceCleaner","ActiveSupport/BacktraceCleaner.html#method-i-add_stdlib_silencer","()",""],["advance","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-advance","(options)","<p>Uses Date to provide precise Time calculations for years, months, and days according to the proleptic …\n"],["advance","Date","Date.html#method-i-advance","(options)","<p>Provides precise Date calculations for years, months, and days. The <code>options</code> parameter takes a hash with …\n"],["advance","DateTime","DateTime.html#method-i-advance","(options)","<p>Uses Date to provide precise Time calculations for years, months, and days. The <code>options</code> parameter takes …\n"],["advance","Time","Time.html#method-i-advance","(options)","<p>Uses Date to provide precise Time calculations for years, months, and days according to the proleptic …\n"],["aead_mode?","ActiveSupport::MessageEncryptor","ActiveSupport/MessageEncryptor.html#method-i-aead_mode-3F","()",""],["after","ActiveSupport::Duration","ActiveSupport/Duration.html#method-i-after","(time = ::Time.current)",""],["after?","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-after-3F","(date_or_time)","<p>Returns true if the date/time falls after <code>date_or_time</code>.\n"],["after_class_unload","ActiveSupport::Reloader","ActiveSupport/Reloader.html#method-c-after_class_unload","(*args, &block)","<p>Registers a callback that will run immediately after the classes are unloaded.\n"],["after_fork","ActiveSupport::Testing::Parallelization::Worker","ActiveSupport/Testing/Parallelization/Worker.html#method-i-after_fork","()",""],["after_reset","ActiveSupport::CurrentAttributes","ActiveSupport/CurrentAttributes.html#method-c-after_reset","(&block)",""],["after_teardown","ActiveSupport::Testing::TimeHelpers","ActiveSupport/Testing/TimeHelpers.html#method-i-after_teardown","()",""],["ago","ActiveSupport::Duration","ActiveSupport/Duration.html#method-i-ago","(time = ::Time.current)","<p>Calculates a new Time or Date that is as far in the past as this Duration represents.\n"],["ago","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-ago","(other)","<p>Subtracts an interval of time from the current object&#39;s time and returns the result as a new TimeWithZone …\n"],["ago","Date","Date.html#method-i-ago","(seconds)","<p>Converts Date to a Time (or DateTime if necessary) with the time portion set to the beginning of the …\n"],["ago","DateTime","DateTime.html#method-i-ago","(seconds)","<p>Returns a new DateTime representing the time a number of seconds ago. Do not use this method in combination …\n"],["ago","Time","Time.html#method-i-ago","(seconds)","<p>Returns a new Time representing the time a number of seconds ago, this is basically a wrapper around …\n"],["alias_attribute","Module","Module.html#method-i-alias_attribute","(new_name, old_name)","<p>Allows you to make aliases for attributes, which includes getter, setter, and a predicate.\n\n<pre>class Content ...</pre>\n"],["all","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-c-all","()","<p>Returns an array of all TimeZone objects. There are multiple TimeZone objects per time zone, in many …\n"],["all_day","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-all_day","()","<p>Returns a Range representing the whole day of the current date/time.\n"],["all_month","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-all_month","()","<p>Returns a Range representing the whole month of the current date/time.\n"],["all_quarter","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-all_quarter","()","<p>Returns a Range representing the whole quarter of the current date/time.\n"],["all_week","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-all_week","(start_day = Date.beginning_of_week)","<p>Returns a Range representing the whole week of the current date/time. Week starts on start_day, default …\n"],["all_year","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-all_year","()","<p>Returns a Range representing the whole year of the current date/time.\n"],["allocations","ActiveSupport::Notifications::Event","ActiveSupport/Notifications/Event.html#method-i-allocations","()","<p>Returns the number of allocations made since the call to <code>start!</code> and the call to <code>finish!</code>\n"],["allow","ActiveSupport::Deprecation::Reporting","ActiveSupport/Deprecation/Reporting.html#method-i-allow","(allowed_warnings = :all, if: true, &block)","<p>Allow previously disallowed deprecation warnings within the block. <code>allowed_warnings</code> can be an array containing …\n"],["anonymous?","Module","Module.html#method-i-anonymous-3F","()","<p>A module may or may not have a name.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">module</span> <span class=\"ruby-constant\">M</span>; <span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-constant\">M</span>.<span class=\"ruby-identifier\">name</span> <span class=\"ruby-comment\"># =&gt; &quot;M&quot;</span>\n\n<span class=\"ruby-identifier\">m</span> = <span class=\"ruby-constant\">Module</span>.<span class=\"ruby-identifier\">new</span>\n<span class=\"ruby-identifier\">m</span>.<span class=\"ruby-identifier\">name</span> <span class=\"ruby-comment\"># =&gt; nil</span>\n</pre>\n<p><code>anonymous?</code> …\n"],["any?","ActiveSupport::ArrayInquirer","ActiveSupport/ArrayInquirer.html#method-i-any-3F","(*candidates)","<p>Passes each element of <code>candidates</code> collection to ArrayInquirer collection. The method returns true if …\n"],["apply_inflections","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-apply_inflections","(word, rules, locale = :en)","<p>Applies inflection rules for <code>singularize</code> and <code>pluralize</code>.\n<p>If passed an optional <code>locale</code> parameter, the uncountables …\n"],["arity_coerce","ActiveSupport::Deprecation::Behavior","ActiveSupport/Deprecation/Behavior.html#method-i-arity_coerce","(behavior)",""],["as_json","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-as_json","(options = nil)","<p>Coerces time to a string for JSON encoding. The default format is ISO 8601. You can get %Y/%m/%d %H:%M:%S …\n"],["as_json","Exception","Exception.html#method-i-as_json","(options = nil)",""],["assert_changes","ActiveSupport::Testing::Assertions","ActiveSupport/Testing/Assertions.html#method-i-assert_changes","(expression, message = nil, from: UNTRACKED, to: UNTRACKED, &block)","<p>Assertion that the result of evaluating an expression is changed before and after invoking the passed …\n"],["assert_difference","ActiveSupport::Testing::Assertions","ActiveSupport/Testing/Assertions.html#method-i-assert_difference","(expression, *args, &block)","<p>Test numeric difference between the return value of an expression as a result of what is evaluated in …\n"],["assert_no_changes","ActiveSupport::Testing::Assertions","ActiveSupport/Testing/Assertions.html#method-i-assert_no_changes","(expression, message = nil, &block)","<p>Assertion that the result of evaluating an expression is not changed before and after invoking the passed …\n"],["assert_no_difference","ActiveSupport::Testing::Assertions","ActiveSupport/Testing/Assertions.html#method-i-assert_no_difference","(expression, message = nil, &block)","<p>Assertion that the numeric result of evaluating an expression is not changed before and after invoking …\n"],["assert_not","ActiveSupport::Testing::Assertions","ActiveSupport/Testing/Assertions.html#method-i-assert_not","(object, message = nil)","<p>Asserts that an expression is not truthy. Passes if <code>object</code> is <code>nil</code> or <code>false</code>. “Truthy” means …\n"],["assert_nothing_raised","ActiveSupport::Testing::Assertions","ActiveSupport/Testing/Assertions.html#method-i-assert_nothing_raised","()","<p>Assertion that the block should not raise an exception.\n<p>Passes if evaluated code in the yielded block …\n"],["assert_valid_keys","Hash","Hash.html#method-i-assert_valid_keys","(*valid_keys)","<p>Validates all keys in a hash match <code>*valid_keys</code>, raising <code>ArgumentError</code> on a mismatch.\n<p>Note that keys are …\n"],["assign_attributes","ActiveSupport::CurrentAttributes","ActiveSupport/CurrentAttributes.html#method-i-assign_attributes","(new_attributes)",""],["assoc","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-assoc","(key)","<p>Same as <code>Hash#assoc</code> where the key passed as argument can be either a string or a symbol:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">counters</span> = <span class=\"ruby-constant\">ActiveSupport</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HashWithIndifferentAccess</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["assoc","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-assoc","(key)","<p>Same as <code>Hash#assoc</code> where the key passed as argument can be either a string or a symbol:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">counters</span> = <span class=\"ruby-constant\">ActiveSupport</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HashWithIndifferentAccess</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["at","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-at","(*args)","<p>Method for creating new ActiveSupport::TimeWithZone instance in time zone of <code>self</code> from number of seconds …\n"],["at","String","String.html#method-i-at","(position)","<p>If you pass a single integer, returns a substring of one character at that position. The first character …\n"],["at","Time","Time.html#method-c-at","(*args, **kwargs)",""],["at_beginning_of_day","Date","Date.html#method-i-at_beginning_of_day","()",""],["at_beginning_of_day","DateTime","DateTime.html#method-i-at_beginning_of_day","()",""],["at_beginning_of_day","Time","Time.html#method-i-at_beginning_of_day","()",""],["at_beginning_of_hour","DateTime","DateTime.html#method-i-at_beginning_of_hour","()",""],["at_beginning_of_hour","Time","Time.html#method-i-at_beginning_of_hour","()",""],["at_beginning_of_minute","DateTime","DateTime.html#method-i-at_beginning_of_minute","()",""],["at_beginning_of_minute","Time","Time.html#method-i-at_beginning_of_minute","()",""],["at_beginning_of_month","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-at_beginning_of_month","()",""],["at_beginning_of_quarter","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-at_beginning_of_quarter","()",""],["at_beginning_of_week","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-at_beginning_of_week","(start_day = Date.beginning_of_week)",""],["at_beginning_of_year","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-at_beginning_of_year","()",""],["at_end_of_day","Date","Date.html#method-i-at_end_of_day","()",""],["at_end_of_day","DateTime","DateTime.html#method-i-at_end_of_day","()",""],["at_end_of_day","Time","Time.html#method-i-at_end_of_day","()",""],["at_end_of_hour","DateTime","DateTime.html#method-i-at_end_of_hour","()",""],["at_end_of_hour","Time","Time.html#method-i-at_end_of_hour","()",""],["at_end_of_minute","DateTime","DateTime.html#method-i-at_end_of_minute","()",""],["at_end_of_minute","Time","Time.html#method-i-at_end_of_minute","()",""],["at_end_of_month","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-at_end_of_month","()",""],["at_end_of_quarter","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-at_end_of_quarter","()",""],["at_end_of_week","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-at_end_of_week","(start_day = Date.beginning_of_week)",""],["at_end_of_year","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-at_end_of_year","()",""],["at_midday","Date","Date.html#method-i-at_midday","()",""],["at_midday","DateTime","DateTime.html#method-i-at_midday","()",""],["at_midday","Time","Time.html#method-i-at_midday","()",""],["at_middle_of_day","Date","Date.html#method-i-at_middle_of_day","()",""],["at_middle_of_day","DateTime","DateTime.html#method-i-at_middle_of_day","()",""],["at_middle_of_day","Time","Time.html#method-i-at_middle_of_day","()",""],["at_midnight","Date","Date.html#method-i-at_midnight","()",""],["at_midnight","DateTime","DateTime.html#method-i-at_midnight","()",""],["at_midnight","Time","Time.html#method-i-at_midnight","()",""],["at_noon","Date","Date.html#method-i-at_noon","()",""],["at_noon","DateTime","DateTime.html#method-i-at_noon","()",""],["at_noon","Time","Time.html#method-i-at_noon","()",""],["at_with_coercion","Time","Time.html#method-c-at_with_coercion","(*args, **kwargs)","<p>Layers additional behavior on Time.at so that ActiveSupport::TimeWithZone and DateTime instances can …\n"],["at_without_coercion","Time","Time.html#method-c-at_without_coercion","(*args, **kwargs)",""],["atomic_write","File","File.html#method-c-atomic_write","(file_name, temp_dir = dirname(file_name))","<p>Write to a file atomically. Useful for situations where you don&#39;t want other processes or threads …\n"],["attach_to","ActiveSupport::Subscriber","ActiveSupport/Subscriber.html#method-c-attach_to","(namespace, subscriber = new, notifier = ActiveSupport::Notifications, inherit_all: false)","<p>Attach the subscriber to a namespace.\n"],["attr_internal","Module","Module.html#method-i-attr_internal","(*attrs)",""],["attr_internal_accessor","Module","Module.html#method-i-attr_internal_accessor","(*attrs)","<p>Declares an attribute reader and writer backed by an internally-named instance variable.\n"],["attr_internal_define","Module","Module.html#method-i-attr_internal_define","(attr_name, type)",""],["attr_internal_ivar_name","Module","Module.html#method-i-attr_internal_ivar_name","(attr)",""],["attr_internal_reader","Module","Module.html#method-i-attr_internal_reader","(*attrs)","<p>Declares an attribute reader backed by an internally-named instance variable.\n"],["attr_internal_writer","Module","Module.html#method-i-attr_internal_writer","(*attrs)","<p>Declares an attribute writer backed by an internally-named instance variable.\n"],["attribute","ActiveSupport::CurrentAttributes","ActiveSupport/CurrentAttributes.html#method-c-attribute","(*names)","<p>Declares one or more attributes that will be given both class and instance accessor methods.\n"],["autoload","ActiveSupport::Autoload","ActiveSupport/Autoload.html#method-i-autoload","(const_name, path = @_at_path)",""],["autoload_at","ActiveSupport::Autoload","ActiveSupport/Autoload.html#method-i-autoload_at","(path)",""],["autoload_under","ActiveSupport::Autoload","ActiveSupport/Autoload.html#method-i-autoload_under","(path)",""],["autoloads","ActiveSupport::Autoload","ActiveSupport/Autoload.html#method-i-autoloads","()",""],["backend","ActiveSupport::XmlMini","ActiveSupport/XmlMini.html#method-i-backend","()",""],["backend=","ActiveSupport::XmlMini","ActiveSupport/XmlMini.html#method-i-backend-3D","(name)",""],["base36","SecureRandom","SecureRandom.html#method-c-base36","(n = 16)","<p>SecureRandom.base36 generates a random base36 string in lowercase.\n<p>The argument <em>n</em> specifies the length …\n"],["base58","SecureRandom","SecureRandom.html#method-c-base58","(n = 16)","<p>SecureRandom.base58 generates a random base58 string.\n<p>The argument <em>n</em> specifies the length of the random …\n"],["before","ActiveSupport::Duration","ActiveSupport/Duration.html#method-i-before","(time = ::Time.current)",""],["before?","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-before-3F","(date_or_time)","<p>Returns true if the date/time falls before <code>date_or_time</code>.\n"],["before_class_unload","ActiveSupport::Reloader","ActiveSupport/Reloader.html#method-c-before_class_unload","(*args, &block)","<p>Registers a callback that will run immediately before the classes are unloaded.\n"],["before_reset","ActiveSupport::CurrentAttributes","ActiveSupport/CurrentAttributes.html#method-c-before_reset","(&block)","<p>Calls this block before #reset is called on the instance. Used for resetting external collaborators that …\n"],["beginning_of_day","Date","Date.html#method-i-beginning_of_day","()","<p>Converts Date to a Time (or DateTime if necessary) with the time portion set to the beginning of the …\n"],["beginning_of_day","DateTime","DateTime.html#method-i-beginning_of_day","()","<p>Returns a new DateTime representing the start of the day (0:00).\n"],["beginning_of_day","Time","Time.html#method-i-beginning_of_day","()","<p>Returns a new Time representing the start of the day (0:00)\n"],["beginning_of_hour","DateTime","DateTime.html#method-i-beginning_of_hour","()","<p>Returns a new DateTime representing the start of the hour (hh:00:00).\n"],["beginning_of_hour","Time","Time.html#method-i-beginning_of_hour","()","<p>Returns a new Time representing the start of the hour (x:00)\n"],["beginning_of_minute","DateTime","DateTime.html#method-i-beginning_of_minute","()","<p>Returns a new DateTime representing the start of the minute (hh:mm:00).\n"],["beginning_of_minute","Time","Time.html#method-i-beginning_of_minute","()","<p>Returns a new Time representing the start of the minute (x:xx:00)\n"],["beginning_of_month","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-beginning_of_month","()","<p>Returns a new date/time at the start of the month.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">today</span> = <span class=\"ruby-constant\">Date</span>.<span class=\"ruby-identifier\">today</span> <span class=\"ruby-comment\"># =&gt; Thu, 18 Jun 2015</span>\n<span class=\"ruby-identifier\">today</span>.<span class=\"ruby-identifier\">beginning_of_month</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["beginning_of_quarter","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-beginning_of_quarter","()","<p>Returns a new date/time at the start of the quarter.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">today</span> = <span class=\"ruby-constant\">Date</span>.<span class=\"ruby-identifier\">today</span> <span class=\"ruby-comment\"># =&gt; Fri, 10 Jul 2015</span>\n<span class=\"ruby-identifier\">today</span>.<span class=\"ruby-identifier\">beginning_of_quarter</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["beginning_of_week","Date","Date.html#method-c-beginning_of_week","()","<p>Returns the week start (e.g. :monday) for the current request, if this has been set (via Date.beginning_of_week= …\n"],["beginning_of_week","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-beginning_of_week","(start_day = Date.beginning_of_week)","<p>Returns a new date/time representing the start of this week on the given day. Week is assumed to start …\n"],["beginning_of_week=","Date","Date.html#method-c-beginning_of_week-3D","(week_start)","<p>Sets <code>Date.beginning_of_week</code> to a week start (e.g. :monday) for current request/thread.\n<p>This method accepts …\n"],["beginning_of_year","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-beginning_of_year","()","<p>Returns a new date/time at the beginning of the year.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">today</span> = <span class=\"ruby-constant\">Date</span>.<span class=\"ruby-identifier\">today</span> <span class=\"ruby-comment\"># =&gt; Fri, 10 Jul 2015</span>\n<span class=\"ruby-identifier\">today</span>.<span class=\"ruby-identifier\">beginning_of_year</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["behavior","ActiveSupport::Deprecation::Behavior","ActiveSupport/Deprecation/Behavior.html#method-i-behavior","()","<p>Returns the current behavior or if one isn&#39;t set, defaults to <code>:stderr</code>.\n"],["behavior=","ActiveSupport::Deprecation::Behavior","ActiveSupport/Deprecation/Behavior.html#method-i-behavior-3D","(behavior)","<p>Sets the behavior to the specified value. Can be a single value, array, or an object that responds to …\n"],["benchmark","ActiveSupport::Benchmarkable","ActiveSupport/Benchmarkable.html#method-i-benchmark","(message = \"Benchmarking\", options = {})","<p>Allows you to measure the execution time of a block in a template and records the result to the log. …\n"],["between?","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-between-3F","(min, max)","<p>Returns true if the current object&#39;s time is within the specified <code>min</code> and <code>max</code> time.\n"],["blank?","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-blank-3F","()","<p>An instance of ActiveSupport::TimeWithZone is never blank\n"],["blank?","FalseClass","FalseClass.html#method-i-blank-3F","()","<p><code>false</code> is blank:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">false</span>.<span class=\"ruby-identifier\">blank?</span> <span class=\"ruby-comment\"># =&gt; true</span>\n</pre>\n<p>@return [true]\n"],["blank?","NilClass","NilClass.html#method-i-blank-3F","()","<p><code>nil</code> is blank:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">nil</span>.<span class=\"ruby-identifier\">blank?</span> <span class=\"ruby-comment\"># =&gt; true</span>\n</pre>\n<p>@return [true]\n"],["blank?","Object","Object.html#method-i-blank-3F","()","<p>An object is blank if it&#39;s false, empty, or a whitespace string. For example, <code>nil</code>, &#39;&#39;, &#39; …\n"],["blank?","String","String.html#method-i-blank-3F","()","<p>A string is blank if it&#39;s empty or contains whitespaces only:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&#39;&#39;</span>.<span class=\"ruby-identifier\">blank?</span>       <span class=\"ruby-comment\"># =&gt; true</span>\n<span class=\"ruby-string\">&#39;   &#39;</span>.<span class=\"ruby-identifier\">blank?</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["blank?","TrueClass","TrueClass.html#method-i-blank-3F","()","<p><code>true</code> is not blank:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">true</span>.<span class=\"ruby-identifier\">blank?</span> <span class=\"ruby-comment\"># =&gt; false</span>\n</pre>\n<p>@return [false]\n"],["build","ActiveSupport::Callbacks::Filters::After","ActiveSupport/Callbacks/Filters/After.html#method-c-build","(callback_sequence, user_callback, user_conditions, chain_config)",""],["build","ActiveSupport::Callbacks::Filters::Before","ActiveSupport/Callbacks/Filters/Before.html#method-c-build","(callback_sequence, user_callback, user_conditions, chain_config, filter, name)",""],["build","ActiveSupport::Duration","ActiveSupport/Duration.html#method-c-build","(value)","<p>Creates a new Duration from a seconds value that is converted to the individual parts:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ActiveSupport</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Duration</span>.<span class=\"ruby-identifier\">build</span>(<span class=\"ruby-value\">31556952</span>).<span class=\"ruby-identifier\">parts</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["build_event","ActiveSupport::Notifications::Fanout::Subscribers::EventObject","ActiveSupport/Notifications/Fanout/Subscribers/EventObject.html#method-i-build_event","(name, id, payload)",""],["build_redis_client","ActiveSupport::Cache::RedisCacheStore","ActiveSupport/Cache/RedisCacheStore.html#method-c-build_redis_client","(url:, **redis_options)",""],["build_redis_distributed_client","ActiveSupport::Cache::RedisCacheStore","ActiveSupport/Cache/RedisCacheStore.html#method-c-build_redis_distributed_client","(urls:, **redis_options)",""],["build_rotation","ActiveSupport::Messages::Rotator::Encryptor","ActiveSupport/Messages/Rotator/Encryptor.html#method-i-build_rotation","(secret = @secret, sign_secret = @sign_secret, options)",""],["build_rotation","ActiveSupport::Messages::Rotator::Verifier","ActiveSupport/Messages/Rotator/Verifier.html#method-i-build_rotation","(secret = @secret, options)",""],["build_rotation","ActiveSupport::SecureCompareRotator","ActiveSupport/SecureCompareRotator.html#method-i-build_rotation","(previous_value, _options)",""],["busy_for_exclusive?","ActiveSupport::Concurrency::ShareLock","ActiveSupport/Concurrency/ShareLock.html#method-i-busy_for_exclusive-3F","(purpose)","<p>Must be called within synchronize\n"],["busy_for_sharing?","ActiveSupport::Concurrency::ShareLock","ActiveSupport/Concurrency/ShareLock.html#method-i-busy_for_sharing-3F","(purpose)",""],["bypass_local_cache","ActiveSupport::Cache::Strategy::LocalCache","ActiveSupport/Cache/Strategy/LocalCache.html#method-i-bypass_local_cache","()",""],["byte","Numeric","Numeric.html#method-i-byte","()",""],["bytes","Numeric","Numeric.html#method-i-bytes","()","<p>Enables the use of byte calculations and declarations, like 45.bytes + 2.6.megabytes\n\n<pre class=\"ruby\"><span class=\"ruby-value\">2</span>.<span class=\"ruby-identifier\">bytes</span> <span class=\"ruby-comment\"># =&gt; 2</span>\n</pre>\n"],["cached_size","ActiveSupport::Cache::MemoryStore","ActiveSupport/Cache/MemoryStore.html#method-i-cached_size","(key, payload)",""],["calculate_total_seconds","ActiveSupport::Duration","ActiveSupport/Duration.html#method-c-calculate_total_seconds","(parts)",""],["call","ActiveSupport::Callbacks::Conditionals::Value","ActiveSupport/Callbacks/Conditionals/Value.html#method-i-call","(target, value)",""],["call","ActiveSupport::Logger::SimpleFormatter","ActiveSupport/Logger/SimpleFormatter.html#method-i-call","(severity, timestamp, progname, msg)","<p>This method is invoked when a log event occurs\n"],["camelcase","String","String.html#method-i-camelcase","(first_letter = :upper)",""],["camelize","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-camelize","(term, uppercase_first_letter = true)","<p>Converts strings to UpperCamelCase. If the <code>uppercase_first_letter</code> parameter is set to false, then produces …\n"],["camelize","String","String.html#method-i-camelize","(first_letter = :upper)","<p>By default, <code>camelize</code> converts strings to UpperCamelCase. If the argument to camelize is set to <code>:lower</code> …\n"],["cast_backend_name_to_module","ActiveSupport::XmlMini","ActiveSupport/XmlMini.html#method-i-cast_backend_name_to_module","(name)",""],["cattr_accessor","Module","Module.html#method-i-cattr_accessor","(*syms, instance_reader: true, instance_writer: true, instance_accessor: true, default: nil, &blk)",""],["cattr_reader","Module","Module.html#method-i-cattr_reader","(*syms, instance_reader: true, instance_accessor: true, default: nil, location: nil)",""],["cattr_writer","Module","Module.html#method-i-cattr_writer","(*syms, instance_writer: true, instance_accessor: true, default: nil, location: nil)",""],["cdata_block","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-cdata_block","(string)",""],["ceil","Time","Time.html#method-i-ceil","(precision = 0)",""],["change","ActiveSupport::EncryptedFile","ActiveSupport/EncryptedFile.html#method-i-change","(&block)",""],["change","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-change","(options)","<p>Returns a new <code>ActiveSupport::TimeWithZone</code> where one or more of the elements have been changed according …\n"],["change","Date","Date.html#method-i-change","(options)","<p>Returns a new Date where one or more of the elements have been changed according to the <code>options</code> parameter. …\n"],["change","DateTime","DateTime.html#method-i-change","(options)","<p>Returns a new DateTime where one or more of the elements have been changed according to the <code>options</code> parameter. …\n"],["change","Time","Time.html#method-i-change","(options)","<p>Returns a new Time where one or more of the elements have been changed according to the <code>options</code> parameter. …\n"],["characters","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-characters","(string)",""],["chars","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-chars","(string)",""],["check_key_length","ActiveSupport::EncryptedFile","ActiveSupport/EncryptedFile.html#method-i-check_key_length","()",""],["civil_from_format","DateTime","DateTime.html#method-c-civil_from_format","(utc_or_local, year, month = 1, day = 1, hour = 0, min = 0, sec = 0)","<p>Returns DateTime with local offset for given year if format is local else offset is zero.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DateTime</span>.<span class=\"ruby-identifier\">civil_from_format</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["class","ActiveSupport::Deprecation::DeprecatedConstantProxy","ActiveSupport/Deprecation/DeprecatedConstantProxy.html#method-i-class","()","<p>Returns the class of the new constant.\n\n<pre>PLANETS_POST_2006 = %w(mercury venus earth mars jupiter saturn ...</pre>\n"],["class_attribute","Class","Class.html#method-i-class_attribute","(*attrs, instance_accessor: true, instance_reader: instance_accessor, instance_writer: instance_accessor, instance_predicate: true, default: nil)","<p>Declare a class-level attribute whose value is inheritable by subclasses. Subclasses can change their …\n"],["class_eval","Kernel","Kernel.html#method-i-class_eval","(*args, &block)","<p>class_eval on an object acts like singleton_class.class_eval.\n"],["class_methods","ActiveSupport::Concern","ActiveSupport/Concern.html#method-i-class_methods","(&class_methods_module_definition)","<p>Define class methods from given block. You can define private class methods as well.\n\n<pre>module Example\n  ...</pre>\n"],["classify","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-classify","(table_name)","<p>Creates a class name from a plural table name like Rails does for table names to models. Note that this …\n"],["classify","String","String.html#method-i-classify","()","<p>Creates a class name from a plural table name like Rails does for table names to models. Note that this …\n"],["clean","ActiveSupport::BacktraceCleaner","ActiveSupport/BacktraceCleaner.html#method-i-clean","(backtrace, kind = :silent)","<p>Returns the backtrace after all filters and silencers have been run against it. Filters run first, then …\n"],["cleanup","ActiveSupport::Cache::FileStore","ActiveSupport/Cache/FileStore.html#method-i-cleanup","(options = nil)","<p>Preemptively iterates through all stored keys and removes the ones which have expired.\n"],["cleanup","ActiveSupport::Cache::MemoryStore","ActiveSupport/Cache/MemoryStore.html#method-i-cleanup","(options = nil)","<p>Preemptively iterates through all stored keys and removes the ones which have expired.\n"],["cleanup","ActiveSupport::Cache::NullStore","ActiveSupport/Cache/NullStore.html#method-i-cleanup","(options = nil)",""],["cleanup","ActiveSupport::Cache::RedisCacheStore","ActiveSupport/Cache/RedisCacheStore.html#method-i-cleanup","(options = nil)","<p>Cache Store API implementation.\n<p>Removes expired entries. Handled natively by Redis least-recently-/ least-frequently-used …\n"],["cleanup","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-cleanup","(options = nil)","<p>Cleanups the cache by removing expired entries.\n<p>Options are passed to the underlying cache implementation. …\n"],["clear","ActiveSupport::Cache::FileStore","ActiveSupport/Cache/FileStore.html#method-i-clear","(options = nil)","<p>Deletes all items from the cache. In this case it deletes all the entries in the specified file store …\n"],["clear","ActiveSupport::Cache::MemCacheStore","ActiveSupport/Cache/MemCacheStore.html#method-i-clear","(options = nil)","<p>Clear the entire cache on all memcached servers. This method should be used with care when shared cache …\n"],["clear","ActiveSupport::Cache::MemoryStore","ActiveSupport/Cache/MemoryStore.html#method-i-clear","(options = nil)","<p>Delete all data stored in a given cache store.\n"],["clear","ActiveSupport::Cache::NullStore","ActiveSupport/Cache/NullStore.html#method-i-clear","(options = nil)",""],["clear","ActiveSupport::Cache::RedisCacheStore","ActiveSupport/Cache/RedisCacheStore.html#method-i-clear","(options = nil)","<p>Clear the entire cache on all Redis servers. Safe to use on shared servers if the cache is namespaced. …\n"],["clear","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-clear","(options = nil)","<p>Clears the entire cache. Be careful with this method since it could affect other processes if shared …\n"],["clear","ActiveSupport::Cache::Strategy::LocalCache::LocalStore","ActiveSupport/Cache/Strategy/LocalCache/LocalStore.html#method-i-clear","(options = nil)",""],["clear","ActiveSupport::DescendantsTracker","ActiveSupport/DescendantsTracker.html#method-c-clear","()",""],["clear","ActiveSupport::Inflector::Inflections","ActiveSupport/Inflector/Inflections.html#method-i-clear","(scope = :all)","<p>Clears the loaded inflections within a given scope (default is <code>:all</code>). Give the scope as a symbol of the …\n"],["clear!","ActiveSupport::Dependencies::ClassCache","ActiveSupport/Dependencies/ClassCache.html#method-i-clear-21","()",""],["clone_empty","ActiveSupport::SafeBuffer","ActiveSupport/SafeBuffer.html#method-i-clone_empty","()",""],["close","ActiveSupport::Gzip::Stream","ActiveSupport/Gzip/Stream.html#method-i-close","()",""],["color","ActiveSupport::LogSubscriber","ActiveSupport/LogSubscriber.html#method-i-color","(text, color, bold = false)","<p>Set color by using a symbol or one of the defined constants. If a third option is set to <code>true</code>, it also …\n"],["compact","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-compact","()",""],["compact","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-compact","()",""],["compact_blank","Enumerable","Enumerable.html#method-i-compact_blank","()","<p>Returns a new <code>Array</code> without the blank items. Uses Object#blank? for determining if an item is blank. …\n"],["compact_blank!","Hash","Hash.html#method-i-compact_blank-21","()","<p>Removes all blank values from the <code>Hash</code> in place and returns self. Uses Object#blank? for determining …\n"],["comparable_time","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-comparable_time","()",""],["compare_with_coercion","Date","Date.html#method-i-compare_with_coercion","(other)","<p>Allow Date to be compared with Time by converting to DateTime and relying on the &lt;=&gt; from there. …\n"],["compare_with_coercion","Time","Time.html#method-i-compare_with_coercion","(other)","<p>Layers additional behavior on Time#&lt;=&gt; so that DateTime and ActiveSupport::TimeWithZone instances …\n"],["compare_without_coercion","Date","Date.html#method-i-compare_without_coercion","(other)",""],["compare_without_coercion","Time","Time.html#method-i-compare_without_coercion","(other)",""],["compile_ext","ActiveSupport::FileUpdateChecker","ActiveSupport/FileUpdateChecker.html#method-i-compile_ext","(array)",""],["compile_glob","ActiveSupport::FileUpdateChecker","ActiveSupport/FileUpdateChecker.html#method-i-compile_glob","(hash)",""],["compile_methods!","ActiveSupport::Configurable::Configuration","ActiveSupport/Configurable/Configuration.html#method-i-compile_methods-21","()",""],["compile_methods!","ActiveSupport::Configurable::Configuration","ActiveSupport/Configurable/Configuration.html#method-c-compile_methods-21","(keys)","<p>Compiles reader methods so we don&#39;t have to go through method_missing.\n"],["compiled_filter","ActiveSupport::ParameterFilter","ActiveSupport/ParameterFilter.html#method-i-compiled_filter","()",""],["complete!","ActiveSupport::ExecutionWrapper","ActiveSupport/ExecutionWrapper.html#method-i-complete-21","()","<p>Complete this in-flight execution. This method <strong>must</strong> be called exactly once on the result of any call …\n"],["compose","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-compose","()","<p>Performs composition on all the characters.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&#39;é&#39;</span>.<span class=\"ruby-identifier\">length</span>                       <span class=\"ruby-comment\"># =&gt; 3</span>\n<span class=\"ruby-string\">&#39;é&#39;</span>.<span class=\"ruby-identifier\">mb_chars</span>.<span class=\"ruby-identifier\">compose</span>.<span class=\"ruby-identifier\">to_s</span>.<span class=\"ruby-identifier\">length</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["compose","ActiveSupport::Multibyte::Unicode","ActiveSupport/Multibyte/Unicode.html#method-i-compose","(codepoints)","<p>Compose decomposed characters to the composed form.\n"],["compress","ActiveSupport::Gzip","ActiveSupport/Gzip.html#method-c-compress","(source, level = Zlib::DEFAULT_COMPRESSION, strategy = Zlib::DEFAULT_STRATEGY)","<p>Compresses a string using gzip.\n"],["compute_attributes","ActiveSupport::CurrentAttributes","ActiveSupport/CurrentAttributes.html#method-i-compute_attributes","(keys)",""],["concat","ActiveSupport::SafeBuffer","ActiveSupport/SafeBuffer.html#method-i-concat","(value)",""],["concern","Kernel","Kernel.html#method-i-concern","(topic, &module_definition)","<p>A shortcut to define a toplevel concern, not within a module.\n<p>See Module::Concerning for more.\n"],["concern","Module::Concerning","Module/Concerning.html#method-i-concern","(topic, &module_definition)","<p>A low-cruft shortcut to define a concern.\n\n<pre>concern :EventTracking do\n  ...\nend</pre>\n<p>is equivalent to\n"],["concerning","Module::Concerning","Module/Concerning.html#method-i-concerning","(topic, prepend: false, &block)","<p>Define a new concern and mix it in.\n"],["conditional","ActiveSupport::Callbacks::Filters::After","ActiveSupport/Callbacks/Filters/After.html#method-c-conditional","(callback_sequence, user_callback, user_conditions)",""],["config","ActiveSupport::Configurable","ActiveSupport/Configurable.html#method-i-config","()","<p>Reads and writes attributes from a configuration <code>OrderedOptions</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&quot;active_support/configurable&quot;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["config","ActiveSupport::Configurable::ClassMethods","ActiveSupport/Configurable/ClassMethods.html#method-i-config","()",""],["config","ActiveSupport::EncryptedConfiguration","ActiveSupport/EncryptedConfiguration.html#method-i-config","()",""],["config_accessor","ActiveSupport::Configurable::ClassMethods","ActiveSupport/Configurable/ClassMethods.html#method-i-config_accessor","(*names, instance_reader: true, instance_writer: true, instance_accessor: true)","<p>Allows you to add shortcut so that you don&#39;t have to refer to attribute through config. Also look …\n"],["configure","ActiveSupport::Configurable::ClassMethods","ActiveSupport/Configurable/ClassMethods.html#method-i-configure","()",""],["const_missing","ActiveSupport::Deprecation::DeprecatedConstantAccessor","ActiveSupport/Deprecation/DeprecatedConstantAccessor.html#method-i-const_missing","(missing_const_name)",""],["const_missing","ActiveSupport::Deprecation::DeprecatedConstantProxy","ActiveSupport/Deprecation/DeprecatedConstantProxy.html#method-i-const_missing","(name)",""],["const_regexp","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-const_regexp","(camel_cased_word)","<p>Mounts a regular expression, returned as a string to ease interpolation, that will match part by part …\n"],["constantize","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-constantize","(camel_cased_word)","<p>Tries to find a constant with the name specified in the argument string.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">constantize</span>(<span class=\"ruby-string\">&#39;Module&#39;</span>)   <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["constantize","String","String.html#method-i-constantize","()","<p><code>constantize</code> tries to find a declared constant with the name specified in the string. It raises a NameError …\n"],["constantize_rescue_handler_class","ActiveSupport::Rescuable::ClassMethods","ActiveSupport/Rescuable/ClassMethods.html#method-i-constantize_rescue_handler_class","(class_or_name)",""],["convert_dates_from","ActiveSupport::JSON","ActiveSupport/JSON.html#method-c-convert_dates_from","(data)",""],["convert_key","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-convert_key","(key)",""],["convert_key","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-convert_key","(key)",""],["convert_value","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-convert_value","(value, conversion: nil)",""],["convert_value","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-convert_value","(value, conversion: nil)",""],["copy_time_to","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-copy_time_to","(other)",""],["country_zones","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-c-country_zones","(country_code)","<p>A convenience method for returning a collection of TimeZone objects for time zones in the country specified …\n"],["cover?","ActiveSupport::CompareWithRange","ActiveSupport/CompareWithRange.html#method-i-cover-3F","(value)","<p>Extends the default Range#cover? to support range comparisons.\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">5</span>).<span class=\"ruby-identifier\">cover?</span>(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">5</span>)  <span class=\"ruby-comment\"># =&gt; true</span>\n(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">5</span>).<span class=\"ruby-identifier\">cover?</span>(<span class=\"ruby-value\">2</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">3</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["cpu_time","ActiveSupport::Notifications::Event","ActiveSupport/Notifications/Event.html#method-i-cpu_time","()","<p>Returns the CPU time (in milliseconds) passed since the call to <code>start!</code> and the call to <code>finish!</code>\n"],["create","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-c-create","(name)",""],["current","Date","Date.html#method-c-current","()","<p>Returns Time.zone.today when <code>Time.zone</code> or <code>config.time_zone</code> are set, otherwise just returns Date.today …\n"],["current","DateTime","DateTime.html#method-c-current","()","<p>Returns <code>Time.zone.now.to_datetime</code> when <code>Time.zone</code> or <code>config.time_zone</code> are set, otherwise returns <code>Time.now.to_datetime</code> …\n"],["current","Time","Time.html#method-c-current","()","<p>Returns <code>Time.zone.now</code> when <code>Time.zone</code> or <code>config.time_zone</code> are set, otherwise just returns <code>Time.now</code>.\n"],["current_hash","ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-current_hash","()",""],["current_hash","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-current_hash","()",""],["current_instances","ActiveSupport::CurrentAttributes","ActiveSupport/CurrentAttributes.html#method-c-current_instances","()",""],["current_instances_key","ActiveSupport::CurrentAttributes","ActiveSupport/CurrentAttributes.html#method-c-current_instances_key","()",""],["current_thread_backend","ActiveSupport::XmlMini","ActiveSupport/XmlMini.html#method-i-current_thread_backend","()",""],["current_thread_backend=","ActiveSupport::XmlMini","ActiveSupport/XmlMini.html#method-i-current_thread_backend-3D","(name)",""],["dasherize","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-dasherize","(underscored_word)","<p>Replaces underscores with dashes in the string.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">dasherize</span>(<span class=\"ruby-string\">&#39;puni_puni&#39;</span>) <span class=\"ruby-comment\"># =&gt; &quot;puni-puni&quot;</span>\n</pre>\n"],["dasherize","String","String.html#method-i-dasherize","()","<p>Replaces underscores with dashes in the string.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&#39;puni_puni&#39;</span>.<span class=\"ruby-identifier\">dasherize</span> <span class=\"ruby-comment\"># =&gt; &quot;puni-puni&quot;</span>\n</pre>\n<p>See ActiveSupport::Inflector.dasherize …\n"],["day","Numeric","Numeric.html#method-i-day","()",""],["days","Numeric","Numeric.html#method-i-days","()","<p>Returns a Duration instance matching the number of days provided.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">2</span>.<span class=\"ruby-identifier\">days</span> <span class=\"ruby-comment\"># =&gt; 2 days</span>\n</pre>\n"],["days_ago","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-days_ago","(days)","<p>Returns a new date/time the specified number of days ago.\n"],["days_in_month","Time","Time.html#method-c-days_in_month","(month, year = current.year)","<p>Returns the number of days in the given month. If no year is specified, it will use the current year. …\n"],["days_in_year","Time","Time.html#method-c-days_in_year","(year = current.year)","<p>Returns the number of days in the given year. If no year is specified, it will use the current year. …\n"],["days_since","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-days_since","(days)","<p>Returns a new date/time the specified number of days in the future.\n"],["days_span","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-days_span","(day)",""],["days_to_week_start","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-days_to_week_start","(start_day = Date.beginning_of_week)","<p>Returns the number of days to the start of the week on the given day. Week is assumed to start on <code>start_day</code> …\n"],["decode","ActiveSupport::JSON","ActiveSupport/JSON.html#method-c-decode","(json)","<p>Parses a JSON string (JavaScript Object Notation) into a hash. See www.json.org for more info.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ActiveSupport</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">JSON</span>.<span class=\"ruby-identifier\">decode</span>(<span class=\"ruby-string\">&quot;{\\&quot;team\\&quot;:\\&quot;rails\\&quot;,\\&quot;players\\&quot;:\\&quot;36\\&quot;}&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["decode","ActiveSupport::MessageVerifier","ActiveSupport/MessageVerifier.html#method-i-decode","(data)",""],["decompose","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-decompose","()","<p>Performs canonical decomposition on all the characters.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&#39;é&#39;</span>.<span class=\"ruby-identifier\">length</span>                         <span class=\"ruby-comment\"># =&gt; 2</span>\n<span class=\"ruby-string\">&#39;é&#39;</span>.<span class=\"ruby-identifier\">mb_chars</span>.<span class=\"ruby-identifier\">decompose</span>.<span class=\"ruby-identifier\">to_s</span>.<span class=\"ruby-identifier\">length</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["decompose","ActiveSupport::Multibyte::Unicode","ActiveSupport/Multibyte/Unicode.html#method-i-decompose","(type, codepoints)","<p>Decompose composed characters to the decomposed form.\n"],["decompress","ActiveSupport::Gzip","ActiveSupport/Gzip.html#method-c-decompress","(source)","<p>Decompresses a gzipped string.\n"],["deconstantize","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-deconstantize","(path)","<p>Removes the rightmost segment from the constant expression in the string.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">deconstantize</span>(<span class=\"ruby-string\">&#39;Net::HTTP&#39;</span>)  <span class=\"ruby-operator\">...</span>\n</pre>\n"],["deconstantize","String","String.html#method-i-deconstantize","()","<p>Removes the rightmost segment from the constant expression in the string.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&#39;Net::HTTP&#39;</span>.<span class=\"ruby-identifier\">deconstantize</span>   <span class=\"ruby-operator\">...</span>\n</pre>\n"],["decrement","ActiveSupport::Cache::FileStore","ActiveSupport/Cache/FileStore.html#method-i-decrement","(name, amount = 1, options = nil)","<p>Decrements an already existing integer value that is stored in the cache. If the key is not found nothing …\n"],["decrement","ActiveSupport::Cache::MemCacheStore","ActiveSupport/Cache/MemCacheStore.html#method-i-decrement","(name, amount = 1, options = nil)","<p>Decrement a cached value. This method uses the memcached decr atomic operator and can only be used on …\n"],["decrement","ActiveSupport::Cache::MemoryStore","ActiveSupport/Cache/MemoryStore.html#method-i-decrement","(name, amount = 1, options = nil)","<p>Decrement an integer value in the cache.\n"],["decrement","ActiveSupport::Cache::NullStore","ActiveSupport/Cache/NullStore.html#method-i-decrement","(name, amount = 1, options = nil)",""],["decrement","ActiveSupport::Cache::RedisCacheStore","ActiveSupport/Cache/RedisCacheStore.html#method-i-decrement","(name, amount = 1, options = nil)","<p>Cache Store API implementation.\n<p>Decrement a cached value. This method uses the Redis decr atomic operator …\n"],["decrement","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-decrement","(name, amount = 1, options = nil)","<p>Decrements an integer value in the cache.\n<p>Options are passed to the underlying cache implementation.\n<p>Some …\n"],["decrypt","ActiveSupport::EncryptedFile","ActiveSupport/EncryptedFile.html#method-i-decrypt","(contents)",""],["decrypt_and_verify","ActiveSupport::MessageEncryptor","ActiveSupport/MessageEncryptor.html#method-i-decrypt_and_verify","(data, purpose: nil, **)","<p>Decrypt and verify a message. We need to verify the message in order to avoid padding attacks. Reference: …\n"],["decrypt_and_verify","ActiveSupport::Messages::Rotator::Encryptor","ActiveSupport/Messages/Rotator/Encryptor.html#method-i-decrypt_and_verify","(*args, on_rotation: @on_rotation, **options)",""],["deep_dup","Array","Array.html#method-i-deep_dup","()","<p>Returns a deep copy of array.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">array</span> = [<span class=\"ruby-value\">1</span>, [<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>]]\n<span class=\"ruby-identifier\">dup</span>   = <span class=\"ruby-identifier\">array</span>.<span class=\"ruby-identifier\">deep_dup</span>\n<span class=\"ruby-identifier\">dup</span>[<span class=\"ruby-value\">1</span>][<span class=\"ruby-value\">2</span>] = <span class=\"ruby-value\">4</span>\n\n<span class=\"ruby-identifier\">array</span>[<span class=\"ruby-value\">1</span>][<span class=\"ruby-value\">2</span>] <span class=\"ruby-comment\"># ...</span>\n</pre>\n"],["deep_dup","Hash","Hash.html#method-i-deep_dup","()","<p>Returns a deep copy of hash.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">hash</span> = { <span class=\"ruby-value\">a:</span> { <span class=\"ruby-value\">b:</span> <span class=\"ruby-string\">&#39;b&#39;</span> } }\n<span class=\"ruby-identifier\">dup</span>  = <span class=\"ruby-identifier\">hash</span>.<span class=\"ruby-identifier\">deep_dup</span>\n<span class=\"ruby-identifier\">dup</span>[<span class=\"ruby-value\">:a</span>][<span class=\"ruby-value\">:c</span>] = <span class=\"ruby-string\">&#39;c&#39;</span>\n\n<span class=\"ruby-identifier\">hash</span>[<span class=\"ruby-value\">:a</span>][<span class=\"ruby-value\">:c</span>] <span class=\"ruby-operator\">...</span>\n</pre>\n"],["deep_dup","Object","Object.html#method-i-deep_dup","()","<p>Returns a deep copy of object if it&#39;s duplicable. If it&#39;s not duplicable, returns <code>self</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">object</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["deep_merge","Hash","Hash.html#method-i-deep_merge","(other_hash, &block)","<p>Returns a new hash with <code>self</code> and <code>other_hash</code> merged recursively.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h1</span> = { <span class=\"ruby-value\">a:</span> <span class=\"ruby-keyword\">true</span>, <span class=\"ruby-value\">b:</span> { <span class=\"ruby-value\">c:</span> [<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>] } } <span class=\"ruby-operator\">...</span>\n</pre>\n"],["deep_merge!","Hash","Hash.html#method-i-deep_merge-21","(other_hash, &block)","<p>Same as <code>deep_merge</code>, but modifies <code>self</code>.\n"],["deep_stringify_keys","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-deep_stringify_keys","()",""],["deep_stringify_keys","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-deep_stringify_keys","()",""],["deep_stringify_keys","Hash","Hash.html#method-i-deep_stringify_keys","()","<p>Returns a new hash with all keys converted to strings. This includes the keys from the root hash and …\n"],["deep_stringify_keys!","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-deep_stringify_keys-21","()",""],["deep_stringify_keys!","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-deep_stringify_keys-21","()",""],["deep_stringify_keys!","Hash","Hash.html#method-i-deep_stringify_keys-21","()","<p>Destructively converts all keys to strings. This includes the keys from the root hash and from all nested …\n"],["deep_symbolize_keys","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-deep_symbolize_keys","()",""],["deep_symbolize_keys","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-deep_symbolize_keys","()",""],["deep_symbolize_keys","Hash","Hash.html#method-i-deep_symbolize_keys","()","<p>Returns a new hash with all keys converted to symbols, as long as they respond to <code>to_sym</code>. This includes …\n"],["deep_symbolize_keys!","Hash","Hash.html#method-i-deep_symbolize_keys-21","()","<p>Destructively converts all keys to symbols, as long as they respond to <code>to_sym</code>. This includes the keys …\n"],["deep_transform_keys","Hash","Hash.html#method-i-deep_transform_keys","(&block)","<p>Returns a new hash with all keys converted by the block operation. This includes the keys from the root …\n"],["deep_transform_keys!","Hash","Hash.html#method-i-deep_transform_keys-21","(&block)","<p>Destructively converts all keys by using the block operation. This includes the keys from the root hash …\n"],["deep_transform_values","Hash","Hash.html#method-i-deep_transform_values","(&block)","<p>Returns a new hash with all values converted by the block operation. This includes the values from the …\n"],["deep_transform_values!","Hash","Hash.html#method-i-deep_transform_values-21","(&block)","<p>Destructively converts all values by using the block operation. This includes the values from the root …\n"],["default","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-default","(*args)","<p>Same as <code>Hash#default</code> where the key passed as argument can be either a string or a symbol:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">hash</span> = <span class=\"ruby-constant\">ActiveSupport</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HashWithIndifferentAccess</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">1</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["default","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-default","(*args)","<p>Same as <code>Hash#default</code> where the key passed as argument can be either a string or a symbol:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">hash</span> = <span class=\"ruby-constant\">ActiveSupport</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HashWithIndifferentAccess</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">1</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["default_inspect","Date","Date.html#method-i-default_inspect","()",""],["default_inspect","DateTime","DateTime.html#method-i-default_inspect","()",""],["default_normalization_form","ActiveSupport::Multibyte::Unicode","ActiveSupport/Multibyte/Unicode.html#method-i-default_normalization_form","()",""],["default_normalization_form=","ActiveSupport::Multibyte::Unicode","ActiveSupport/Multibyte/Unicode.html#method-i-default_normalization_form-3D","(_)",""],["define_acronym_regex_patterns","ActiveSupport::Inflector::Inflections","ActiveSupport/Inflector/Inflections.html#method-i-define_acronym_regex_patterns","()",""],["define_callbacks","ActiveSupport::Callbacks::ClassMethods","ActiveSupport/Callbacks/ClassMethods.html#method-i-define_callbacks","(*names)","<p>Define sets of events in the object life cycle that support callbacks.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">define_callbacks</span> <span class=\"ruby-value\">:validate</span>\n<span class=\"ruby-identifier\">define_callbacks</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["delegate","Module","Module.html#method-i-delegate","(*methods, to: nil, prefix: nil, allow_nil: nil, private: nil)","<p>Provides a <code>delegate</code> class method to easily expose contained objects&#39; public methods as your own. …\n"],["delegate_missing_to","Module","Module.html#method-i-delegate_missing_to","(target, allow_nil: nil)","<p>When building decorators, a common pattern may emerge:\n\n<pre>class Partition\n  def initialize(event)\n    @event ...</pre>\n"],["delete","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-delete","(name, options = nil)","<p>Deletes an entry in the cache. Returns <code>true</code> if an entry is deleted.\n<p>Options are passed to the underlying …\n"],["delete","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-delete","(key)","<p>Removes the specified key from the hash.\n"],["delete","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-delete","(key)","<p>Removes the specified key from the hash.\n"],["delete","ActiveSupport::Inflector::Inflections::Uncountables","ActiveSupport/Inflector/Inflections/Uncountables.html#method-i-delete","(entry)",""],["delete_empty_directories","ActiveSupport::Cache::FileStore","ActiveSupport/Cache/FileStore.html#method-i-delete_empty_directories","(dir)","<p>Delete empty directories in the cache.\n"],["delete_entry","ActiveSupport::Cache::FileStore","ActiveSupport/Cache/FileStore.html#method-i-delete_entry","(key, **options)",""],["delete_entry","ActiveSupport::Cache::MemCacheStore","ActiveSupport/Cache/MemCacheStore.html#method-i-delete_entry","(key, **options)","<p>Delete an entry from the cache.\n"],["delete_entry","ActiveSupport::Cache::MemoryStore","ActiveSupport/Cache/MemoryStore.html#method-i-delete_entry","(key, **options)",""],["delete_entry","ActiveSupport::Cache::NullStore","ActiveSupport/Cache/NullStore.html#method-i-delete_entry","(key, **options)",""],["delete_entry","ActiveSupport::Cache::RedisCacheStore","ActiveSupport/Cache/RedisCacheStore.html#method-i-delete_entry","(key, options)","<p>Delete an entry from the cache.\n"],["delete_entry","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-delete_entry","(key, **options)","<p>Deletes an entry from the cache implementation. Subclasses must implement this method.\n"],["delete_entry","ActiveSupport::Cache::Strategy::LocalCache","ActiveSupport/Cache/Strategy/LocalCache.html#method-i-delete_entry","(key, **options)",""],["delete_entry","ActiveSupport::Cache::Strategy::LocalCache::LocalStore","ActiveSupport/Cache/Strategy/LocalCache/LocalStore.html#method-i-delete_entry","(key, **options)",""],["delete_matched","ActiveSupport::Cache::FileStore","ActiveSupport/Cache/FileStore.html#method-i-delete_matched","(matcher, options = nil)",""],["delete_matched","ActiveSupport::Cache::MemoryStore","ActiveSupport/Cache/MemoryStore.html#method-i-delete_matched","(matcher, options = nil)","<p>Deletes cache entries if the cache key matches a given pattern.\n"],["delete_matched","ActiveSupport::Cache::NullStore","ActiveSupport/Cache/NullStore.html#method-i-delete_matched","(matcher, options = nil)",""],["delete_matched","ActiveSupport::Cache::RedisCacheStore","ActiveSupport/Cache/RedisCacheStore.html#method-i-delete_matched","(matcher, options = nil)","<p>Cache Store API implementation.\n<p>Supports Redis KEYS glob patterns:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h?</span><span class=\"ruby-identifier\">llo</span> <span class=\"ruby-identifier\">matches</span> <span class=\"ruby-identifier\">hello</span>, <span class=\"ruby-identifier\">hallo</span> <span class=\"ruby-keyword\">and</span> <span class=\"ruby-identifier\">hxllo</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["delete_matched","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-delete_matched","(matcher, options = nil)","<p>Deletes all entries with keys matching the pattern.\n<p>Options are passed to the underlying cache implementation. …\n"],["delete_multi","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-delete_multi","(names, options = nil)","<p>Deletes multiple entries in the cache.\n<p>Options are passed to the underlying cache implementation.\n"],["delete_multi_entries","ActiveSupport::Cache::RedisCacheStore","ActiveSupport/Cache/RedisCacheStore.html#method-i-delete_multi_entries","(entries, **_options)","<p>Deletes multiple entries in the cache. Returns the number of entries deleted.\n"],["delete_multi_entries","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-delete_multi_entries","(entries, **options)","<p>Deletes multiples entries in the cache implementation. Subclasses MAY implement this method.\n"],["demodulize","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-demodulize","(path)","<p>Removes the module part from the expression in the string.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">demodulize</span>(<span class=\"ruby-string\">&#39;ActiveSupport::Inflector::Inflections&#39;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["demodulize","String","String.html#method-i-demodulize","()","<p>Removes the module part from the constant expression in the string.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&#39;ActiveSupport::Inflector::Inflections&#39;</span>.<span class=\"ruby-identifier\">demodulize</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["deprecate","Module","Module.html#method-i-deprecate","(*method_names)","\n<pre class=\"ruby\"><span class=\"ruby-identifier\">deprecate</span> <span class=\"ruby-value\">:foo</span>\n<span class=\"ruby-identifier\">deprecate</span> <span class=\"ruby-value\">bar:</span> <span class=\"ruby-string\">&#39;message&#39;</span>\n<span class=\"ruby-identifier\">deprecate</span> <span class=\"ruby-value\">:foo</span>, <span class=\"ruby-value\">:bar</span>, <span class=\"ruby-value\">baz:</span> <span class=\"ruby-string\">&#39;warning!&#39;</span>, <span class=\"ruby-value\">qux:</span> <span class=\"ruby-string\">&#39;gone!&#39;</span>\n</pre>\n<p>You can also …\n"],["deprecate_constant","ActiveSupport::Deprecation::DeprecatedConstantAccessor","ActiveSupport/Deprecation/DeprecatedConstantAccessor.html#method-i-deprecate_constant","(const_name, new_constant, message: nil, deprecator: ActiveSupport::Deprecation.instance)",""],["deprecate_methods","ActiveSupport::Deprecation::MethodWrapper","ActiveSupport/Deprecation/MethodWrapper.html#method-i-deprecate_methods","(target_module, *method_names)","<p>Declare that a method has been deprecated.\n\n<pre>class Fred\n  def aaa; end\n  def bbb; end\n  def ccc; end\n  def ...</pre>\n"],["deprecated_method_warning","ActiveSupport::Deprecation::Reporting","ActiveSupport/Deprecation/Reporting.html#method-i-deprecated_method_warning","(method_name, message = nil)","<p>Outputs a deprecation warning message\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">deprecated_method_warning</span>(<span class=\"ruby-value\">:method_name</span>)\n<span class=\"ruby-comment\"># =&gt; &quot;method_name is deprecated ...</span>\n</pre>\n"],["deprecation_caller_message","ActiveSupport::Deprecation::Reporting","ActiveSupport/Deprecation/Reporting.html#method-i-deprecation_caller_message","(callstack)",""],["deprecation_disallowed?","ActiveSupport::Deprecation::Disallowed","ActiveSupport/Deprecation/Disallowed.html#method-i-deprecation_disallowed-3F","(message)",""],["deprecation_message","ActiveSupport::Deprecation::Reporting","ActiveSupport/Deprecation/Reporting.html#method-i-deprecation_message","(callstack, message = nil)",""],["deprecation_warning","ActiveSupport::Deprecation::Reporting","ActiveSupport/Deprecation/Reporting.html#method-i-deprecation_warning","(deprecated_method_name, message = nil, caller_backtrace = nil)",""],["descendants","ActiveSupport::DescendantsTracker","ActiveSupport/DescendantsTracker.html#method-i-descendants","()",""],["descendants","ActiveSupport::DescendantsTracker","ActiveSupport/DescendantsTracker.html#method-c-descendants","(klass)",""],["descendants","Class","Class.html#method-i-descendants","()","<p>Returns an array with all classes that are &lt; than its receiver.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">C</span>; <span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-constant\">C</span>.<span class=\"ruby-identifier\">descendants</span> <span class=\"ruby-comment\"># =&gt; [] ...</span>\n</pre>\n"],["deserialize","ActiveSupport::EncryptedConfiguration","ActiveSupport/EncryptedConfiguration.html#method-i-deserialize","(config)",""],["deserialize_entry","ActiveSupport::Cache::MemCacheStore","ActiveSupport/Cache/MemCacheStore.html#method-i-deserialize_entry","(payload)",""],["deserialize_entry","ActiveSupport::Cache::RedisCacheStore","ActiveSupport/Cache/RedisCacheStore.html#method-i-deserialize_entry","(payload, raw:)",""],["deserialize_entry","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-deserialize_entry","(payload)",""],["detach_from","ActiveSupport::Subscriber","ActiveSupport/Subscriber.html#method-c-detach_from","(namespace, notifier = ActiveSupport::Notifications)","<p>Detach the subscriber from a namespace.\n"],["dig","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-dig","(*args)","<p>Same as <code>Hash#dig</code> where the key passed as argument can be either a string or a symbol:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">counters</span> = <span class=\"ruby-constant\">ActiveSupport</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HashWithIndifferentAccess</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["dig","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-dig","(*args)","<p>Same as <code>Hash#dig</code> where the key passed as argument can be either a string or a symbol:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">counters</span> = <span class=\"ruby-constant\">ActiveSupport</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HashWithIndifferentAccess</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["direct_descendants","ActiveSupport::DescendantsTracker","ActiveSupport/DescendantsTracker.html#method-c-direct_descendants","(klass)",""],["direct_descendants","ActiveSupport::DescendantsTracker","ActiveSupport/DescendantsTracker.html#method-i-direct_descendants","()",""],["disallowed_behavior","ActiveSupport::Deprecation::Behavior","ActiveSupport/Deprecation/Behavior.html#method-i-disallowed_behavior","()","<p>Returns the current behavior for disallowed deprecations or if one isn&#39;t set, defaults to <code>:raise</code> …\n"],["disallowed_behavior=","ActiveSupport::Deprecation::Behavior","ActiveSupport/Deprecation/Behavior.html#method-i-disallowed_behavior-3D","(behavior)","<p>Sets the behavior for disallowed deprecations (those configured by ActiveSupport::Deprecation.disallowed_warnings= …\n"],["disallowed_warnings","ActiveSupport::Deprecation::Disallowed","ActiveSupport/Deprecation/Disallowed.html#method-i-disallowed_warnings","()","<p>Returns the configured criteria used to identify deprecation messages which should be treated as disallowed. …\n"],["done_running","ActiveSupport::Dependencies::Interlock","ActiveSupport/Dependencies/Interlock.html#method-i-done_running","()",""],["done_unloading","ActiveSupport::Dependencies::Interlock","ActiveSupport/Dependencies/Interlock.html#method-i-done_unloading","()",""],["dst?","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-dst-3F","()","<p>Returns true if the current time is within Daylight Savings Time for the specified time zone.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">zone</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["dup","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-dup","()","<p>Returns a shallow copy of the hash.\n\n<pre>hash = ActiveSupport::HashWithIndifferentAccess.new({ a: { b: &#39;b&#39; ...</pre>\n"],["dup","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-dup","()","<p>Returns a shallow copy of the hash.\n\n<pre>hash = ActiveSupport::HashWithIndifferentAccess.new({ a: { b: &#39;b&#39; ...</pre>\n"],["duplicable?","Method","Method.html#method-i-duplicable-3F","()","<p>Methods are not duplicable:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">method</span>(<span class=\"ruby-value\">:puts</span>).<span class=\"ruby-identifier\">duplicable?</span> <span class=\"ruby-comment\"># =&gt; false</span>\n<span class=\"ruby-identifier\">method</span>(<span class=\"ruby-value\">:puts</span>).<span class=\"ruby-identifier\">dup</span>         <span class=\"ruby-comment\"># =&gt; TypeError: ...</span>\n</pre>\n"],["duplicable?","Object","Object.html#method-i-duplicable-3F","()","<p>Can you safely dup this object?\n<p>False for method objects; true otherwise.\n"],["duplicable?","UnboundMethod","UnboundMethod.html#method-i-duplicable-3F","()","<p>Unbound methods are not duplicable:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">method</span>(<span class=\"ruby-value\">:puts</span>).<span class=\"ruby-identifier\">unbind</span>.<span class=\"ruby-identifier\">duplicable?</span> <span class=\"ruby-comment\"># =&gt; false</span>\n<span class=\"ruby-identifier\">method</span>(<span class=\"ruby-value\">:puts</span>).<span class=\"ruby-identifier\">unbind</span>.<span class=\"ruby-identifier\">dup</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["duration","ActiveSupport::Notifications::Event","ActiveSupport/Notifications/Event.html#method-i-duration","()","<p>Returns the difference in milliseconds between when the execution of the event started and when it ended. …\n"],["duration_of_variable_length?","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-duration_of_variable_length-3F","(obj)",""],["each","ActiveSupport::Dependencies::WatchStack","ActiveSupport/Dependencies/WatchStack.html#method-i-each","(&block)",""],["eager_autoload","ActiveSupport::Autoload","ActiveSupport/Autoload.html#method-i-eager_autoload","()",""],["eager_load!","ActiveSupport","ActiveSupport.html#method-c-eager_load-21","()",""],["eager_load!","ActiveSupport::Autoload","ActiveSupport/Autoload.html#method-i-eager_load-21","()",""],["eligible_waiters?","ActiveSupport::Concurrency::ShareLock","ActiveSupport/Concurrency/ShareLock.html#method-i-eligible_waiters-3F","(compatible)",""],["empty?","ActiveSupport::Dependencies::ClassCache","ActiveSupport/Dependencies/ClassCache.html#method-i-empty-3F","()",""],["enable_warnings","Kernel","Kernel.html#method-i-enable_warnings","()","<p>Sets $VERBOSE to <code>true</code> for the duration of the block and back to its original value afterwards.\n"],["encode","ActiveSupport::JSON","ActiveSupport/JSON.html#method-c-encode","(value, options = nil)","<p>Dumps objects in JSON (JavaScript Object Notation). See www.json.org for more info.\n\n<pre>ActiveSupport::JSON.encode({ ...</pre>\n"],["encode","ActiveSupport::MessageVerifier","ActiveSupport/MessageVerifier.html#method-i-encode","(data)",""],["encode_with","ActiveSupport::OrderedHash","ActiveSupport/OrderedHash.html#method-i-encode_with","(coder)",""],["encode_with","ActiveSupport::SafeBuffer","ActiveSupport/SafeBuffer.html#method-i-encode_with","(coder)",""],["encrypt","ActiveSupport::EncryptedFile","ActiveSupport/EncryptedFile.html#method-i-encrypt","(contents)",""],["encrypt_and_sign","ActiveSupport::MessageEncryptor","ActiveSupport/MessageEncryptor.html#method-i-encrypt_and_sign","(value, expires_at: nil, expires_in: nil, purpose: nil)","<p>Encrypt and sign a message. We need to sign the message in order to avoid padding attacks. Reference: …\n"],["encryptor","ActiveSupport::EncryptedFile","ActiveSupport/EncryptedFile.html#method-i-encryptor","()",""],["end_document","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-end_document","()",""],["end_element","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-end_element","(name)",""],["end_of_day","Date","Date.html#method-i-end_of_day","()","<p>Converts Date to a Time (or DateTime if necessary) with the time portion set to the end of the day (23:59:59) …\n"],["end_of_day","DateTime","DateTime.html#method-i-end_of_day","()","<p>Returns a new DateTime representing the end of the day (23:59:59).\n"],["end_of_day","Time","Time.html#method-i-end_of_day","()","<p>Returns a new Time representing the end of the day, 23:59:59.999999\n"],["end_of_hour","DateTime","DateTime.html#method-i-end_of_hour","()","<p>Returns a new DateTime representing the end of the hour (hh:59:59).\n"],["end_of_hour","Time","Time.html#method-i-end_of_hour","()","<p>Returns a new Time representing the end of the hour, x:59:59.999999\n"],["end_of_minute","DateTime","DateTime.html#method-i-end_of_minute","()","<p>Returns a new DateTime representing the end of the minute (hh:mm:59).\n"],["end_of_minute","Time","Time.html#method-i-end_of_minute","()","<p>Returns a new Time representing the end of the minute, x:xx:59.999999\n"],["end_of_month","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-end_of_month","()","<p>Returns a new date/time representing the end of the month. DateTime objects will have a time set to 23:59:59. …\n"],["end_of_quarter","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-end_of_quarter","()","<p>Returns a new date/time at the end of the quarter.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">today</span> = <span class=\"ruby-constant\">Date</span>.<span class=\"ruby-identifier\">today</span> <span class=\"ruby-comment\"># =&gt; Fri, 10 Jul 2015</span>\n<span class=\"ruby-identifier\">today</span>.<span class=\"ruby-identifier\">end_of_quarter</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["end_of_week","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-end_of_week","(start_day = Date.beginning_of_week)","<p>Returns a new date/time representing the end of this week on the given day. Week is assumed to start …\n"],["end_of_year","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-end_of_year","()","<p>Returns a new date/time representing the end of the year. DateTime objects will have a time set to 23:59:59. …\n"],["end_with?","Symbol","Symbol.html#method-i-end_with-3F","(*suffixes)",""],["ends_with?","Symbol","Symbol.html#method-i-ends_with-3F","(*suffixes)",""],["ensure_cache_path","ActiveSupport::Cache::FileStore","ActiveSupport/Cache/FileStore.html#method-i-ensure_cache_path","(path)","<p>Make sure a file path&#39;s directories exist.\n"],["ensure_connection_pool_added!","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-c-ensure_connection_pool_added-21","()",""],["eql?","ActiveSupport::Duration","ActiveSupport/Duration.html#method-i-eql-3F","(other)","<p>Returns <code>true</code> if <code>other</code> is also a Duration instance, which has the same parts as this one.\n"],["eql?","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-eql-3F","(other)","<p>Returns <code>true</code> if <code>other</code> is equal to current object.\n"],["eql?","Time","Time.html#method-i-eql-3F","(other)",""],["eql_with_coercion","Time","Time.html#method-i-eql_with_coercion","(other)","<p>Layers additional behavior on Time#eql? so that ActiveSupport::TimeWithZone instances can be eql? to …\n"],["eql_without_coercion","Time","Time.html#method-i-eql_without_coercion","(other)",""],["error","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-error","(error_message)",""],["escape","ActiveSupport::FileUpdateChecker","ActiveSupport/FileUpdateChecker.html#method-i-escape","(key)",""],["event_stack","ActiveSupport::Subscriber","ActiveSupport/Subscriber.html#method-i-event_stack","()",""],["exabyte","Numeric","Numeric.html#method-i-exabyte","()",""],["exabytes","Numeric","Numeric.html#method-i-exabytes","()","<p>Returns the number of bytes equivalent to the exabytes provided.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">2</span>.<span class=\"ruby-identifier\">exabytes</span> <span class=\"ruby-comment\"># =&gt; 2_305_843_009_213_693_952</span>\n</pre>\n"],["except","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-except","(*keys)",""],["except","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-except","(*keys)",""],["except","Hash","Hash.html#method-i-except","(*keys)","<p>Returns a hash that includes everything except given keys.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">hash</span> = { <span class=\"ruby-value\">a:</span> <span class=\"ruby-keyword\">true</span>, <span class=\"ruby-value\">b:</span> <span class=\"ruby-keyword\">false</span>, <span class=\"ruby-value\">c:</span> <span class=\"ruby-keyword\">nil</span> }\n<span class=\"ruby-identifier\">hash</span>.<span class=\"ruby-identifier\">except</span>(<span class=\"ruby-value\">:c</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["except!","Hash","Hash.html#method-i-except-21","(*keys)","<p>Removes the given keys from hash and returns it.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">hash</span> = { <span class=\"ruby-value\">a:</span> <span class=\"ruby-keyword\">true</span>, <span class=\"ruby-value\">b:</span> <span class=\"ruby-keyword\">false</span>, <span class=\"ruby-value\">c:</span> <span class=\"ruby-keyword\">nil</span> }\n<span class=\"ruby-identifier\">hash</span>.<span class=\"ruby-identifier\">except!</span>(<span class=\"ruby-value\">:c</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["exclude?","Enumerable","Enumerable.html#method-i-exclude-3F","(object)","<p>The negative of the <code>Enumerable#include?</code>. Returns <code>true</code> if the collection does not include the object. …\n"],["exclude?","String","String.html#method-i-exclude-3F","(string)","<p>The inverse of <code>String#include?</code>. Returns true if the string does not include the other string.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;hello&quot;</span>.<span class=\"ruby-identifier\">exclude?</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["excluding","Array","Array.html#method-i-excluding","(*elements)","<p>Returns a copy of the Array excluding the specified elements.\n\n<pre>[&quot;David&quot;, &quot;Rafael&quot;, &quot;Aaron&quot;, &quot;Todd&quot;].excluding(&quot;Aaron&quot;, ...</pre>\n"],["excluding","Enumerable","Enumerable.html#method-i-excluding","(*elements)","<p>Returns a copy of the enumerable excluding the specified elements.\n\n<pre class=\"ruby\">[<span class=\"ruby-string\">&quot;David&quot;</span>, <span class=\"ruby-string\">&quot;Rafael&quot;</span>, <span class=\"ruby-string\">&quot;Aaron&quot;</span>, <span class=\"ruby-string\">&quot;Todd&quot;</span>].<span class=\"ruby-identifier\">excluding</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["exclusive","ActiveSupport::Concurrency::ShareLock","ActiveSupport/Concurrency/ShareLock.html#method-i-exclusive","(purpose: nil, compatible: [], after_compatible: [], no_wait: false)","<p>Execute the supplied block while holding the Exclusive lock. If <code>no_wait</code> is set and the lock is not immediately …\n"],["execute","ActiveSupport::FileUpdateChecker","ActiveSupport/FileUpdateChecker.html#method-i-execute","()","<p>Executes the given block and updates the latest watched files and timestamp.\n"],["execute_hook","ActiveSupport::LazyLoadHooks","ActiveSupport/LazyLoadHooks.html#method-i-execute_hook","(name, base, options, block)",""],["execute_if_updated","ActiveSupport::FileUpdateChecker","ActiveSupport/FileUpdateChecker.html#method-i-execute_if_updated","()","<p>Execute the block given if updated.\n"],["exist?","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-exist-3F","(name, options = nil)","<p>Returns <code>true</code> if the cache contains an entry for the given key.\n<p>Options are passed to the underlying cache …\n"],["expand_cache_key","ActiveSupport::Cache","ActiveSupport/Cache.html#method-c-expand_cache_key","(key, namespace = nil)","<p>Expands out the <code>key</code> argument into a key that can be used for the cache store. Optionally accepts a namespace, …\n"],["expanded_key","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-expanded_key","(key)","<p>Expands key to be a consistent string value. Invokes <code>cache_key</code> if object responds to <code>cache_key</code>. Otherwise …\n"],["expanded_version","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-expanded_version","(key)",""],["explicitly_allowed?","ActiveSupport::Deprecation::Disallowed","ActiveSupport/Deprecation/Disallowed.html#method-i-explicitly_allowed-3F","(message)",""],["extended","ActiveSupport::PerThreadRegistry","ActiveSupport/PerThreadRegistry.html#method-c-extended","(object)",""],["extract!","Array","Array.html#method-i-extract-21","()","<p>Removes and returns the elements for which the block returns a true value. If no block is given, an  …\n"],["extract!","Hash","Hash.html#method-i-extract-21","(*keys)","<p>Removes and returns the key/value pairs matching the given keys.\n\n<pre>hash = { a: 1, b: 2, c: 3, d: 4 }\nhash.extract!(:a, ...</pre>\n"],["extract_callstack","ActiveSupport::Deprecation::Reporting","ActiveSupport/Deprecation/Reporting.html#method-i-extract_callstack","(callstack)",""],["extract_options!","Array","Array.html#method-i-extract_options-21","()","<p>Extracts options from a set of arguments. Removes and returns the last element in the array if it&#39;s …\n"],["extractable_options?","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-extractable_options-3F","()","<p>Returns <code>true</code> so that <code>Array#extract_options!</code> finds members of this class.\n"],["extractable_options?","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-extractable_options-3F","()","<p>Returns <code>true</code> so that <code>Array#extract_options!</code> finds members of this class.\n"],["extractable_options?","ActiveSupport::OrderedHash","ActiveSupport/OrderedHash.html#method-i-extractable_options-3F","()","<p>Returns true to make sure that this hash is extractable via <code>Array#extract_options!</code>\n"],["extractable_options?","ActiveSupport::OrderedOptions","ActiveSupport/OrderedOptions.html#method-i-extractable_options-3F","()",""],["extractable_options?","Hash","Hash.html#method-i-extractable_options-3F","()","<p>By default, only instances of Hash itself are extractable. Subclasses of Hash may implement this method …\n"],["failsafe","ActiveSupport::Cache::RedisCacheStore","ActiveSupport/Cache/RedisCacheStore.html#method-i-failsafe","(method, returning: nil)",""],["fetch","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-fetch","(name, options = nil, &block)","<p>Fetches data from the cache, using the given key. If there is data in the cache with the given key, then …\n"],["fetch","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-fetch","(key, *extras)","<p>Same as <code>Hash#fetch</code> where the key passed as argument can be either a string or a symbol:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">counters</span> = <span class=\"ruby-constant\">ActiveSupport</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HashWithIndifferentAccess</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["fetch","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-fetch","(key, *extras)","<p>Same as <code>Hash#fetch</code> where the key passed as argument can be either a string or a symbol:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">counters</span> = <span class=\"ruby-constant\">ActiveSupport</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HashWithIndifferentAccess</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["fetch_multi","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-fetch_multi","(*names)","<p>Fetches data from the cache, using the given keys. If there is data in the cache with the given keys, …\n"],["fetch_public_methods","ActiveSupport::LogSubscriber","ActiveSupport/LogSubscriber.html#method-c-fetch_public_methods","(subscriber, inherit_all)",""],["fetch_public_methods","ActiveSupport::Subscriber","ActiveSupport/Subscriber.html#method-c-fetch_public_methods","(subscriber, inherit_all)",""],["fetch_values","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-fetch_values","(*indices, &block)","<p>Returns an array of the values at the specified indices, but also raises an exception when one of the …\n"],["fetch_values","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-fetch_values","(*indices, &block)","<p>Returns an array of the values at the specified indices, but also raises an exception when one of the …\n"],["fifth","Array","Array.html#method-i-fifth","()","<p>Equal to <code>self[4]</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-node\">%w( a b c d e )</span>.<span class=\"ruby-identifier\">fifth</span> <span class=\"ruby-comment\"># =&gt; &quot;e&quot;</span>\n</pre>\n"],["file_fixture","ActiveSupport::Testing::FileFixtures","ActiveSupport/Testing/FileFixtures.html#method-i-file_fixture","(fixture_name)","<p>Returns a <code>Pathname</code> to the fixture file named <code>fixture_name</code>.\n<p>Raises <code>ArgumentError</code> if <code>fixture_name</code> can&#39;t …\n"],["file_path_key","ActiveSupport::Cache::FileStore","ActiveSupport/Cache/FileStore.html#method-i-file_path_key","(path)","<p>Translate a file path into a key.\n"],["filter","ActiveSupport::BacktraceCleaner","ActiveSupport/BacktraceCleaner.html#method-i-filter","(backtrace, kind = :silent)",""],["filter","ActiveSupport::ParameterFilter","ActiveSupport/ParameterFilter.html#method-i-filter","(params)","<p>Mask value of <code>params</code> if key matches one of filters.\n"],["filter_backtrace","ActiveSupport::BacktraceCleaner","ActiveSupport/BacktraceCleaner.html#method-i-filter_backtrace","(backtrace)",""],["filter_param","ActiveSupport::ParameterFilter","ActiveSupport/ParameterFilter.html#method-i-filter_param","(key, value)","<p>Returns filtered value for given key. For <code>Proc</code> filters, third block argument is not populated.\n"],["find_attached_subscriber","ActiveSupport::Subscriber","ActiveSupport/Subscriber.html#method-c-find_attached_subscriber","()",""],["find_beginning_of_week!","Date","Date.html#method-c-find_beginning_of_week-21","(week_start)","<p>Returns week start day symbol (e.g. :monday), or raises an <code>ArgumentError</code> for invalid day symbol.\n"],["find_rescue_handler","ActiveSupport::Rescuable::ClassMethods","ActiveSupport/Rescuable/ClassMethods.html#method-i-find_rescue_handler","(exception)",""],["find_tzinfo","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-c-find_tzinfo","(name)",""],["find_zone","Time","Time.html#method-c-find_zone","(time_zone)","<p>Returns a TimeZone instance matching the time zone provided. Accepts the time zone in any format supported …\n"],["find_zone!","Time","Time.html#method-c-find_zone-21","(time_zone)","<p>Returns a TimeZone instance matching the time zone provided. Accepts the time zone in any format supported …\n"],["finish","ActiveSupport::LogSubscriber","ActiveSupport/LogSubscriber.html#method-i-finish","(name, id, payload)",""],["finish","ActiveSupport::Notifications::Fanout","ActiveSupport/Notifications/Fanout.html#method-i-finish","(name, id, payload, listeners = listeners_for(name))",""],["finish","ActiveSupport::Notifications::Fanout::Subscribers::EventObject","ActiveSupport/Notifications/Fanout/Subscribers/EventObject.html#method-i-finish","(name, id, payload)",""],["finish","ActiveSupport::Notifications::Instrumenter","ActiveSupport/Notifications/Instrumenter.html#method-i-finish","(name, payload)","<p>Send a finish notification with <code>name</code> and <code>payload</code>.\n"],["finish","ActiveSupport::Subscriber","ActiveSupport/Subscriber.html#method-i-finish","(name, id, payload)",""],["finish!","ActiveSupport::Notifications::Event","ActiveSupport/Notifications/Event.html#method-i-finish-21","()","<p>Record information at the time this event finishes\n"],["finish_with_state","ActiveSupport::Notifications::Instrumenter","ActiveSupport/Notifications/Instrumenter.html#method-i-finish_with_state","(listeners_state, name, payload)",""],["first","String","String.html#method-i-first","(limit = 1)","<p>Returns the first character. If a limit is supplied, returns a substring from the beginning of the string …\n"],["first_hour","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-first_hour","(date_or_time)",""],["fixed_length_secure_compare","ActiveSupport::SecurityUtils","ActiveSupport/SecurityUtils.html#method-i-fixed_length_secure_compare","(a, b)",""],["fixed_length_secure_compare","ActiveSupport::SecurityUtils","ActiveSupport/SecurityUtils.html#method-c-fixed_length_secure_compare","(a, b)",""],["floor","Time","Time.html#method-i-floor","(precision = 0)",""],["flush","ActiveSupport::LogSubscriber::TestHelper::MockLogger","ActiveSupport/LogSubscriber/TestHelper/MockLogger.html#method-i-flush","()",""],["flush","ActiveSupport::TaggedLogging","ActiveSupport/TaggedLogging.html#method-i-flush","()",""],["flush_all!","ActiveSupport::LogSubscriber","ActiveSupport/LogSubscriber.html#method-c-flush_all-21","()","<p>Flush all log_subscribers&#39; logger.\n"],["foreign_key","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-foreign_key","(class_name, separate_class_name_and_id_with_underscore = true)","<p>Creates a foreign key name from a class name. <code>separate_class_name_and_id_with_underscore</code> sets whether …\n"],["foreign_key","String","String.html#method-i-foreign_key","(separate_class_name_and_id_with_underscore = true)","<p>Creates a foreign key name from a class name. <code>separate_class_name_and_id_with_underscore</code> sets whether …\n"],["fork","ActiveSupport::ForkTracker::CoreExt","ActiveSupport/ForkTracker/CoreExt.html#method-i-fork","(*)",""],["fork","ActiveSupport::ForkTracker::CoreExtPrivate","ActiveSupport/ForkTracker/CoreExtPrivate.html#method-i-fork","(*)",""],["forking_env?","ActiveSupport::Testing::Isolation","ActiveSupport/Testing/Isolation.html#method-c-forking_env-3F","()",""],["formatted_offset","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-formatted_offset","(colon = true, alternate_utc_string = nil)","<p>Returns a formatted string of the offset from UTC, or an alternative string if the time zone is already …\n"],["formatted_offset","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-formatted_offset","(colon = true, alternate_utc_string = nil)","<p>Returns a formatted string of the offset from UTC, or an alternative string if the time zone is already …\n"],["formatted_offset","DateTime","DateTime.html#method-i-formatted_offset","(colon = true, alternate_utc_string = nil)","<p>Returns a formatted string of the offset from UTC, or an alternative string if the time zone is already …\n"],["formatted_offset","Time","Time.html#method-i-formatted_offset","(colon = true, alternate_utc_string = nil)","<p>Returns a formatted string of the offset from UTC, or an alternative string if the time zone is already …\n"],["fortnight","Numeric","Numeric.html#method-i-fortnight","()",""],["fortnights","Numeric","Numeric.html#method-i-fortnights","()","<p>Returns a Duration instance matching the number of fortnights provided.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">2</span>.<span class=\"ruby-identifier\">fortnights</span> <span class=\"ruby-comment\"># =&gt; 4 weeks</span>\n</pre>\n"],["forty_two","Array","Array.html#method-i-forty_two","()","<p>Equal to <code>self[41]</code>. Also known as accessing “the reddit”.\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">42</span>).<span class=\"ruby-identifier\">to_a</span>.<span class=\"ruby-identifier\">forty_two</span> <span class=\"ruby-comment\"># =&gt; 42</span>\n</pre>\n"],["fourth","Array","Array.html#method-i-fourth","()","<p>Equal to <code>self[3]</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-node\">%w( a b c d e )</span>.<span class=\"ruby-identifier\">fourth</span> <span class=\"ruby-comment\"># =&gt; &quot;d&quot;</span>\n</pre>\n"],["freeze","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-freeze","()",""],["freeze_time","ActiveSupport::Testing::TimeHelpers","ActiveSupport/Testing/TimeHelpers.html#method-i-freeze_time","(&block)","<p>Calls <code>travel_to</code> with <code>Time.now</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">current</span> <span class=\"ruby-comment\"># =&gt; Sun, 09 Jul 2017 15:34:49 EST -05:00</span>\n<span class=\"ruby-identifier\">freeze_time</span>\n<span class=\"ruby-identifier\">sleep</span>(<span class=\"ruby-value\">1</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["from","Array","Array.html#method-i-from","(position)","<p>Returns the tail of the array from <code>position</code>.\n\n<pre>%w( a b c d ).from(0)  # =&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]\n%w( a b ...</pre>\n"],["from","String","String.html#method-i-from","(position)","<p>Returns a substring from the given position to the end of the string. If the position is negative, it …\n"],["from_now","ActiveSupport::Duration","ActiveSupport/Duration.html#method-i-from_now","(time = ::Time.current)",""],["from_trusted_xml","Hash","Hash.html#method-c-from_trusted_xml","(xml)","<p>Builds a Hash from XML just like <code>Hash.from_xml</code>, but also allows Symbol and YAML.\n"],["from_xml","Hash","Hash.html#method-c-from_xml","(xml, disallowed_types = nil)","<p>Returns a Hash containing a collection of pairs when the key is the node name and the value is its content …\n"],["future?","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-future-3F","()","<p>Returns true if the current object&#39;s time is in the future.\n"],["future?","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-future-3F","()","<p>Returns true if the date/time is in the future.\n"],["gem_version","ActiveSupport","ActiveSupport.html#method-c-gem_version","()","<p>Returns the version of the currently loaded Active Support as a <code>Gem::Version</code>.\n"],["generate","ActiveSupport::MessageVerifier","ActiveSupport/MessageVerifier.html#method-i-generate","(value, expires_at: nil, expires_in: nil, purpose: nil)","<p>Generates a signed message for the provided value.\n<p>The message is signed with the <code>MessageVerifier</code>&#39;s …\n"],["generate_digest","ActiveSupport::MessageVerifier","ActiveSupport/MessageVerifier.html#method-i-generate_digest","(data)",""],["generate_key","ActiveSupport::CachingKeyGenerator","ActiveSupport/CachingKeyGenerator.html#method-i-generate_key","(*args)","<p>Returns a derived key suitable for use.\n"],["generate_key","ActiveSupport::EncryptedFile","ActiveSupport/EncryptedFile.html#method-c-generate_key","()",""],["generate_key","ActiveSupport::KeyGenerator","ActiveSupport/KeyGenerator.html#method-i-generate_key","(salt, key_size = 64)","<p>Returns a derived key suitable for use.  The default key_size is chosen to be compatible with the default …\n"],["generated_attribute_methods","ActiveSupport::CurrentAttributes","ActiveSupport/CurrentAttributes.html#method-c-generated_attribute_methods","()",""],["get","ActiveSupport::Dependencies::ClassCache","ActiveSupport/Dependencies/ClassCache.html#method-i-get","(key)",""],["get_entry_value","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-get_entry_value","(entry, name, options)",""],["get_period_and_ensure_valid_local_time","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-get_period_and_ensure_valid_local_time","(period)",""],["getgm","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-getgm","()",""],["getgm","DateTime","DateTime.html#method-i-getgm","()",""],["getlocal","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-getlocal","(utc_offset = nil)",""],["getlocal","DateTime","DateTime.html#method-i-getlocal","(utc_offset = nil)",""],["getutc","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-getutc","()",""],["getutc","DateTime","DateTime.html#method-i-getutc","()",""],["gigabyte","Numeric","Numeric.html#method-i-gigabyte","()",""],["gigabytes","Numeric","Numeric.html#method-i-gigabytes","()","<p>Returns the number of bytes equivalent to the gigabytes provided.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">2</span>.<span class=\"ruby-identifier\">gigabytes</span> <span class=\"ruby-comment\"># =&gt; 2_147_483_648</span>\n</pre>\n"],["gmt?","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-gmt-3F","()",""],["gmt_offset","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-gmt_offset","()",""],["gmtime","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-gmtime","()",""],["gmtime","DateTime","DateTime.html#method-i-gmtime","()",""],["gmtoff","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-gmtoff","()",""],["grapheme_length","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-grapheme_length","()","<p>Returns the number of grapheme clusters in the string.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&#39;क्षि&#39;</span>.<span class=\"ruby-identifier\">mb_chars</span>.<span class=\"ruby-identifier\">length</span>   <span class=\"ruby-comment\"># =&gt; 4</span>\n<span class=\"ruby-string\">&#39;क्षि&#39;</span>.<span class=\"ruby-identifier\">mb_chars</span>.<span class=\"ruby-identifier\">grapheme_length</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["h","ERB::Util","ERB/Util.html#method-c-h","(s)",""],["h","ERB::Util","ERB/Util.html#method-i-h","(s)",""],["halted_callback_hook","ActiveSupport::Callbacks","ActiveSupport/Callbacks.html#method-i-halted_callback_hook","(filter, name)","<p>A hook invoked every time a before callback is halted. This can be overridden in ActiveSupport::Callbacks …\n"],["halting","ActiveSupport::Callbacks::Filters::After","ActiveSupport/Callbacks/Filters/After.html#method-c-halting","(callback_sequence, user_callback)",""],["halting","ActiveSupport::Callbacks::Filters::Before","ActiveSupport/Callbacks/Filters/Before.html#method-c-halting","(callback_sequence, user_callback, halted_lambda, filter, name)",""],["halting_and_conditional","ActiveSupport::Callbacks::Filters::After","ActiveSupport/Callbacks/Filters/After.html#method-c-halting_and_conditional","(callback_sequence, user_callback, user_conditions)",""],["halting_and_conditional","ActiveSupport::Callbacks::Filters::Before","ActiveSupport/Callbacks/Filters/Before.html#method-c-halting_and_conditional","(callback_sequence, user_callback, user_conditions, halted_lambda, filter, name)",""],["handle_exception","ActiveSupport::Cache::RedisCacheStore","ActiveSupport/Cache/RedisCacheStore.html#method-i-handle_exception","(exception:, method:, returning:)",""],["handle_expired_entry","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-handle_expired_entry","(entry, key, options)",""],["handle_missing_key","ActiveSupport::EncryptedFile","ActiveSupport/EncryptedFile.html#method-i-handle_missing_key","()",""],["has_key?","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-has_key-3F","(key)",""],["has_key?","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-has_key-3F","(key)",""],["hash","ActiveSupport::Duration","ActiveSupport/Duration.html#method-i-hash","()",""],["hash","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-hash","()",""],["hook_state","ActiveSupport::ExecutionWrapper","ActiveSupport/ExecutionWrapper.html#method-i-hook_state","()",""],["hour","Numeric","Numeric.html#method-i-hour","()",""],["hours","Numeric","Numeric.html#method-i-hours","()","<p>Returns a Duration instance matching the number of hours provided.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">2</span>.<span class=\"ruby-identifier\">hours</span> <span class=\"ruby-comment\"># =&gt; 2 hours</span>\n</pre>\n"],["html_escape","ERB::Util","ERB/Util.html#method-i-html_escape","(s)","<p>A utility method for escaping HTML tag characters. This method is also aliased as <code>h</code>.\n\n<pre>puts html_escape(&#39;is ...</pre>\n"],["html_escape","ERB::Util","ERB/Util.html#method-c-html_escape","(s)","<p>A utility method for escaping HTML tag characters. This method is also aliased as <code>h</code>.\n\n<pre>puts html_escape(&#39;is ...</pre>\n"],["html_escape_interpolated_argument","ActiveSupport::SafeBuffer","ActiveSupport/SafeBuffer.html#method-i-html_escape_interpolated_argument","(arg)",""],["html_escape_once","ERB::Util","ERB/Util.html#method-c-html_escape_once","(s)","<p>A utility method for escaping HTML without affecting existing escaped entities.\n\n<pre>html_escape_once(&#39;1 &lt; ...</pre>\n"],["html_escape_once","ERB::Util","ERB/Util.html#method-i-html_escape_once","(s)","<p>A utility method for escaping HTML without affecting existing escaped entities.\n\n<pre>html_escape_once(&#39;1 &lt; ...</pre>\n"],["html_safe","String","String.html#method-i-html_safe","()","<p>Marks a string as trusted safe. It will be inserted into HTML with no additional escaping performed. …\n"],["html_safe?","ActiveSupport::SafeBuffer","ActiveSupport/SafeBuffer.html#method-i-html_safe-3F","()",""],["html_safe?","Numeric","Numeric.html#method-i-html_safe-3F","()",""],["html_safe?","Object","Object.html#method-i-html_safe-3F","()",""],["httpdate","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-httpdate","()","<p>Returns a string of the object&#39;s date and time in the format used by HTTP requests.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">zone</span>.<span class=\"ruby-identifier\">now</span>.<span class=\"ruby-identifier\">httpdate</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["human","ActiveSupport::Inflector::Inflections","ActiveSupport/Inflector/Inflections.html#method-i-human","(rule, replacement)","<p>Specifies a humanized form of a string by a regular expression rule or by a string mapping. When using …\n"],["humanize","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-humanize","(lower_case_and_underscored_word, capitalize: true, keep_id_suffix: false)","<p>Tweaks an attribute name for display to end users.\n<p>Specifically, performs these transformations:\n<p>Applies …\n"],["humanize","String","String.html#method-i-humanize","(capitalize: true, keep_id_suffix: false)","<p>Capitalizes the first word, turns underscores into spaces, and (by default)strips a trailing &#39;_id&#39; …\n"],["idle_time","ActiveSupport::Notifications::Event","ActiveSupport/Notifications/Event.html#method-i-idle_time","()","<p>Returns the idle time time (in milliseconds) passed since the call to <code>start!</code> and the call to <code>finish!</code> …\n"],["ignored_callstack","ActiveSupport::Deprecation::Reporting","ActiveSupport/Deprecation/Reporting.html#method-i-ignored_callstack","(path)",""],["in","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-in","(other)",""],["in","Date","Date.html#method-i-in","(seconds)",""],["in","DateTime","DateTime.html#method-i-in","(seconds)",""],["in","Time","Time.html#method-i-in","(seconds)",""],["in?","Object","Object.html#method-i-in-3F","(another_object)","<p>Returns true if this object is included in the argument. Argument must be any object which responds to …\n"],["in_days","ActiveSupport::Duration","ActiveSupport/Duration.html#method-i-in_days","()","<p>Returns the amount of days a duration covers as a float\n\n<pre class=\"ruby\"><span class=\"ruby-value\">12</span>.<span class=\"ruby-identifier\">hours</span>.<span class=\"ruby-identifier\">in_days</span> <span class=\"ruby-comment\"># =&gt; 0.5</span>\n</pre>\n"],["in_groups","Array","Array.html#method-i-in_groups","(number, fill_with = nil)","<p>Splits or iterates over the array in <code>number</code> of groups, padding any remaining slots with <code>fill_with</code> unless …\n"],["in_groups_of","Array","Array.html#method-i-in_groups_of","(number, fill_with = nil)","<p>Splits or iterates over the array in groups of size <code>number</code>, padding any remaining slots with <code>fill_with</code> …\n"],["in_hours","ActiveSupport::Duration","ActiveSupport/Duration.html#method-i-in_hours","()","<p>Returns the amount of hours a duration covers as a float\n\n<pre class=\"ruby\"><span class=\"ruby-value\">1</span>.<span class=\"ruby-identifier\">day</span>.<span class=\"ruby-identifier\">in_hours</span> <span class=\"ruby-comment\"># =&gt; 24.0</span>\n</pre>\n"],["in_milliseconds","Numeric","Numeric.html#method-i-in_milliseconds","()","<p>Returns the number of milliseconds equivalent to the seconds provided. Used with the standard time durations. …\n"],["in_minutes","ActiveSupport::Duration","ActiveSupport/Duration.html#method-i-in_minutes","()","<p>Returns the amount of minutes a duration covers as a float\n\n<pre class=\"ruby\"><span class=\"ruby-value\">1</span>.<span class=\"ruby-identifier\">day</span>.<span class=\"ruby-identifier\">in_minutes</span> <span class=\"ruby-comment\"># =&gt; 1440.0</span>\n</pre>\n"],["in_months","ActiveSupport::Duration","ActiveSupport/Duration.html#method-i-in_months","()","<p>Returns the amount of months a duration covers as a float\n\n<pre class=\"ruby\"><span class=\"ruby-value\">9</span>.<span class=\"ruby-identifier\">weeks</span>.<span class=\"ruby-identifier\">in_months</span> <span class=\"ruby-comment\"># =&gt; 2.07</span>\n</pre>\n"],["in_seconds","ActiveSupport::Duration","ActiveSupport/Duration.html#method-i-in_seconds","()",""],["in_time_zone","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-in_time_zone","(new_zone = ::Time.zone)","<p>Returns the simultaneous time in <code>Time.zone</code>, or the specified zone.\n"],["in_time_zone","DateAndTime::Zones","DateAndTime/Zones.html#method-i-in_time_zone","(zone = ::Time.zone)","<p>Returns the simultaneous time in <code>Time.zone</code> if a zone is given or if Time.zone_default is set. Otherwise …\n"],["in_time_zone","String","String.html#method-i-in_time_zone","(zone = ::Time.zone)","<p>Converts String to a TimeWithZone in the current zone if Time.zone or Time.zone_default is set, otherwise …\n"],["in_weeks","ActiveSupport::Duration","ActiveSupport/Duration.html#method-i-in_weeks","()","<p>Returns the amount of weeks a duration covers as a float\n\n<pre class=\"ruby\"><span class=\"ruby-value\">2</span>.<span class=\"ruby-identifier\">months</span>.<span class=\"ruby-identifier\">in_weeks</span> <span class=\"ruby-comment\"># =&gt; 8.696</span>\n</pre>\n"],["in_years","ActiveSupport::Duration","ActiveSupport/Duration.html#method-i-in_years","()","<p>Returns the amount of years a duration covers as a float\n\n<pre class=\"ruby\"><span class=\"ruby-value\">30</span>.<span class=\"ruby-identifier\">days</span>.<span class=\"ruby-identifier\">in_years</span> <span class=\"ruby-comment\"># =&gt; 0.082</span>\n</pre>\n"],["include?","ActiveSupport::CompareWithRange","ActiveSupport/CompareWithRange.html#method-i-include-3F","(value)","<p>Extends the default Range#include? to support range comparisons.\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">5</span>).<span class=\"ruby-identifier\">include?</span>(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">5</span>)  <span class=\"ruby-comment\"># =&gt; true</span>\n(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">5</span>).<span class=\"ruby-identifier\">include?</span>(<span class=\"ruby-value\">2</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">3</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["include?","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-include-3F","(key)",""],["include?","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-include-3F","(key)",""],["included","ActiveSupport::Concern","ActiveSupport/Concern.html#method-i-included","(base = nil, &block)","<p>Evaluate given block in context of base class, so that you can write class macros here. When you define …\n"],["included","ActiveSupport::Deprecation::DeprecatedConstantAccessor","ActiveSupport/Deprecation/DeprecatedConstantAccessor.html#method-c-included","(base)",""],["including","Array","Array.html#method-i-including","(*elements)","<p>Returns a new array that includes the passed elements.\n\n<pre class=\"ruby\">[ <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span> ].<span class=\"ruby-identifier\">including</span>(<span class=\"ruby-value\">4</span>, <span class=\"ruby-value\">5</span>) <span class=\"ruby-comment\"># =&gt; [ 1, 2, 3, 4, ...</span>\n</pre>\n"],["including","Enumerable","Enumerable.html#method-i-including","(*elements)","<p>Returns a new array that includes the passed elements.\n\n<pre class=\"ruby\">[ <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span> ].<span class=\"ruby-identifier\">including</span>(<span class=\"ruby-value\">4</span>, <span class=\"ruby-value\">5</span>)\n<span class=\"ruby-comment\"># =&gt; [ 1, 2, 3, 4, ...</span>\n</pre>\n"],["incorporate_utc_offset","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-incorporate_utc_offset","(time, offset)",""],["increment","ActiveSupport::Cache::FileStore","ActiveSupport/Cache/FileStore.html#method-i-increment","(name, amount = 1, options = nil)","<p>Increments an already existing integer value that is stored in the cache. If the key is not found nothing …\n"],["increment","ActiveSupport::Cache::MemCacheStore","ActiveSupport/Cache/MemCacheStore.html#method-i-increment","(name, amount = 1, options = nil)","<p>Increment a cached value. This method uses the memcached incr atomic operator and can only be used on …\n"],["increment","ActiveSupport::Cache::MemoryStore","ActiveSupport/Cache/MemoryStore.html#method-i-increment","(name, amount = 1, options = nil)","<p>Increment an integer value in the cache.\n"],["increment","ActiveSupport::Cache::NullStore","ActiveSupport/Cache/NullStore.html#method-i-increment","(name, amount = 1, options = nil)",""],["increment","ActiveSupport::Cache::RedisCacheStore","ActiveSupport/Cache/RedisCacheStore.html#method-i-increment","(name, amount = 1, options = nil)","<p>Cache Store API implementation.\n<p>Increment a cached value. This method uses the Redis incr atomic operator …\n"],["increment","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-increment","(name, amount = 1, options = nil)","<p>Increments an integer value in the cache.\n<p>Options are passed to the underlying cache implementation.\n<p>Some …\n"],["indent","String","String.html#method-i-indent","(amount, indent_string = nil, indent_empty_lines = false)","<p>Indents the lines in the receiver:\n\n<pre>&lt;&lt;EOS.indent(2)\ndef some_method\n  some_code\nend\nEOS\n# =&gt;\n  def some_method ...</pre>\n"],["indent!","String","String.html#method-i-indent-21","(amount, indent_string = nil, indent_empty_lines = false)","<p>Same as <code>indent</code>, except it indents the receiver in-place.\n<p>Returns the indented string, or <code>nil</code> if there …\n"],["index_by","Enumerable","Enumerable.html#method-i-index_by","()","<p>Convert an enumerable to a hash, using the block result as the key and the element as the value.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">people</span>.<span class=\"ruby-identifier\">index_by</span>(<span class=\"ruby-operator\">&amp;</span><span class=\"ruby-value\">:login</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["index_with","Enumerable","Enumerable.html#method-i-index_with","(default = INDEX_WITH_DEFAULT)","<p>Convert an enumerable to a hash, using the element as the key and the block result as the value.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">post</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["inflections","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-inflections","(locale = :en)","<p>Yields a singleton instance of Inflector::Inflections so you can specify additional inflector rules. …\n"],["inheritable_copy","ActiveSupport::InheritableOptions","ActiveSupport/InheritableOptions.html#method-i-inheritable_copy","()",""],["inherited","ActiveSupport::DescendantsTracker","ActiveSupport/DescendantsTracker.html#method-i-inherited","(base)",""],["initialize_copy","ActiveSupport::SafeBuffer","ActiveSupport/SafeBuffer.html#method-i-initialize_copy","(other)",""],["inquiry","Array","Array.html#method-i-inquiry","()","<p>Wraps the array in an <code>ArrayInquirer</code> object, which gives a friendlier way to check its string-like contents. …\n"],["inquiry","String","String.html#method-i-inquiry","()","<p>Wraps the current string in the <code>ActiveSupport::StringInquirer</code> class, which gives you a prettier way to …\n"],["insert","ActiveSupport::SafeBuffer","ActiveSupport/SafeBuffer.html#method-i-insert","(index, value)",""],["inspect","ActiveSupport::Cache::RedisCacheStore","ActiveSupport/Cache/RedisCacheStore.html#method-i-inspect","()",""],["inspect","ActiveSupport::Deprecation::DeprecatedConstantProxy","ActiveSupport/Deprecation/DeprecatedConstantProxy.html#method-i-inspect","()","<p>Don&#39;t give a deprecation warning on inspect since test/unit and error logs rely on it for diagnostics. …\n"],["inspect","ActiveSupport::OrderedOptions","ActiveSupport/OrderedOptions.html#method-i-inspect","()",""],["inspect","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-inspect","()","<p>Returns a string of the object&#39;s date, time, zone, and offset from UTC.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">zone</span>.<span class=\"ruby-identifier\">now</span>.<span class=\"ruby-identifier\">inspect</span> <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["inspect","Date","Date.html#method-i-inspect","()",""],["inspect","DateTime","DateTime.html#method-i-inspect","()",""],["instance","ActiveSupport::CurrentAttributes","ActiveSupport/CurrentAttributes.html#method-c-instance","()","<p>Returns singleton instance for this class in this thread. If none exists, one is created.\n"],["instance","ActiveSupport::Inflector::Inflections","ActiveSupport/Inflector/Inflections.html#method-c-instance","(locale = :en)",""],["instance","ActiveSupport::PerThreadRegistry","ActiveSupport/PerThreadRegistry.html#method-i-instance","()",""],["instance_values","Object","Object.html#method-i-instance_values","()","<p>Returns a hash with string keys that maps instance variable names without “@” to their corresponding …\n"],["instance_variable_names","Object","Object.html#method-i-instance_variable_names","()","<p>Returns an array of instance variable names as strings including “@”.\n\n<pre>class C\n  def initialize(x, ...</pre>\n"],["instrument","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-instrument","(operation, key, options = nil)",""],["instrument","ActiveSupport::Notifications","ActiveSupport/Notifications.html#method-c-instrument","(name, payload = {})",""],["instrument","ActiveSupport::Notifications::Instrumenter","ActiveSupport/Notifications/Instrumenter.html#method-i-instrument","(name, payload = {})","<p>Given a block, instrument it by measuring the time taken to execute and publish it. Without a block, …\n"],["instrumenter","ActiveSupport::Notifications","ActiveSupport/Notifications.html#method-c-instrumenter","()",""],["invalid_event?","ActiveSupport::Subscriber","ActiveSupport/Subscriber.html#method-c-invalid_event-3F","(event)",""],["irregular","ActiveSupport::Inflector::Inflections","ActiveSupport/Inflector/Inflections.html#method-i-irregular","(singular, plural)","<p>Specifies a new irregular that applies to both pluralization and singularization at the same time. This …\n"],["is_a?","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-is_a-3F","(klass)","<p>Say we&#39;re a Time to thwart type checking.\n"],["is_missing?","LoadError","LoadError.html#method-i-is_missing-3F","(location)","<p>Returns true if the given path name (except perhaps for the “.rb” extension) is the missing …\n"],["is_utf8?","String","String.html#method-i-is_utf8-3F","()","<p>Returns <code>true</code> if string has utf_8 encoding.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">utf_8_str</span> = <span class=\"ruby-string\">&quot;some string&quot;</span>.<span class=\"ruby-identifier\">encode</span> <span class=\"ruby-string\">&quot;UTF-8&quot;</span>\n<span class=\"ruby-identifier\">iso_str</span> = <span class=\"ruby-string\">&quot;some string&quot;</span>.<span class=\"ruby-identifier\">encode</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["isdst","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-isdst","()",""],["iso8601","ActiveSupport::Duration","ActiveSupport/Duration.html#method-i-iso8601","(precision: nil)","<p>Build ISO 8601 Duration string for this duration. The <code>precision</code> parameter can be used to limit seconds&#39; …\n"],["iso8601","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-iso8601","(fraction_digits = 0)",""],["iso8601","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-iso8601","(str)","<p>Method for creating new ActiveSupport::TimeWithZone instance in time zone of <code>self</code> from an ISO 8601 string. …\n"],["json_escape","ERB::Util","ERB/Util.html#method-c-json_escape","(s)","<p>A utility method for escaping HTML entities in JSON strings. Specifically, the &amp;, &gt; and &lt; characters …\n"],["json_escape","ERB::Util","ERB/Util.html#method-i-json_escape","(s)","<p>A utility method for escaping HTML entities in JSON strings. Specifically, the &amp;, &gt; and &lt; characters …\n"],["key","ActiveSupport::EncryptedFile","ActiveSupport/EncryptedFile.html#method-i-key","()",""],["key?","ActiveSupport::Dependencies::ClassCache","ActiveSupport/Dependencies/ClassCache.html#method-i-key-3F","(key)",""],["key?","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-key-3F","(key)","<p>Checks the hash for a key matching the argument passed in:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">hash</span> = <span class=\"ruby-constant\">ActiveSupport</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HashWithIndifferentAccess</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["key?","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-key-3F","(key)","<p>Checks the hash for a key matching the argument passed in:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">hash</span> = <span class=\"ruby-constant\">ActiveSupport</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HashWithIndifferentAccess</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["key_len","ActiveSupport::MessageEncryptor","ActiveSupport/MessageEncryptor.html#method-c-key_len","(cipher = default_cipher)","<p>Given a cipher, returns the key length of the cipher to help generate the key of desired size\n"],["key_matcher","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-key_matcher","(pattern, options)","<p>Adds the namespace defined in the options to a pattern designed to match keys. Implementations that support …\n"],["kilobyte","Numeric","Numeric.html#method-i-kilobyte","()",""],["kilobytes","Numeric","Numeric.html#method-i-kilobytes","()","<p>Returns the number of bytes equivalent to the kilobytes provided.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">2</span>.<span class=\"ruby-identifier\">kilobytes</span> <span class=\"ruby-comment\"># =&gt; 2048</span>\n</pre>\n"],["kind_of?","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-kind_of-3F","(klass)",""],["last","String","String.html#method-i-last","(limit = 1)","<p>Returns the last character of the string. If a limit is supplied, returns a substring from the end of …\n"],["last_hour","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-last_hour","(date_or_time)",""],["last_month","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-last_month","()","<p>Short-hand for months_ago(1).\n"],["last_quarter","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-last_quarter","()",""],["last_week","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-last_week","(start_day = Date.beginning_of_week, same_time: false)",""],["last_weekday","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-last_weekday","()",""],["last_year","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-last_year","()","<p>Short-hand for years_ago(1).\n"],["limit","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-limit","(limit)","<p>Limits the byte size of the string to a number of bytes without breaking characters. Usable when the …\n"],["listeners_for","ActiveSupport::Notifications::Fanout","ActiveSupport/Notifications/Fanout.html#method-i-listeners_for","(name)",""],["listening?","ActiveSupport::Notifications::Fanout","ActiveSupport/Notifications/Fanout.html#method-i-listening-3F","(name)",""],["load_country_zones","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-c-load_country_zones","(code)",""],["load_interlock","ActiveSupport::Dependencies","ActiveSupport/Dependencies.html#method-c-load_interlock","()","<p>Execute the supplied block while holding an exclusive lock, preventing any other thread from being inside …\n"],["loading","ActiveSupport::Dependencies::Interlock","ActiveSupport/Dependencies/Interlock.html#method-i-loading","()",""],["local","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-local","(*args)","<p>Method for creating new ActiveSupport::TimeWithZone instance in time zone of <code>self</code> from given values. …\n"],["local_cache","ActiveSupport::Cache::Strategy::LocalCache","ActiveSupport/Cache/Strategy/LocalCache.html#method-i-local_cache","()",""],["local_cache_key","ActiveSupport::Cache::Strategy::LocalCache","ActiveSupport/Cache/Strategy/LocalCache.html#method-i-local_cache_key","()",""],["local_to_utc","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-local_to_utc","(time, dst = true)","<p>Adjust the given time to the simultaneous time in UTC. Returns a Time.utc() instance.\n"],["localtime","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-localtime","(utc_offset = nil)","<p>Returns a <code>Time</code> instance of the simultaneous time in the system timezone.\n"],["localtime","DateTime","DateTime.html#method-i-localtime","(utc_offset = nil)","<p>Returns a <code>Time</code> instance of the simultaneous time in the system timezone.\n"],["lock_file","ActiveSupport::Cache::FileStore","ActiveSupport/Cache/FileStore.html#method-i-lock_file","(file_name, &block)","<p>Lock a file for a block so only one process can modify it at a time.\n"],["log_subscribers","ActiveSupport::LogSubscriber","ActiveSupport/LogSubscriber.html#method-c-log_subscribers","()",""],["logged","ActiveSupport::LogSubscriber::TestHelper::MockLogger","ActiveSupport/LogSubscriber/TestHelper/MockLogger.html#method-i-logged","(level)",""],["logger","ActiveSupport::LogSubscriber","ActiveSupport/LogSubscriber.html#method-c-logger","()",""],["logger","ActiveSupport::LogSubscriber","ActiveSupport/LogSubscriber.html#method-i-logger","()",""],["logger_outputs_to?","ActiveSupport::Logger","ActiveSupport/Logger.html#method-c-logger_outputs_to-3F","(logger, *sources)","<p>Returns true if the logger destination matches one of the sources\n\n<pre>logger = Logger.new(STDOUT)\nActiveSupport::Logger.logger_outputs_to?(logger, ...</pre>\n"],["lookup_store","ActiveSupport::Cache","ActiveSupport/Cache.html#method-c-lookup_store","(store = nil, *parameters)","<p>Creates a new Store object according to the given options.\n<p>If no arguments are passed to this method, …\n"],["many?","Enumerable","Enumerable.html#method-i-many-3F","()","<p>Returns <code>true</code> if the enumerable has more than 1 element. Functionally equivalent to <code>enum.to_a.size &gt;</code> …\n"],["marshal_dump","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-marshal_dump","()",""],["marshal_load","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-marshal_load","(variables)",""],["match?","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-match-3F","(re)","<p>Compare #name and TZInfo identifier to a supplied regexp, returning <code>true</code> if a match is found.\n"],["mattr_accessor","Module","Module.html#method-i-mattr_accessor","(*syms, instance_reader: true, instance_writer: true, instance_accessor: true, default: nil, &blk)","<p>Defines both class and instance accessors for class attributes. All class and instance methods created …\n"],["mattr_reader","Module","Module.html#method-i-mattr_reader","(*syms, instance_reader: true, instance_accessor: true, default: nil, location: nil)","<p>Defines a class attribute and creates a class and instance reader methods. The underlying class variable …\n"],["mattr_writer","Module","Module.html#method-i-mattr_writer","(*syms, instance_writer: true, instance_accessor: true, default: nil, location: nil)","<p>Defines a class attribute and creates a class and instance writer methods to allow assignment to the …\n"],["max_mtime","ActiveSupport::FileUpdateChecker","ActiveSupport/FileUpdateChecker.html#method-i-max_mtime","(paths)","<p>This method returns the maximum mtime of the files in <code>paths</code>, or <code>nil</code> if the array is empty.\n<p>Files with …\n"],["mb_chars","String","String.html#method-i-mb_chars","()","<p>Multibyte proxy\n<p><code>mb_chars</code> is a multibyte safe proxy for string methods.\n<p>It creates and returns an instance …\n"],["megabyte","Numeric","Numeric.html#method-i-megabyte","()",""],["megabytes","Numeric","Numeric.html#method-i-megabytes","()","<p>Returns the number of bytes equivalent to the megabytes provided.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">2</span>.<span class=\"ruby-identifier\">megabytes</span> <span class=\"ruby-comment\"># =&gt; 2_097_152</span>\n</pre>\n"],["member?","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-member-3F","(key)",""],["member?","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-member-3F","(key)",""],["merge","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-merge","(*hashes, &block)","<p>This method has the same semantics of <code>update</code>, except it does not modify the receiver but rather returns …\n"],["merge","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-merge","(*hashes, &block)","<p>This method has the same semantics of <code>update</code>, except it does not modify the receiver but rather returns …\n"],["merge!","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-merge-21","(*other_hashes, &block)",""],["merge!","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-merge-21","(*other_hashes, &block)",""],["merged_options","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-merged_options","(call_options)","<p>Merges the default options with ones specific to a method call.\n"],["method_added","ActiveSupport::Subscriber","ActiveSupport/Subscriber.html#method-c-method_added","(event)","<p>Adds event subscribers for all new methods added to the class.\n"],["method_missing","ActiveSupport::ArrayInquirer","ActiveSupport/ArrayInquirer.html#method-i-method_missing","(name, *args)",""],["method_missing","ActiveSupport::CurrentAttributes","ActiveSupport/CurrentAttributes.html#method-c-method_missing","(name, *args, &block)",""],["method_missing","ActiveSupport::Deprecation::DeprecatedConstantProxy","ActiveSupport/Deprecation/DeprecatedConstantProxy.html#method-i-method_missing","(called, *args, &block)",""],["method_missing","ActiveSupport::Duration","ActiveSupport/Duration.html#method-i-method_missing","(method, *args, &block)",""],["method_missing","ActiveSupport::LogSubscriber::TestHelper::MockLogger","ActiveSupport/LogSubscriber/TestHelper/MockLogger.html#method-i-method_missing","(level, message = nil)",""],["method_missing","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-method_missing","(method, *args, &block)","<p>Forward all undefined methods to the wrapped string.\n"],["method_missing","ActiveSupport::OrderedOptions","ActiveSupport/OrderedOptions.html#method-i-method_missing","(name, *args)",""],["method_missing","ActiveSupport::PerThreadRegistry","ActiveSupport/PerThreadRegistry.html#method-i-method_missing","(name, *args, &block)",""],["method_missing","ActiveSupport::StringInquirer","ActiveSupport/StringInquirer.html#method-i-method_missing","(method_name, *arguments)",""],["method_missing","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-method_missing","(sym, *args, &block)","<p>Send the missing method to <code>time</code> instance, and wrap result in a new TimeWithZone with the existing <code>time_zone</code> …\n"],["midday","Date","Date.html#method-i-midday","()",""],["midday","DateTime","DateTime.html#method-i-midday","()",""],["midday","Time","Time.html#method-i-midday","()",""],["middle_of_day","Date","Date.html#method-i-middle_of_day","()","<p>Converts Date to a Time (or DateTime if necessary) with the time portion set to the middle of the day …\n"],["middle_of_day","DateTime","DateTime.html#method-i-middle_of_day","()","<p>Returns a new DateTime representing the middle of the day (12:00)\n"],["middle_of_day","Time","Time.html#method-i-middle_of_day","()","<p>Returns a new Time representing the middle of the day (12:00)\n"],["middleware","ActiveSupport::Cache::Strategy::LocalCache","ActiveSupport/Cache/Strategy/LocalCache.html#method-i-middleware","()","<p>Middleware class can be inserted as a Rack handler to be local cache for the duration of request.\n"],["midnight","Date","Date.html#method-i-midnight","()",""],["midnight","DateTime","DateTime.html#method-i-midnight","()",""],["midnight","Time","Time.html#method-i-midnight","()",""],["minus_with_coercion","Time","Time.html#method-i-minus_with_coercion","(other)","<p>Time#- can also be used to determine the number of seconds between two Time instances. We&#39;re layering …\n"],["minus_without_coercion","Time","Time.html#method-i-minus_without_coercion","(other)",""],["minus_without_duration","Time","Time.html#method-i-minus_without_duration","(other)",""],["minute","Numeric","Numeric.html#method-i-minute","()",""],["minutes","Numeric","Numeric.html#method-i-minutes","()","<p>Returns a Duration instance matching the number of minutes provided.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">2</span>.<span class=\"ruby-identifier\">minutes</span> <span class=\"ruby-comment\"># =&gt; 2 minutes</span>\n</pre>\n"],["missing_name","NameError","NameError.html#method-i-missing_name","()","<p>Extract the name of the missing constant from the exception message.\n\n<pre>begin\n  HelloWorld\nrescue NameError ...</pre>\n"],["missing_name?","NameError","NameError.html#method-i-missing_name-3F","(name)","<p>Was this exception raised because the given name was missing?\n\n<pre>begin\n  HelloWorld\nrescue NameError =&gt; e ...</pre>\n"],["modify_value","ActiveSupport::Cache::FileStore","ActiveSupport/Cache/FileStore.html#method-i-modify_value","(name, amount, options)","<p>Modifies the amount of an already existing integer value that is stored in the cache. If the key is not …\n"],["modify_value","ActiveSupport::Cache::MemoryStore","ActiveSupport/Cache/MemoryStore.html#method-i-modify_value","(name, amount, options)",""],["module_parent","Module","Module.html#method-i-module_parent","()","<p>Returns the module which contains this one according to its name.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">module</span> <span class=\"ruby-constant\">M</span>\n  <span class=\"ruby-keyword\">module</span> <span class=\"ruby-constant\">N</span>\n  <span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-constant\">X</span> = <span class=\"ruby-constant\">M</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">N</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["module_parent_name","Module","Module.html#method-i-module_parent_name","()","<p>Returns the name of the module containing this one.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">M</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">N</span>.<span class=\"ruby-identifier\">module_parent_name</span> <span class=\"ruby-comment\"># =&gt; &quot;M&quot;</span>\n</pre>\n"],["module_parents","Module","Module.html#method-i-module_parents","()","<p>Returns all the parents of this module according to its name, ordered from nested outwards. The receiver …\n"],["mon_enter","ActiveSupport::Concurrency::LoadInterlockAwareMonitor","ActiveSupport/Concurrency/LoadInterlockAwareMonitor.html#method-i-mon_enter","()","<p>Enters an exclusive section, but allows dependency loading while blocked\n"],["monday","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-monday","()","<p>Returns Monday of this week assuming that week starts on Monday. <code>DateTime</code> objects have their time set …\n"],["monotonic_subscribe","ActiveSupport::Notifications","ActiveSupport/Notifications.html#method-c-monotonic_subscribe","(pattern = nil, callback = nil, &block)",""],["month","Integer","Integer.html#method-i-month","()",""],["months","Integer","Integer.html#method-i-months","()","<p>Returns a Duration instance matching the number of months provided.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">2</span>.<span class=\"ruby-identifier\">months</span> <span class=\"ruby-comment\"># =&gt; 2 months</span>\n</pre>\n"],["months_ago","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-months_ago","(months)","<p>Returns a new date/time the specified number of months ago.\n"],["months_since","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-months_since","(months)","<p>Returns a new date/time the specified number of months in the future.\n"],["ms","Benchmark","Benchmark.html#method-c-ms","(&block)","<p>Benchmark realtime in milliseconds.\n\n<pre>Benchmark.realtime { User.all }\n# =&gt; 8.0e-05\n\nBenchmark.ms { User.all ...</pre>\n"],["multiline?","Regexp","Regexp.html#method-i-multiline-3F","()","<p>Returns <code>true</code> if the regexp has the multiline flag set.\n\n<pre class=\"ruby\">(<span class=\"ruby-regexp\">/./</span>).<span class=\"ruby-identifier\">multiline?</span>  <span class=\"ruby-comment\"># =&gt; false</span>\n(<span class=\"ruby-regexp\">/./m</span>).<span class=\"ruby-identifier\">multiline?</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["multiple_of?","Integer","Integer.html#method-i-multiple_of-3F","(number)","<p>Check whether the integer is evenly divisible by the argument.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">0</span>.<span class=\"ruby-identifier\">multiple_of?</span>(<span class=\"ruby-value\">0</span>)  <span class=\"ruby-comment\"># =&gt; true</span>\n<span class=\"ruby-value\">6</span>.<span class=\"ruby-identifier\">multiple_of?</span>(<span class=\"ruby-value\">5</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["mute","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-mute","()","<p>Silences the logger within a block.\n"],["name","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-c-name","()","<p>Report class name as &#39;Time&#39; to thwart type checking.\n"],["namespace_key","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-namespace_key","(key, options = nil)","<p>Prefix the key with a namespace string:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">namespace_key</span> <span class=\"ruby-string\">&#39;foo&#39;</span>, <span class=\"ruby-value\">namespace:</span> <span class=\"ruby-string\">&#39;cache&#39;</span>\n<span class=\"ruby-comment\"># =&gt; &#39;cache:foo&#39;</span>\n</pre>\n<p>With a …\n"],["nested_under_indifferent_access","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-nested_under_indifferent_access","()",""],["nested_under_indifferent_access","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-nested_under_indifferent_access","()",""],["nested_under_indifferent_access","ActiveSupport::OrderedHash","ActiveSupport/OrderedHash.html#method-i-nested_under_indifferent_access","()",""],["nested_under_indifferent_access","Hash","Hash.html#method-i-nested_under_indifferent_access","()","<p>Called when object is nested under an object that receives #with_indifferent_access. This method will …\n"],["new","ActiveSupport::BacktraceCleaner","ActiveSupport/BacktraceCleaner.html#method-c-new","()",""],["new","ActiveSupport::Cache::FileStore","ActiveSupport/Cache/FileStore.html#method-c-new","(cache_path, options = nil)",""],["new","ActiveSupport::Cache::MemCacheStore","ActiveSupport/Cache/MemCacheStore.html#method-c-new","(*addresses)","<p>Creates a new MemCacheStore object, with the given memcached server addresses. Each address is either …\n"],["new","ActiveSupport::Cache::MemoryStore","ActiveSupport/Cache/MemoryStore.html#method-c-new","(options = nil)",""],["new","ActiveSupport::Cache::RedisCacheStore","ActiveSupport/Cache/RedisCacheStore.html#method-c-new","(namespace: nil, compress: true, compress_threshold: 1.kilobyte, coder: DEFAULT_CODER, expires_in: nil, race_condition_ttl: nil, error_handler: DEFAULT_ERROR_HANDLER, **redis_options)","<p>Creates a new Redis cache store.\n<p>Handles four options: :redis block, :redis instance, single :url string, …\n"],["new","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-c-new","(options = nil)","<p>Creates a new cache. The options will be passed to any write method calls except for <code>:namespace</code> which …\n"],["new","ActiveSupport::Cache::Strategy::LocalCache::LocalStore","ActiveSupport/Cache/Strategy/LocalCache/LocalStore.html#method-c-new","()",""],["new","ActiveSupport::CachingKeyGenerator","ActiveSupport/CachingKeyGenerator.html#method-c-new","(key_generator)",""],["new","ActiveSupport::Callbacks::Conditionals::Value","ActiveSupport/Callbacks/Conditionals/Value.html#method-c-new","(&block)",""],["new","ActiveSupport::Concurrency::ShareLock","ActiveSupport/Concurrency/ShareLock.html#method-c-new","()",""],["new","ActiveSupport::CurrentAttributes","ActiveSupport/CurrentAttributes.html#method-c-new","()",""],["new","ActiveSupport::Dependencies::ClassCache","ActiveSupport/Dependencies/ClassCache.html#method-c-new","()",""],["new","ActiveSupport::Dependencies::WatchStack","ActiveSupport/Dependencies/WatchStack.html#method-c-new","()",""],["new","ActiveSupport::Deprecation","ActiveSupport/Deprecation.html#method-c-new","(deprecation_horizon = \"6.2\", gem_name = \"Rails\")","<p>It accepts two parameters on initialization. The first is a version of library and the second is a library …\n"],["new","ActiveSupport::Deprecation::DeprecatedConstantProxy","ActiveSupport/Deprecation/DeprecatedConstantProxy.html#method-c-new","(*args, **options, &block)",""],["new","ActiveSupport::Deprecation::DeprecatedConstantProxy","ActiveSupport/Deprecation/DeprecatedConstantProxy.html#method-c-new","(old_const, new_const, deprecator = ActiveSupport::Deprecation.instance, message: \"#{old_const} is deprecated! Use #{new_const} instead.\")",""],["new","ActiveSupport::Deprecation::DeprecatedInstanceVariableProxy","ActiveSupport/Deprecation/DeprecatedInstanceVariableProxy.html#method-c-new","(instance, method, var = \"@#{method}\", deprecator = ActiveSupport::Deprecation.instance)",""],["new","ActiveSupport::Deprecation::DeprecatedObjectProxy","ActiveSupport/Deprecation/DeprecatedObjectProxy.html#method-c-new","(object, message, deprecator = ActiveSupport::Deprecation.instance)",""],["new","ActiveSupport::EncryptedConfiguration","ActiveSupport/EncryptedConfiguration.html#method-c-new","(config_path:, key_path:, env_key:, raise_if_missing_key:)",""],["new","ActiveSupport::EncryptedFile","ActiveSupport/EncryptedFile.html#method-c-new","(content_path:, key_path:, env_key:, raise_if_missing_key:)",""],["new","ActiveSupport::EncryptedFile::InvalidKeyLengthError","ActiveSupport/EncryptedFile/InvalidKeyLengthError.html#method-c-new","()",""],["new","ActiveSupport::EncryptedFile::MissingContentError","ActiveSupport/EncryptedFile/MissingContentError.html#method-c-new","(content_path)",""],["new","ActiveSupport::EncryptedFile::MissingKeyError","ActiveSupport/EncryptedFile/MissingKeyError.html#method-c-new","(key_path:, env_key:)",""],["new","ActiveSupport::FileUpdateChecker","ActiveSupport/FileUpdateChecker.html#method-c-new","(files, dirs = {}, &block)","<p>It accepts two parameters on initialization. The first is an array of files and the second is an optional …\n"],["new","ActiveSupport::Gzip::Stream","ActiveSupport/Gzip/Stream.html#method-c-new","(*)",""],["new","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-c-new","(constructor = {})",""],["new","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-c-new","(constructor = {})",""],["new","ActiveSupport::Inflector::Inflections","ActiveSupport/Inflector/Inflections.html#method-c-new","()",""],["new","ActiveSupport::Inflector::Inflections::Uncountables","ActiveSupport/Inflector/Inflections/Uncountables.html#method-c-new","()",""],["new","ActiveSupport::InheritableOptions","ActiveSupport/InheritableOptions.html#method-c-new","(parent = nil)",""],["new","ActiveSupport::KeyGenerator","ActiveSupport/KeyGenerator.html#method-c-new","(secret, options = {})",""],["new","ActiveSupport::LogSubscriber::TestHelper::MockLogger","ActiveSupport/LogSubscriber/TestHelper/MockLogger.html#method-c-new","(level = DEBUG)",""],["new","ActiveSupport::Logger","ActiveSupport/Logger.html#method-c-new","(*args, **kwargs)",""],["new","ActiveSupport::MessageEncryptor","ActiveSupport/MessageEncryptor.html#method-c-new","(secret, sign_secret = nil, cipher: nil, digest: nil, serializer: nil)","<p>Initialize a new MessageEncryptor. <code>secret</code> must be at least as long as the cipher key size. For the default …\n"],["new","ActiveSupport::MessageVerifier","ActiveSupport/MessageVerifier.html#method-c-new","(secret, digest: nil, serializer: nil)",""],["new","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-c-new","(string)","<p>Creates a new Chars instance by wrapping <em>string</em>.\n"],["new","ActiveSupport::Notifications::Event","ActiveSupport/Notifications/Event.html#method-c-new","(name, start, ending, transaction_id, payload)",""],["new","ActiveSupport::Notifications::Fanout","ActiveSupport/Notifications/Fanout.html#method-c-new","()",""],["new","ActiveSupport::Notifications::Instrumenter","ActiveSupport/Notifications/Instrumenter.html#method-c-new","(notifier)",""],["new","ActiveSupport::ParameterFilter","ActiveSupport/ParameterFilter.html#method-c-new","(filters = [], mask: FILTERED)","<p>Create instance with given filters. Supported type of filters are <code>String</code>, <code>Regexp</code>, and <code>Proc</code>. Other types …\n"],["new","ActiveSupport::Reloader","ActiveSupport/Reloader.html#method-c-new","()",""],["new","ActiveSupport::SafeBuffer","ActiveSupport/SafeBuffer.html#method-c-new","(str = \"\")",""],["new","ActiveSupport::SafeBuffer::SafeConcatError","ActiveSupport/SafeBuffer/SafeConcatError.html#method-c-new","()",""],["new","ActiveSupport::SecureCompareRotator","ActiveSupport/SecureCompareRotator.html#method-c-new","(value, **_options)",""],["new","ActiveSupport::Subscriber","ActiveSupport/Subscriber.html#method-c-new","()",""],["new","ActiveSupport::TaggedLogging","ActiveSupport/TaggedLogging.html#method-c-new","(logger)",""],["new","ActiveSupport::Testing::Parallelization::Server","ActiveSupport/Testing/Parallelization/Server.html#method-c-new","()",""],["new","ActiveSupport::Testing::Parallelization::Worker","ActiveSupport/Testing/Parallelization/Worker.html#method-c-new","(number, url)",""],["new","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-c-new","(utc_time, time_zone, local_time = nil, period = nil)",""],["new","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-c-new","(name, utc_offset = nil, tzinfo = nil)","<p>Create a new TimeZone object with the given name and offset. The offset is the number of seconds that …\n"],["new","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-c-new","(name)","<p>Returns a TimeZone instance with the given name, or <code>nil</code> if no such TimeZone instance exists. (This exists …\n"],["new","ActiveSupport::XMLConverter::DisallowedType","ActiveSupport/XMLConverter/DisallowedType.html#method-c-new","(type)",""],["new_cipher","ActiveSupport::MessageEncryptor","ActiveSupport/MessageEncryptor.html#method-i-new_cipher","()",""],["new_constants","ActiveSupport::Dependencies::WatchStack","ActiveSupport/Dependencies/WatchStack.html#method-i-new_constants","()","<p>Returns a list of new constants found since the last call to <code>watch_namespaces</code>.\n"],["next_day","Time","Time.html#method-i-next_day","(days = 1)","<p>Returns a new time the specified number of days in the future.\n"],["next_day?","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-next_day-3F","()",""],["next_day?","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-next_day-3F","()",""],["next_month","Time","Time.html#method-i-next_month","(months = 1)","<p>Returns a new time the specified number of months in the future.\n"],["next_occurring","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-next_occurring","(day_of_week)","<p>Returns a new date/time representing the next occurrence of the specified day of week.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">today</span> = <span class=\"ruby-constant\">Date</span>.<span class=\"ruby-identifier\">today</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["next_quarter","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-next_quarter","()","<p>Short-hand for months_since(3)\n"],["next_week","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-next_week","(given_day_in_next_week = Date.beginning_of_week, same_time: false)","<p>Returns a new date/time representing the given day in the next week.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">today</span> = <span class=\"ruby-constant\">Date</span>.<span class=\"ruby-identifier\">today</span> <span class=\"ruby-comment\"># =&gt; Thu, 07 May ...</span>\n</pre>\n"],["next_weekday","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-next_weekday","()","<p>Returns a new date/time representing the next weekday.\n"],["next_year","Time","Time.html#method-i-next_year","(years = 1)","<p>Returns a new time the specified number of years in the future.\n"],["noise","ActiveSupport::BacktraceCleaner","ActiveSupport/BacktraceCleaner.html#method-i-noise","(backtrace)",""],["noon","Date","Date.html#method-i-noon","()",""],["noon","DateTime","DateTime.html#method-i-noon","()",""],["noon","Time","Time.html#method-i-noon","()",""],["normalize_key","ActiveSupport::Cache::FileStore","ActiveSupport/Cache/FileStore.html#method-i-normalize_key","(key, options)","<p>Translate a key into a file path.\n"],["normalize_key","ActiveSupport::Cache::MemCacheStore","ActiveSupport/Cache/MemCacheStore.html#method-i-normalize_key","(key, options)","<p>Memcache keys are binaries. So we need to force their encoding to binary before applying the regular …\n"],["normalize_key","ActiveSupport::Cache::RedisCacheStore","ActiveSupport/Cache/RedisCacheStore.html#method-i-normalize_key","(key, options)","<p>Truncate keys that exceed 1kB.\n"],["normalize_key","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-normalize_key","(key, options = nil)","<p>Expands and namespaces the cache key. May be overridden by cache stores to do additional normalization. …\n"],["normalize_version","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-normalize_version","(key, options = nil)",""],["now","ActiveSupport::Notifications::Event","ActiveSupport/Notifications/Event.html#method-i-now","()",""],["now","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-now","()","<p>Returns an ActiveSupport::TimeWithZone instance representing the current time in the time zone represented …\n"],["now_allocations","ActiveSupport::Notifications::Event","ActiveSupport/Notifications/Event.html#method-i-now_allocations","()",""],["now_cpu","ActiveSupport::Notifications::Event","ActiveSupport/Notifications/Event.html#method-i-now_cpu","()",""],["nsec","DateTime","DateTime.html#method-i-nsec","()","<p>Returns the fraction of a second as nanoseconds\n"],["number_to_currency","ActiveSupport::NumberHelper","ActiveSupport/NumberHelper.html#method-i-number_to_currency","(number, options = {})","<p>Formats a <code>number</code> into a currency string (e.g., $13.65). You can customize the format in the <code>options</code> hash. …\n"],["number_to_delimited","ActiveSupport::NumberHelper","ActiveSupport/NumberHelper.html#method-i-number_to_delimited","(number, options = {})","<p>Formats a <code>number</code> with grouped thousands using <code>delimiter</code> (e.g., 12,324). You can customize the format …\n"],["number_to_human","ActiveSupport::NumberHelper","ActiveSupport/NumberHelper.html#method-i-number_to_human","(number, options = {})","<p>Pretty prints (formats and approximates) a number in a way it is more readable by humans (e.g.: 1200000000 …\n"],["number_to_human_size","ActiveSupport::NumberHelper","ActiveSupport/NumberHelper.html#method-i-number_to_human_size","(number, options = {})","<p>Formats the bytes in <code>number</code> into a more understandable representation (e.g., giving it 1500 yields 1.46 …\n"],["number_to_percentage","ActiveSupport::NumberHelper","ActiveSupport/NumberHelper.html#method-i-number_to_percentage","(number, options = {})","<p>Formats a <code>number</code> as a percentage string (e.g., 65%). You can customize the format in the <code>options</code> hash. …\n"],["number_to_phone","ActiveSupport::NumberHelper","ActiveSupport/NumberHelper.html#method-i-number_to_phone","(number, options = {})","<p>Formats a <code>number</code> into a phone number (US by default e.g., (555) 123-9876). You can customize the format …\n"],["number_to_rounded","ActiveSupport::NumberHelper","ActiveSupport/NumberHelper.html#method-i-number_to_rounded","(number, options = {})","<p>Formats a <code>number</code> with the specified level of <code>:precision</code> (e.g., 112.32 has a precision of 2 if <code>:significant</code> …\n"],["offset_in_seconds","DateTime","DateTime.html#method-i-offset_in_seconds","()",""],["on_cdata_block","ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-on_cdata_block","(string)",""],["on_characters","ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-on_characters","(string)",""],["on_end_document","ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-on_end_document","()",""],["on_end_element","ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-on_end_element","(name)",""],["on_load","ActiveSupport::LazyLoadHooks","ActiveSupport/LazyLoadHooks.html#method-i-on_load","(name, options = {}, &block)","<p>Declares a block that will be executed when a Rails component is fully loaded.\n<p>Options:\n<p><code>:yield</code> - Yields …\n"],["on_start_document","ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-on_start_document","()",""],["on_start_element","ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-on_start_element","(name, attrs = {})",""],["on_weekday?","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-on_weekday-3F","()","<p>Returns true if the date/time does not fall on a Saturday or Sunday.\n"],["on_weekend?","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-on_weekend-3F","()","<p>Returns true if the date/time falls on a Saturday or Sunday.\n"],["options","ActiveSupport::EncryptedConfiguration","ActiveSupport/EncryptedConfiguration.html#method-i-options","()",""],["ordinal","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-ordinal","(number)","<p>Returns the suffix that should be added to a number to denote the position in an ordered sequence such …\n"],["ordinal","Integer","Integer.html#method-i-ordinal","()","<p>Ordinal returns the suffix used to denote the position in an ordered sequence such as 1st, 2nd, 3rd, …\n"],["ordinalize","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-ordinalize","(number)","<p>Turns a number into an ordinal string used to denote the position in an ordered sequence such as 1st, …\n"],["ordinalize","Integer","Integer.html#method-i-ordinalize","()","<p>Ordinalize turns a number into an ordinal string used to denote the position in an ordered sequence such …\n"],["original_concat","ActiveSupport::SafeBuffer","ActiveSupport/SafeBuffer.html#method-i-original_concat","(value)",""],["overlaps?","Range","Range.html#method-i-overlaps-3F","(other)","<p>Compare two ranges and see if they overlap each other\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">5</span>).<span class=\"ruby-identifier\">overlaps?</span>(<span class=\"ruby-value\">4</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">6</span>) <span class=\"ruby-comment\"># =&gt; true</span>\n(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">5</span>).<span class=\"ruby-identifier\">overlaps?</span>(<span class=\"ruby-value\">7</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">9</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["parallelize","ActiveSupport::TestCase","ActiveSupport/TestCase.html#method-c-parallelize","(workers: :number_of_processors, with: :processes)","<p>Parallelizes the test suite.\n<p>Takes a <code>workers</code> argument that controls how many times the process is forked. …\n"],["parallelize_setup","ActiveSupport::TestCase","ActiveSupport/TestCase.html#method-c-parallelize_setup","(&block)","<p>Set up hook for parallel testing. This can be used if you have multiple databases or any behavior that …\n"],["parallelize_teardown","ActiveSupport::TestCase","ActiveSupport/TestCase.html#method-c-parallelize_teardown","(&block)","<p>Clean up hook for parallel testing. This can be used to drop databases if your app uses multiple write/read …\n"],["parameterize","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-parameterize","(string, separator: \"-\", preserve_case: false, locale: nil)","<p>Replaces special characters in a string so that it may be used as part of a &#39;pretty&#39; URL.\n\n<pre>parameterize(&quot;Donald ...</pre>\n"],["parameterize","String","String.html#method-i-parameterize","(separator: \"-\", preserve_case: false, locale: nil)","<p>Replaces special characters in a string so that it may be used as part of a &#39;pretty&#39; URL.\n<p>If the …\n"],["parent_of?","ActiveSupport::Notifications::Event","ActiveSupport/Notifications/Event.html#method-i-parent_of-3F","(event)",""],["parse","ActiveSupport::Duration","ActiveSupport/Duration.html#method-c-parse","(iso8601duration)","<p>Creates a new Duration from string formatted according to ISO 8601 Duration.\n<p>See ISO 8601 for more information. …\n"],["parse","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-parse","(str, now = now())","<p>Method for creating new ActiveSupport::TimeWithZone instance in time zone of <code>self</code> from parsed string. …\n"],["parse_error","ActiveSupport::JSON","ActiveSupport/JSON.html#method-c-parse_error","()","<p>Returns the class of the error that will be raised when there is an error in decoding JSON. Using this …\n"],["parser","URI","URI.html#method-c-parser","()",""],["parts_to_time","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-parts_to_time","(parts, now)",""],["past?","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-past-3F","()","<p>Returns true if the current object&#39;s time is in the past.\n"],["past?","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-past-3F","()","<p>Returns true if the date/time is in the past.\n"],["pattern_subscribed?","ActiveSupport::Subscriber","ActiveSupport/Subscriber.html#method-c-pattern_subscribed-3F","(pattern)",""],["perform_job","ActiveSupport::Testing::Parallelization::Worker","ActiveSupport/Testing/Parallelization/Worker.html#method-i-perform_job","(job)",""],["period","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-period","()","<p>Returns the underlying TZInfo::TimezonePeriod.\n"],["period_for_local","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-period_for_local","(time, dst = true)","<p>Available so that TimeZone instances respond like TZInfo::Timezone instances.\n"],["period_for_utc","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-period_for_utc","(time)","<p>Available so that TimeZone instances respond like TZInfo::Timezone instances.\n"],["permit_concurrent_loads","ActiveSupport::Dependencies::Interlock","ActiveSupport/Dependencies/Interlock.html#method-i-permit_concurrent_loads","()",""],["petabyte","Numeric","Numeric.html#method-i-petabyte","()",""],["petabytes","Numeric","Numeric.html#method-i-petabytes","()","<p>Returns the number of bytes equivalent to the petabytes provided.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">2</span>.<span class=\"ruby-identifier\">petabytes</span> <span class=\"ruby-comment\"># =&gt; 2_251_799_813_685_248</span>\n</pre>\n"],["pick","Enumerable","Enumerable.html#method-i-pick","(*keys)","<p>Extract the given key from the first element in the enumerable.\n\n<pre>[{ name: &quot;David&quot; }, { name: &quot;Rafael&quot; }, ...</pre>\n"],["pluck","Enumerable","Enumerable.html#method-i-pluck","(*keys)","<p>Extract the given key from each element in the enumerable.\n\n<pre>[{ name: &quot;David&quot; }, { name: &quot;Rafael&quot; }, { name: ...</pre>\n"],["plural","ActiveSupport::Inflector::Inflections","ActiveSupport/Inflector/Inflections.html#method-i-plural","(rule, replacement)","<p>Specifies a new pluralization rule and its replacement. The rule can either be a string or a regular …\n"],["pluralize","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-pluralize","(word, locale = :en)","<p>Returns the plural form of the word in the string.\n<p>If passed an optional <code>locale</code> parameter, the word will …\n"],["pluralize","String","String.html#method-i-pluralize","(count = nil, locale = :en)","<p>Returns the plural form of the word in the string.\n<p>If the optional parameter <code>count</code> is specified, the singular …\n"],["pop","ActiveSupport::Testing::Parallelization::Server","ActiveSupport/Testing/Parallelization/Server.html#method-i-pop","()",""],["pop_modules","ActiveSupport::Dependencies::WatchStack","ActiveSupport/Dependencies/WatchStack.html#method-i-pop_modules","(modules)",""],["prepare_pattern","ActiveSupport::Subscriber","ActiveSupport/Subscriber.html#method-c-prepare_pattern","(event)",""],["prepend","ActiveSupport::SafeBuffer","ActiveSupport/SafeBuffer.html#method-i-prepend","(value)",""],["prepended","ActiveSupport::Concern","ActiveSupport/Concern.html#method-i-prepended","(base = nil, &block)","<p>Evaluate given block in context of base class, so that you can write class macros here. When you define …\n"],["prepended","ActiveSupport::Testing::SetupAndTeardown","ActiveSupport/Testing/SetupAndTeardown.html#method-c-prepended","(klass)",""],["presence","Object","Object.html#method-i-presence","()","<p>Returns the receiver if it&#39;s present otherwise returns <code>nil</code>. <code>object.presence</code> is equivalent to\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">object</span>.<span class=\"ruby-identifier\">present?</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["presence_in","Object","Object.html#method-i-presence_in","(another_object)","<p>Returns the receiver if it&#39;s included in the argument otherwise returns <code>nil</code>. Argument must be any …\n"],["present?","Object","Object.html#method-i-present-3F","()","<p>An object is present if it&#39;s not blank.\n<p>@return [true, false]\n"],["prev_day","Time","Time.html#method-i-prev_day","(days = 1)","<p>Returns a new time the specified number of days ago.\n"],["prev_day?","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-prev_day-3F","()",""],["prev_day?","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-prev_day-3F","()",""],["prev_month","Time","Time.html#method-i-prev_month","(months = 1)","<p>Returns a new time the specified number of months ago.\n"],["prev_occurring","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-prev_occurring","(day_of_week)","<p>Returns a new date/time representing the previous occurrence of the specified day of week.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">today</span> = <span class=\"ruby-constant\">Date</span>.<span class=\"ruby-identifier\">today</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["prev_quarter","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-prev_quarter","()","<p>Short-hand for months_ago(3).\n"],["prev_week","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-prev_week","(start_day = Date.beginning_of_week, same_time: false)","<p>Returns a new date/time representing the given day in the previous week. Week is assumed to start on …\n"],["prev_weekday","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-prev_weekday","()","<p>Returns a new date/time representing the previous weekday.\n"],["prev_year","Time","Time.html#method-i-prev_year","(years = 1)","<p>Returns a new time the specified number of years ago.\n"],["proxy_class","ActiveSupport::Multibyte","ActiveSupport/Multibyte.html#method-c-proxy_class","()","<p>Returns the current proxy class.\n"],["proxy_class=","ActiveSupport::Multibyte","ActiveSupport/Multibyte.html#method-c-proxy_class-3D","(klass)","<p>The proxy class returned when calling mb_chars. You can use this accessor to configure your own proxy …\n"],["prune","ActiveSupport::Cache::MemoryStore","ActiveSupport/Cache/MemoryStore.html#method-i-prune","(target_size, max_time = nil)","<p>To ensure entries fit within the specified memory prune the cache by removing the least recently accessed …\n"],["pruning?","ActiveSupport::Cache::MemoryStore","ActiveSupport/Cache/MemoryStore.html#method-i-pruning-3F","()","<p>Returns true if the cache is currently being pruned.\n"],["publish","ActiveSupport::Notifications","ActiveSupport/Notifications.html#method-c-publish","(name, *args)",""],["publish","ActiveSupport::Notifications::Fanout","ActiveSupport/Notifications/Fanout.html#method-i-publish","(name, *args)",""],["raise","ActiveSupport::ProxyObject","ActiveSupport/ProxyObject.html#method-i-raise","(*args)","<p>Let ActiveSupport::ProxyObject at least raise exceptions.\n"],["raise_type_error","ActiveSupport::Duration","ActiveSupport/Duration.html#method-i-raise_type_error","(other)",""],["read","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-read","(name, options = nil)","<p>Reads data from the cache, using the given key. If there is data in the cache with the given key, then …\n"],["read","ActiveSupport::EncryptedConfiguration","ActiveSupport/EncryptedConfiguration.html#method-i-read","()","<p>Allow a config to be started without a file present\n"],["read","ActiveSupport::EncryptedFile","ActiveSupport/EncryptedFile.html#method-i-read","()",""],["read_entry","ActiveSupport::Cache::FileStore","ActiveSupport/Cache/FileStore.html#method-i-read_entry","(key, **options)",""],["read_entry","ActiveSupport::Cache::MemCacheStore","ActiveSupport/Cache/MemCacheStore.html#method-i-read_entry","(key, **options)","<p>Read an entry from the cache.\n"],["read_entry","ActiveSupport::Cache::MemoryStore","ActiveSupport/Cache/MemoryStore.html#method-i-read_entry","(key, **options)",""],["read_entry","ActiveSupport::Cache::NullStore","ActiveSupport/Cache/NullStore.html#method-i-read_entry","(key, **options)",""],["read_entry","ActiveSupport::Cache::RedisCacheStore","ActiveSupport/Cache/RedisCacheStore.html#method-i-read_entry","(key, **options)","<p>Store provider interface: Read an entry from the cache.\n"],["read_entry","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-read_entry","(key, **options)","<p>Reads an entry from the cache implementation. Subclasses must implement this method.\n"],["read_entry","ActiveSupport::Cache::Strategy::LocalCache","ActiveSupport/Cache/Strategy/LocalCache.html#method-i-read_entry","(key, **options)",""],["read_entry","ActiveSupport::Cache::Strategy::LocalCache::LocalStore","ActiveSupport/Cache/Strategy/LocalCache/LocalStore.html#method-i-read_entry","(key, **options)",""],["read_env_key","ActiveSupport::EncryptedFile","ActiveSupport/EncryptedFile.html#method-i-read_env_key","()",""],["read_key_file","ActiveSupport::EncryptedFile","ActiveSupport/EncryptedFile.html#method-i-read_key_file","()",""],["read_multi","ActiveSupport::Cache::RedisCacheStore","ActiveSupport/Cache/RedisCacheStore.html#method-i-read_multi","(*names)","<p>Cache Store API implementation.\n<p>Read multiple values at once. Returns a hash of requested keys -&gt; fetched …\n"],["read_multi","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-read_multi","(*names)","<p>Reads multiple values at once from the cache. Options can be passed in the last argument.\n<p>Some cache implementation …\n"],["read_multi_entries","ActiveSupport::Cache::MemCacheStore","ActiveSupport/Cache/MemCacheStore.html#method-i-read_multi_entries","(names, **options)","<p>Reads multiple entries from the cache implementation.\n"],["read_multi_entries","ActiveSupport::Cache::RedisCacheStore","ActiveSupport/Cache/RedisCacheStore.html#method-i-read_multi_entries","(names, **options)",""],["read_multi_entries","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-read_multi_entries","(names, **options)","<p>Reads multiple entries from the cache implementation. Subclasses MAY implement this method.\n"],["read_multi_entries","ActiveSupport::Cache::Strategy::LocalCache","ActiveSupport/Cache/Strategy/LocalCache.html#method-i-read_multi_entries","(keys, **options)",""],["read_multi_entries","ActiveSupport::Cache::Strategy::LocalCache::LocalStore","ActiveSupport/Cache/Strategy/LocalCache/LocalStore.html#method-i-read_multi_entries","(keys, **options)",""],["read_multi_mget","ActiveSupport::Cache::RedisCacheStore","ActiveSupport/Cache/RedisCacheStore.html#method-i-read_multi_mget","(*names)",""],["readable_inspect","Date","Date.html#method-i-readable_inspect","()","<p>Overrides the default inspect method with a human readable one, e.g., “Mon, 21 Feb 2005”\n"],["readable_inspect","DateTime","DateTime.html#method-i-readable_inspect","()","<p>Overrides the default inspect method with a human readable one, e.g., “Mon, 21 Feb 2005 14:30:00 …\n"],["real_mod_name","NameError","NameError.html#method-i-real_mod_name","(mod)",""],["recode_windows1252_chars","ActiveSupport::Multibyte::Unicode","ActiveSupport/Multibyte/Unicode.html#method-i-recode_windows1252_chars","(string)",""],["record","ActiveSupport::Testing::Parallelization::Server","ActiveSupport/Testing/Parallelization/Server.html#method-i-record","(reporter, result)",""],["redefine_method","Module","Module.html#method-i-redefine_method","(method, &block)","<p>Replaces the existing method definition, if there is one, with the passed block as its body.\n"],["redefine_singleton_method","Module","Module.html#method-i-redefine_singleton_method","(method, &block)","<p>Replaces the existing singleton method definition, if there is one, with the passed block as its body. …\n"],["redis","ActiveSupport::Cache::RedisCacheStore","ActiveSupport/Cache/RedisCacheStore.html#method-i-redis","()",""],["register_hook","ActiveSupport::ExecutionWrapper","ActiveSupport/ExecutionWrapper.html#method-c-register_hook","(hook, outer: false)","<p>Register an object to be invoked during both the <code>run</code> and <code>complete</code> steps.\n<p><code>hook.complete</code> will be passed …\n"],["regular_update","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-regular_update","(*other_hashes, &block)",""],["regular_update","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-regular_update","(*other_hashes, &block)",""],["regular_writer","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-regular_writer","(key, value)",""],["regular_writer","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-regular_writer","(key, value)",""],["reject","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-reject","(*args, &block)",""],["reject","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-reject","(*args, &block)",""],["reject","ActiveSupport::OrderedHash","ActiveSupport/OrderedHash.html#method-i-reject","(*args, &block)",""],["release_unload_lock!","ActiveSupport::Reloader","ActiveSupport/Reloader.html#method-i-release_unload_lock-21","()","<p>Release the unload lock if it has been previously obtained\n"],["reload!","ActiveSupport::Reloader","ActiveSupport/Reloader.html#method-c-reload-21","()","<p>Initiate a manual reload\n"],["remove","String","String.html#method-i-remove","(*patterns)","<p>Returns a new string with all occurrences of the patterns removed.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">str</span> = <span class=\"ruby-string\">&quot;foo bar test&quot;</span>\n<span class=\"ruby-identifier\">str</span>.<span class=\"ruby-identifier\">remove</span>(<span class=\"ruby-string\">&quot; test&quot;</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["remove!","String","String.html#method-i-remove-21","(*patterns)","<p>Alters the string by removing all occurrences of the patterns.\n\n<pre>str = &quot;foo bar test&quot;\nstr.remove!(&quot; test&quot;, ...</pre>\n"],["remove_event_subscriber","ActiveSupport::Subscriber","ActiveSupport/Subscriber.html#method-c-remove_event_subscriber","(event)",""],["remove_filters!","ActiveSupport::BacktraceCleaner","ActiveSupport/BacktraceCleaner.html#method-i-remove_filters-21","()","<p>Removes all filters, but leaves in the silencers. Useful if you suddenly need to see entire filepaths …\n"],["remove_possible_method","Module","Module.html#method-i-remove_possible_method","(method)","<p>Removes the named method, if it exists.\n"],["remove_possible_singleton_method","Module","Module.html#method-i-remove_possible_singleton_method","(method)","<p>Removes the named singleton method, if it exists.\n"],["remove_silencers!","ActiveSupport::BacktraceCleaner","ActiveSupport/BacktraceCleaner.html#method-i-remove_silencers-21","()","<p>Removes all silencers, but leaves in the filters. Useful if your context of debugging suddenly expands …\n"],["rename_key","ActiveSupport::XmlMini","ActiveSupport/XmlMini.html#method-i-rename_key","(key, options = {})",""],["replace","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-replace","(other_hash)","<p>Replaces the contents of this hash with other_hash.\n\n<pre>h = { &quot;a&quot; =&gt; 100, &quot;b&quot; =&gt; 200 }\nh.replace({ &quot;c&quot; =&gt; ...</pre>\n"],["replace","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-replace","(other_hash)","<p>Replaces the contents of this hash with other_hash.\n\n<pre>h = { &quot;a&quot; =&gt; 100, &quot;b&quot; =&gt; 200 }\nh.replace({ &quot;c&quot; =&gt; ...</pre>\n"],["replace","ActiveSupport::SafeBuffer","ActiveSupport/SafeBuffer.html#method-i-replace","(value)",""],["require_dependency","ActiveSupport::Dependencies::Loadable","ActiveSupport/Dependencies/Loadable.html#method-i-require_dependency","(file_name, message = \"No such file to load -- %s.rb\")","<p><strong>Warning:</strong> This method is obsolete in <code>:zeitwerk</code> mode. In <code>:zeitwerk</code> mode semantics match Ruby&#39;s and …\n"],["require_unload_lock!","ActiveSupport::Reloader","ActiveSupport/Reloader.html#method-i-require_unload_lock-21","()","<p>Acquire the ActiveSupport::Dependencies::Interlock unload lock, ensuring it will be released automatically …\n"],["rescue_error_with","ActiveSupport::Cache::MemCacheStore","ActiveSupport/Cache/MemCacheStore.html#method-i-rescue_error_with","(fallback)",""],["rescue_from","ActiveSupport::Rescuable::ClassMethods","ActiveSupport/Rescuable/ClassMethods.html#method-i-rescue_from","(*klasses, with: nil, &block)","<p>Registers exception classes with a handler to be called by <code>rescue_with_handler</code>.\n<p><code>rescue_from</code> receives a …\n"],["rescue_with_handler","ActiveSupport::Rescuable","ActiveSupport/Rescuable.html#method-i-rescue_with_handler","(exception)","<p>Delegates to the class method, but uses the instance as the subject for rescue_from handlers (method …\n"],["rescue_with_handler","ActiveSupport::Rescuable::ClassMethods","ActiveSupport/Rescuable/ClassMethods.html#method-i-rescue_with_handler","(exception, object: self, visited_exceptions: [])","<p>Matches an exception to a handler based on the exception class.\n<p>If no handler matches the exception, check …\n"],["reset","ActiveSupport::CurrentAttributes","ActiveSupport/CurrentAttributes.html#method-i-reset","()","<p>Reset all attributes. Should be called before and after actions, when used as a per-request singleton. …\n"],["reset_callbacks","ActiveSupport::Callbacks::ClassMethods","ActiveSupport/Callbacks/ClassMethods.html#method-i-reset_callbacks","(name)","<p>Remove all set callbacks for the given event.\n"],["resets","ActiveSupport::CurrentAttributes","ActiveSupport/CurrentAttributes.html#method-c-resets","(&block)","<p>Calls this block after #reset is called on the instance. Used for resetting external collaborators, like …\n"],["resolve_verifier","ActiveSupport::MessageEncryptor","ActiveSupport/MessageEncryptor.html#method-i-resolve_verifier","()",""],["respond_to?","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-respond_to-3F","(sym, include_priv = false)","<p>respond_to_missing? is not called in some cases, such as when type conversion is performed with Kernel#String …\n"],["respond_to_missing?","ActiveSupport::ArrayInquirer","ActiveSupport/ArrayInquirer.html#method-i-respond_to_missing-3F","(name, include_private = false)",""],["respond_to_missing?","ActiveSupport::Duration","ActiveSupport/Duration.html#method-i-respond_to_missing-3F","(method, _)",""],["respond_to_missing?","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-respond_to_missing-3F","(method, include_private)","<p>Returns <code>true</code> if <em>obj</em> responds to the given method. Private methods are included in the search only if …\n"],["respond_to_missing?","ActiveSupport::OrderedOptions","ActiveSupport/OrderedOptions.html#method-i-respond_to_missing-3F","(name, include_private)",""],["respond_to_missing?","ActiveSupport::StringInquirer","ActiveSupport/StringInquirer.html#method-i-respond_to_missing-3F","(method_name, include_private = false)",""],["respond_to_missing?","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-respond_to_missing-3F","(sym, include_priv)","<p>Ensure proxy class responds to all methods that underlying time instance responds to.\n"],["retrieve_cache_key","ActiveSupport::Cache","ActiveSupport/Cache.html#method-c-retrieve_cache_key","(key)",""],["retrieve_pool_options","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-c-retrieve_pool_options","(options)",""],["retrieve_store_class","ActiveSupport::Cache","ActiveSupport/Cache.html#method-c-retrieve_store_class","(store)","<p>Obtains the specified cache store class, given the name of the <code>store</code>. Raises an error when the store …\n"],["reverse","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-reverse","()","<p>Reverses all characters in the string.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&#39;Café&#39;</span>.<span class=\"ruby-identifier\">mb_chars</span>.<span class=\"ruby-identifier\">reverse</span>.<span class=\"ruby-identifier\">to_s</span> <span class=\"ruby-comment\"># =&gt; &#39;éfaC&#39;</span>\n</pre>\n"],["reverse_merge","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-reverse_merge","(other_hash)","<p>Like <code>merge</code> but the other way around: Merges the receiver into the argument and returns a new hash with …\n"],["reverse_merge","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-reverse_merge","(other_hash)","<p>Like <code>merge</code> but the other way around: Merges the receiver into the argument and returns a new hash with …\n"],["reverse_merge","Hash","Hash.html#method-i-reverse_merge","(other_hash)","<p>Merges the caller into <code>other_hash</code>. For example,\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">options</span> = <span class=\"ruby-identifier\">options</span>.<span class=\"ruby-identifier\">reverse_merge</span>(<span class=\"ruby-value\">size:</span> <span class=\"ruby-value\">25</span>, <span class=\"ruby-value\">velocity:</span> <span class=\"ruby-value\">10</span>)\n</pre>\n"],["reverse_merge!","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-reverse_merge-21","(other_hash)","<p>Same semantics as <code>reverse_merge</code> but modifies the receiver in-place.\n"],["reverse_merge!","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-reverse_merge-21","(other_hash)","<p>Same semantics as <code>reverse_merge</code> but modifies the receiver in-place.\n"],["reverse_merge!","Hash","Hash.html#method-i-reverse_merge-21","(other_hash)","<p>Destructive <code>reverse_merge</code>.\n"],["reverse_update","Hash","Hash.html#method-i-reverse_update","(other_hash)",""],["rfc2822","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-rfc2822","()","<p>Returns a string of the object&#39;s date and time in the RFC 2822 standard format.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">zone</span>.<span class=\"ruby-identifier\">now</span>.<span class=\"ruby-identifier\">rfc2822</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["rfc3339","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-rfc3339","(fraction_digits = 0)",""],["rfc3339","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-rfc3339","(str)","<p>Method for creating new ActiveSupport::TimeWithZone instance in time zone of <code>self</code> from an RFC 3339 string. …\n"],["rfc3339","Time","Time.html#method-c-rfc3339","(str)","<p>Creates a <code>Time</code> instance from an RFC 3339 string.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">rfc3339</span>(<span class=\"ruby-string\">&#39;1999-12-31T14:00:00-10:00&#39;</span>) <span class=\"ruby-comment\"># =&gt; 2000-01-01 ...</span>\n</pre>\n"],["rfc822","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-rfc822","()",""],["run","ActiveSupport::Testing::Isolation","ActiveSupport/Testing/Isolation.html#method-i-run","()",""],["run!","ActiveSupport::ExecutionWrapper","ActiveSupport/ExecutionWrapper.html#method-c-run-21","()","<p>Run this execution.\n<p>Returns an instance, whose <code>complete!</code> method <strong>must</strong> be invoked after the work has been …\n"],["run_callbacks","ActiveSupport::Callbacks","ActiveSupport/Callbacks.html#method-i-run_callbacks","(kind)","<p>Runs the callbacks for the given event.\n<p>Calls the before and around callbacks in the order they were set, …\n"],["run_cleanup","ActiveSupport::Testing::Parallelization::Worker","ActiveSupport/Testing/Parallelization/Worker.html#method-i-run_cleanup","()",""],["run_in_isolation","ActiveSupport::Testing::Isolation::Forking","ActiveSupport/Testing/Isolation/Forking.html#method-i-run_in_isolation","(&blk)",""],["run_in_isolation","ActiveSupport::Testing::Isolation::Subprocess","ActiveSupport/Testing/Isolation/Subprocess.html#method-i-run_in_isolation","(&blk)","<p>Crazy H4X to get this working in windows / jruby with no forking.\n"],["run_interlock","ActiveSupport::Dependencies","ActiveSupport/Dependencies.html#method-c-run_interlock","()","<p>Execute the supplied block without interference from any concurrent loads.\n"],["run_load_hooks","ActiveSupport::LazyLoadHooks","ActiveSupport/LazyLoadHooks.html#method-i-run_load_hooks","(name, base = Object)",""],["running","ActiveSupport::Dependencies::Interlock","ActiveSupport/Dependencies/Interlock.html#method-i-running","()",""],["safe_concat","ActiveSupport::SafeBuffer","ActiveSupport/SafeBuffer.html#method-i-safe_concat","(value)",""],["safe_constantize","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-safe_constantize","(camel_cased_word)","<p>Tries to find a constant with the name specified in the argument string.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">safe_constantize</span>(<span class=\"ruby-string\">&#39;Module&#39;</span>)   <span class=\"ruby-operator\">...</span>\n</pre>\n"],["safe_constantize","String","String.html#method-i-safe_constantize","()","<p><code>safe_constantize</code> tries to find a declared constant with the name specified in the string. It returns …\n"],["safe_get","ActiveSupport::Dependencies::ClassCache","ActiveSupport/Dependencies/ClassCache.html#method-i-safe_get","(key)",""],["safe_record","ActiveSupport::Testing::Parallelization::Worker","ActiveSupport/Testing/Parallelization/Worker.html#method-i-safe_record","(reporter, result)",""],["save_block_result_to_cache","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-save_block_result_to_cache","(name, options)",""],["search_dir","ActiveSupport::Cache::FileStore","ActiveSupport/Cache/FileStore.html#method-i-search_dir","(dir, &callback)",""],["sec_fraction","Time","Time.html#method-i-sec_fraction","()","<p>Returns the fraction of a second as a <code>Rational</code>\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2012</span>, <span class=\"ruby-value\">8</span>, <span class=\"ruby-value\">29</span>, <span class=\"ruby-value\">0</span>, <span class=\"ruby-value\">0</span>, <span class=\"ruby-value\">0.5</span>).<span class=\"ruby-identifier\">sec_fraction</span> <span class=\"ruby-comment\"># =&gt; (1/2)</span>\n</pre>\n"],["second","Array","Array.html#method-i-second","()","<p>Equal to <code>self[1]</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-node\">%w( a b c d e )</span>.<span class=\"ruby-identifier\">second</span> <span class=\"ruby-comment\"># =&gt; &quot;b&quot;</span>\n</pre>\n"],["second","Numeric","Numeric.html#method-i-second","()",""],["second_to_last","Array","Array.html#method-i-second_to_last","()","<p>Equal to <code>self[-2]</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-node\">%w( a b c d e )</span>.<span class=\"ruby-identifier\">second_to_last</span> <span class=\"ruby-comment\"># =&gt; &quot;d&quot;</span>\n</pre>\n"],["seconds","Numeric","Numeric.html#method-i-seconds","()","<p>Returns a Duration instance matching the number of seconds provided.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">2</span>.<span class=\"ruby-identifier\">seconds</span> <span class=\"ruby-comment\"># =&gt; 2 seconds</span>\n</pre>\n"],["seconds_since_midnight","DateTime","DateTime.html#method-i-seconds_since_midnight","()","<p>Returns the number of seconds since 00:00:00.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DateTime</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2012</span>, <span class=\"ruby-value\">8</span>, <span class=\"ruby-value\">29</span>,  <span class=\"ruby-value\">0</span>,  <span class=\"ruby-value\">0</span>,  <span class=\"ruby-value\">0</span>).<span class=\"ruby-identifier\">seconds_since_midnight</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["seconds_since_midnight","Time","Time.html#method-i-seconds_since_midnight","()","<p>Returns the number of seconds since 00:00:00.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2012</span>, <span class=\"ruby-value\">8</span>, <span class=\"ruby-value\">29</span>,  <span class=\"ruby-value\">0</span>,  <span class=\"ruby-value\">0</span>,  <span class=\"ruby-value\">0</span>).<span class=\"ruby-identifier\">seconds_since_midnight</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["seconds_since_unix_epoch","DateTime","DateTime.html#method-i-seconds_since_unix_epoch","()",""],["seconds_to_utc_offset","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-c-seconds_to_utc_offset","(seconds, colon = true)","<p>Assumes self represents an offset from UTC in seconds (as returned from Time#utc_offset) and turns this …\n"],["seconds_until_end_of_day","DateTime","DateTime.html#method-i-seconds_until_end_of_day","()","<p>Returns the number of seconds until 23:59:59.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DateTime</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2012</span>, <span class=\"ruby-value\">8</span>, <span class=\"ruby-value\">29</span>,  <span class=\"ruby-value\">0</span>,  <span class=\"ruby-value\">0</span>,  <span class=\"ruby-value\">0</span>).<span class=\"ruby-identifier\">seconds_until_end_of_day</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["seconds_until_end_of_day","Time","Time.html#method-i-seconds_until_end_of_day","()","<p>Returns the number of seconds until 23:59:59.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2012</span>, <span class=\"ruby-value\">8</span>, <span class=\"ruby-value\">29</span>,  <span class=\"ruby-value\">0</span>,  <span class=\"ruby-value\">0</span>,  <span class=\"ruby-value\">0</span>).<span class=\"ruby-identifier\">seconds_until_end_of_day</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["secure_compare","ActiveSupport::SecurityUtils","ActiveSupport/SecurityUtils.html#method-c-secure_compare","(a, b)","<p>Secure string comparison for strings of variable length.\n<p>While a timing attack would not be able to discern …\n"],["secure_compare","ActiveSupport::SecurityUtils","ActiveSupport/SecurityUtils.html#method-i-secure_compare","(a, b)","<p>Secure string comparison for strings of variable length.\n<p>While a timing attack would not be able to discern …\n"],["secure_compare!","ActiveSupport::SecureCompareRotator","ActiveSupport/SecureCompareRotator.html#method-i-secure_compare-21","(other_value, on_rotation: @on_rotation)",""],["select","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-select","(*args, &block)",""],["select","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-select","(*args, &block)",""],["select","ActiveSupport::OrderedHash","ActiveSupport/OrderedHash.html#method-i-select","(*args, &block)",""],["serialize_entries","ActiveSupport::Cache::RedisCacheStore","ActiveSupport/Cache/RedisCacheStore.html#method-i-serialize_entries","(entries, raw: false)",""],["serialize_entry","ActiveSupport::Cache::RedisCacheStore","ActiveSupport/Cache/RedisCacheStore.html#method-i-serialize_entry","(entry, raw: false)",""],["serialize_entry","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-serialize_entry","(entry)",""],["set","ActiveSupport::CurrentAttributes","ActiveSupport/CurrentAttributes.html#method-i-set","(set_attributes)","<p>Expose one or more attributes within a block. Old values are returned after the block concludes. Example …\n"],["set_block_back_references","ActiveSupport::SafeBuffer","ActiveSupport/SafeBuffer.html#method-i-set_block_back_references","(block, match_data)",""],["set_callback","ActiveSupport::Callbacks::ClassMethods","ActiveSupport/Callbacks/ClassMethods.html#method-i-set_callback","(name, *filter_list, &block)","<p>Install a callback for the given event.\n\n<pre>set_callback :save, :before, :before_method\nset_callback :save, ...</pre>\n"],["set_defaults","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-set_defaults","(target)",""],["set_defaults","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-set_defaults","(target)",""],["set_logger","ActiveSupport::LogSubscriber::TestHelper","ActiveSupport/LogSubscriber/TestHelper.html#method-i-set_logger","(logger)","<p>Overwrite if you use another logger in your log subscriber.\n\n<pre>def logger\n  ActiveRecord::Base.logger = @logger ...</pre>\n"],["set_process_title","ActiveSupport::Testing::Parallelization::Worker","ActiveSupport/Testing/Parallelization/Worker.html#method-i-set_process_title","(status)",""],["set_redis_capabilities","ActiveSupport::Cache::RedisCacheStore","ActiveSupport/Cache/RedisCacheStore.html#method-i-set_redis_capabilities","()",""],["setup","ActiveSupport::Testing::SetupAndTeardown::ClassMethods","ActiveSupport/Testing/SetupAndTeardown/ClassMethods.html#method-i-setup","(*args, &block)","<p>Add a callback, which runs before <code>TestCase#setup</code>.\n"],["sharing","ActiveSupport::Concurrency::ShareLock","ActiveSupport/Concurrency/ShareLock.html#method-i-sharing","()","<p>Execute the supplied block while holding the Share lock.\n"],["shutdown","ActiveSupport::Testing::Parallelization::Server","ActiveSupport/Testing/Parallelization/Server.html#method-i-shutdown","()",""],["silence","ActiveSupport::BacktraceCleaner","ActiveSupport/BacktraceCleaner.html#method-i-silence","(backtrace)",""],["silence","ActiveSupport::Deprecation::Reporting","ActiveSupport/Deprecation/Reporting.html#method-i-silence","(&block)","<p>Silence deprecation warnings within the block.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ActiveSupport</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Deprecation</span>.<span class=\"ruby-identifier\">warn</span>(<span class=\"ruby-string\">&#39;something broke!&#39;</span>)\n<span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["silence","ActiveSupport::LoggerSilence","ActiveSupport/LoggerSilence.html#method-i-silence","(severity = Logger::ERROR)","<p>Silences the logger for the duration of the block.\n"],["silence!","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-silence-21","()","<p>Silences the logger.\n"],["silence_redefinition_of_method","Module","Module.html#method-i-silence_redefinition_of_method","(method)","<p>Marks the named method as intended to be redefined, if it exists. Suppresses the Ruby method redefinition …\n"],["silence_warnings","Kernel","Kernel.html#method-i-silence_warnings","()","<p>Sets $VERBOSE to <code>nil</code> for the duration of the block and back to its original value afterwards.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">silence_warnings</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["silenced","ActiveSupport::Deprecation::Reporting","ActiveSupport/Deprecation/Reporting.html#method-i-silenced","()",""],["simple","ActiveSupport::Callbacks::Filters::After","ActiveSupport/Callbacks/Filters/After.html#method-c-simple","(callback_sequence, user_callback)",""],["simple_stubs","ActiveSupport::Testing::TimeHelpers","ActiveSupport/Testing/TimeHelpers.html#method-i-simple_stubs","()",""],["since","ActiveSupport::Duration","ActiveSupport/Duration.html#method-i-since","(time = ::Time.current)","<p>Calculates a new Time or Date that is as far in the future as this Duration represents.\n"],["since","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-since","(other)",""],["since","Date","Date.html#method-i-since","(seconds)","<p>Converts Date to a Time (or DateTime if necessary) with the time portion set to the beginning of the …\n"],["since","DateTime","DateTime.html#method-i-since","(seconds)","<p>Returns a new DateTime representing the time a number of seconds since the instance time. Do not use …\n"],["since","Time","Time.html#method-i-since","(seconds)","<p>Returns a new Time representing the time a number of seconds since the instance time\n"],["singular","ActiveSupport::Inflector::Inflections","ActiveSupport/Inflector/Inflections.html#method-i-singular","(rule, replacement)","<p>Specifies a new singularization rule and its replacement. The rule can either be a string or a regular …\n"],["singularize","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-singularize","(word, locale = :en)","<p>The reverse of #pluralize, returns the singular form of a word in a string.\n<p>If passed an optional <code>locale</code> …\n"],["singularize","String","String.html#method-i-singularize","(locale = :en)","<p>The reverse of <code>pluralize</code>, returns the singular form of a word in a string.\n<p>If the optional parameter  …\n"],["skip_callback","ActiveSupport::Callbacks::ClassMethods","ActiveSupport/Callbacks/ClassMethods.html#method-i-skip_callback","(name, *filter_list, &block)","<p>Skip a previously set callback. Like <code>set_callback</code>, <code>:if</code> or <code>:unless</code> options may be passed in order to control …\n"],["slice","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-slice","(*keys)",""],["slice","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-slice","(*keys)",""],["slice!","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-slice-21","(*keys)",""],["slice!","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-slice-21","(*keys)",""],["slice!","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-slice-21","(*args)","<p>Works like <code>String#slice!</code>, but returns an instance of Chars, or <code>nil</code> if the string was not modified. The …\n"],["slice!","Hash","Hash.html#method-i-slice-21","(*keys)","<p>Replaces the hash with only the given keys. Returns a hash containing the removed key/value pairs.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">hash</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["split","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-split","(*args)","<p>Works just like <code>String#split</code>, with the exception that the items in the resulting list are Chars instances …\n"],["split","Array","Array.html#method-i-split","(value = nil)","<p>Divides the array into one or more subarrays based on a delimiting <code>value</code> or the result of an optional …\n"],["squish","String","String.html#method-i-squish","()","<p>Returns the string, first removing all whitespace on both ends of the string, and then changing remaining …\n"],["squish!","String","String.html#method-i-squish-21","()","<p>Performs a destructive squish. See String#squish.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">str</span> = <span class=\"ruby-string\">&quot; foo   bar    \\n   \\t   boo&quot;</span>\n<span class=\"ruby-identifier\">str</span>.<span class=\"ruby-identifier\">squish!</span>     <span class=\"ruby-operator\">...</span>\n</pre>\n"],["start","ActiveSupport::LogSubscriber","ActiveSupport/LogSubscriber.html#method-i-start","(name, id, payload)",""],["start","ActiveSupport::Notifications::Fanout","ActiveSupport/Notifications/Fanout.html#method-i-start","(name, id, payload)",""],["start","ActiveSupport::Notifications::Fanout::Subscribers::EventObject","ActiveSupport/Notifications/Fanout/Subscribers/EventObject.html#method-i-start","(name, id, payload)",""],["start","ActiveSupport::Notifications::Instrumenter","ActiveSupport/Notifications/Instrumenter.html#method-i-start","(name, payload)","<p>Send a start notification with <code>name</code> and <code>payload</code>.\n"],["start","ActiveSupport::Subscriber","ActiveSupport/Subscriber.html#method-i-start","(name, id, payload)",""],["start","ActiveSupport::Testing::Parallelization::Worker","ActiveSupport/Testing/Parallelization/Worker.html#method-i-start","()",""],["start!","ActiveSupport::Notifications::Event","ActiveSupport/Notifications/Event.html#method-i-start-21","()","<p>Record information at the time this event starts\n"],["start_document","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-start_document","()",""],["start_element","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-start_element","(name, attrs = [])",""],["start_exclusive","ActiveSupport::Concurrency::ShareLock","ActiveSupport/Concurrency/ShareLock.html#method-i-start_exclusive","(purpose: nil, compatible: [], no_wait: false)","<p>Returns false if <code>no_wait</code> is set and the lock is not immediately available. Otherwise, returns true after …\n"],["start_running","ActiveSupport::Dependencies::Interlock","ActiveSupport/Dependencies/Interlock.html#method-i-start_running","()",""],["start_sharing","ActiveSupport::Concurrency::ShareLock","ActiveSupport/Concurrency/ShareLock.html#method-i-start_sharing","()",""],["start_unloading","ActiveSupport::Dependencies::Interlock","ActiveSupport/Dependencies/Interlock.html#method-i-start_unloading","()",""],["start_with?","Symbol","Symbol.html#method-i-start_with-3F","(*prefixes)",""],["start_worker","ActiveSupport::Testing::Parallelization::Server","ActiveSupport/Testing/Parallelization/Server.html#method-i-start_worker","(worker_id)",""],["starts_with?","Symbol","Symbol.html#method-i-starts_with-3F","(*prefixes)",""],["stats","ActiveSupport::Cache::MemCacheStore","ActiveSupport/Cache/MemCacheStore.html#method-i-stats","()","<p>Get the statistics from the memcached servers.\n"],["stop_exclusive","ActiveSupport::Concurrency::ShareLock","ActiveSupport/Concurrency/ShareLock.html#method-i-stop_exclusive","(compatible: [])","<p>Relinquish the exclusive lock. Must only be called by the thread that called start_exclusive (and currently …\n"],["stop_sharing","ActiveSupport::Concurrency::ShareLock","ActiveSupport/Concurrency/ShareLock.html#method-i-stop_sharing","()",""],["stop_worker","ActiveSupport::Testing::Parallelization::Server","ActiveSupport/Testing/Parallelization/Server.html#method-i-stop_worker","(worker_id)",""],["store","ActiveSupport::Dependencies::ClassCache","ActiveSupport/Dependencies/ClassCache.html#method-i-store","(klass)",""],["store","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-store","(key, value)",""],["store","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-store","(key, value)",""],["store_inherited","ActiveSupport::DescendantsTracker","ActiveSupport/DescendantsTracker.html#method-c-store_inherited","(klass, descendant)","<p>This is the only method that is not thread safe, but is only ever called during the eager loading phase. …\n"],["strftime","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-strftime","(format)","<p>Replaces <code>%Z</code> directive with +zone before passing to Time#strftime, so that zone information is correct. …\n"],["stringify_keys","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-stringify_keys","()",""],["stringify_keys","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-stringify_keys","()",""],["stringify_keys","Hash","Hash.html#method-i-stringify_keys","()","<p>Returns a new hash with all keys converted to strings.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">hash</span> = { <span class=\"ruby-value\">name:</span> <span class=\"ruby-string\">&#39;Rob&#39;</span>, <span class=\"ruby-value\">age:</span> <span class=\"ruby-string\">&#39;28&#39;</span> }\n\n<span class=\"ruby-identifier\">hash</span>.<span class=\"ruby-identifier\">stringify_keys</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["stringify_keys!","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-stringify_keys-21","()",""],["stringify_keys!","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-stringify_keys-21","()",""],["stringify_keys!","Hash","Hash.html#method-i-stringify_keys-21","()","<p>Destructively converts all keys to strings. Same as <code>stringify_keys</code>, but modifies <code>self</code>.\n"],["strip_heredoc","String","String.html#method-i-strip_heredoc","()","<p>Strips indentation in heredocs.\n<p>For example in\n\n<pre>if options[:usage]\n  puts &lt;&lt;-USAGE.strip_heredoc\n    This ...</pre>\n"],["strptime","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-strptime","(str, format, now = now())","<p>Parses <code>str</code> according to <code>format</code> and returns an ActiveSupport::TimeWithZone.\n<p>Assumes that <code>str</code> is a time …\n"],["subclasses","ActiveSupport::DescendantsTracker","ActiveSupport/DescendantsTracker.html#method-i-subclasses","()",""],["subclasses","ActiveSupport::DescendantsTracker","ActiveSupport/DescendantsTracker.html#method-c-subclasses","(klass)",""],["subclasses","Class","Class.html#method-i-subclasses","()","<p>Returns an array with the direct children of <code>self</code>.\n\n<pre>class Foo; end\nclass Bar &lt; Foo; end\nclass Baz &lt; Bar; ...</pre>\n"],["subscribe","ActiveSupport::Notifications","ActiveSupport/Notifications.html#method-c-subscribe","(pattern = nil, callback = nil, &block)","<p>Subscribe to a given event name with the passed <code>block</code>.\n<p>You can subscribe to events by passing a String …\n"],["subscribe","ActiveSupport::Notifications::Fanout","ActiveSupport/Notifications/Fanout.html#method-i-subscribe","(pattern = nil, callable = nil, monotonic: false, &block)",""],["subscribed","ActiveSupport::Notifications","ActiveSupport/Notifications.html#method-c-subscribed","(callback, pattern = nil, monotonic: false, &block)",""],["subscribers","ActiveSupport::Subscriber","ActiveSupport/Subscriber.html#method-c-subscribers","()",""],["subsec","DateTime","DateTime.html#method-i-subsec","()","<p>Returns the fraction of a second as a <code>Rational</code>\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">DateTime</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2012</span>, <span class=\"ruby-value\">8</span>, <span class=\"ruby-value\">29</span>, <span class=\"ruby-value\">0</span>, <span class=\"ruby-value\">0</span>, <span class=\"ruby-value\">0.5</span>).<span class=\"ruby-identifier\">subsec</span> <span class=\"ruby-comment\"># =&gt; (1/2)</span>\n</pre>\n"],["sum","ActiveSupport::Duration","ActiveSupport/Duration.html#method-i-sum","(sign, time = ::Time.current)",""],["sum","Enumerable","Enumerable.html#method-i-sum","(identity = nil, &block)","<p>Calculates a sum from the elements.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">payments</span>.<span class=\"ruby-identifier\">sum</span> { <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">p</span><span class=\"ruby-operator\">|</span> <span class=\"ruby-identifier\">p</span>.<span class=\"ruby-identifier\">price</span> <span class=\"ruby-operator\">*</span> <span class=\"ruby-identifier\">p</span>.<span class=\"ruby-identifier\">tax_rate</span> }\n<span class=\"ruby-identifier\">payments</span>.<span class=\"ruby-identifier\">sum</span>(<span class=\"ruby-operator\">&amp;</span><span class=\"ruby-value\">:price</span>)\n</pre>\n<p>The …\n"],["sunday","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-sunday","()","<p>Returns Sunday of this week assuming that week starts on Monday. <code>DateTime</code> objects have their time set …\n"],["supports_cache_versioning?","ActiveSupport::Cache::FileStore","ActiveSupport/Cache/FileStore.html#method-c-supports_cache_versioning-3F","()","<p>Advertise cache versioning support.\n"],["supports_cache_versioning?","ActiveSupport::Cache::MemCacheStore","ActiveSupport/Cache/MemCacheStore.html#method-c-supports_cache_versioning-3F","()","<p>Advertise cache versioning support.\n"],["supports_cache_versioning?","ActiveSupport::Cache::MemoryStore","ActiveSupport/Cache/MemoryStore.html#method-c-supports_cache_versioning-3F","()","<p>Advertise cache versioning support.\n"],["supports_cache_versioning?","ActiveSupport::Cache::NullStore","ActiveSupport/Cache/NullStore.html#method-c-supports_cache_versioning-3F","()","<p>Advertise cache versioning support.\n"],["supports_cache_versioning?","ActiveSupport::Cache::RedisCacheStore","ActiveSupport/Cache/RedisCacheStore.html#method-c-supports_cache_versioning-3F","()","<p>Advertise cache versioning support.\n"],["suppress","Kernel","Kernel.html#method-i-suppress","(*exception_classes)","<p>Blocks and ignores any exception passed as argument if raised within the block.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">suppress</span>(<span class=\"ruby-constant\">ZeroDivisionError</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["symbolize_keys","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-symbolize_keys","()",""],["symbolize_keys","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-symbolize_keys","()",""],["symbolize_keys","Hash","Hash.html#method-i-symbolize_keys","()","<p>Returns a new hash with all keys converted to symbols, as long as they respond to <code>to_sym</code>.\n\n<pre>hash = { &#39;name&#39; ...</pre>\n"],["symbolize_keys!","Hash","Hash.html#method-i-symbolize_keys-21","()","<p>Destructively converts all keys to symbols, as long as they respond to <code>to_sym</code>. Same as <code>symbolize_keys</code> …\n"],["synchronize","ActiveSupport::Concurrency::LoadInterlockAwareMonitor","ActiveSupport/Concurrency/LoadInterlockAwareMonitor.html#method-i-synchronize","()",""],["tableize","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-tableize","(class_name)","<p>Creates the name of a table like Rails does for models to table names. This method uses the #pluralize …\n"],["tableize","String","String.html#method-i-tableize","()","<p>Creates the name of a table like Rails does for models to table names. This method uses the <code>pluralize</code> …\n"],["tagged","ActiveSupport::TaggedLogging","ActiveSupport/TaggedLogging.html#method-i-tagged","(*tags)",""],["target","ActiveSupport::Deprecation::DeprecatedConstantProxy","ActiveSupport/Deprecation/DeprecatedConstantProxy.html#method-i-target","()",""],["target","ActiveSupport::Deprecation::DeprecatedInstanceVariableProxy","ActiveSupport/Deprecation/DeprecatedInstanceVariableProxy.html#method-i-target","()",""],["target","ActiveSupport::Deprecation::DeprecatedObjectProxy","ActiveSupport/Deprecation/DeprecatedObjectProxy.html#method-i-target","()",""],["teardown","ActiveSupport::Testing::SetupAndTeardown::ClassMethods","ActiveSupport/Testing/SetupAndTeardown/ClassMethods.html#method-i-teardown","(*args, &block)","<p>Add a callback, which runs after <code>TestCase#teardown</code>.\n"],["terabyte","Numeric","Numeric.html#method-i-terabyte","()",""],["terabytes","Numeric","Numeric.html#method-i-terabytes","()","<p>Returns the number of bytes equivalent to the terabytes provided.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">2</span>.<span class=\"ruby-identifier\">terabytes</span> <span class=\"ruby-comment\"># =&gt; 2_199_023_255_552</span>\n</pre>\n"],["test","ActiveSupport::Testing::Declarative","ActiveSupport/Testing/Declarative.html#method-i-test","(name, &block)","<p>Helper to define a test method using a String. Under the hood, it replaces spaces with underscores and …\n"],["test_order","ActiveSupport::TestCase","ActiveSupport/TestCase.html#method-c-test_order","()","<p>Returns the order in which test cases are run.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ActiveSupport</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">TestCase</span>.<span class=\"ruby-identifier\">test_order</span> <span class=\"ruby-comment\"># =&gt; :random</span>\n</pre>\n<p>Possible …\n"],["test_order=","ActiveSupport::TestCase","ActiveSupport/TestCase.html#method-c-test_order-3D","(new_order)","<p>Sets the order in which test cases are run.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ActiveSupport</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">TestCase</span>.<span class=\"ruby-identifier\">test_order</span> = <span class=\"ruby-value\">:random</span> <span class=\"ruby-comment\"># =&gt; :random</span>\n</pre>\n"],["third","Array","Array.html#method-i-third","()","<p>Equal to <code>self[2]</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-node\">%w( a b c d e )</span>.<span class=\"ruby-identifier\">third</span> <span class=\"ruby-comment\"># =&gt; &quot;c&quot;</span>\n</pre>\n"],["third_to_last","Array","Array.html#method-i-third_to_last","()","<p>Equal to <code>self[-3]</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-node\">%w( a b c d e )</span>.<span class=\"ruby-identifier\">third_to_last</span> <span class=\"ruby-comment\"># =&gt; &quot;c&quot;</span>\n</pre>\n"],["thread_cattr_accessor","Module","Module.html#method-i-thread_cattr_accessor","(*syms, instance_reader: true, instance_writer: true, instance_accessor: true, default: nil)",""],["thread_mattr_accessor","Module","Module.html#method-i-thread_mattr_accessor","(*syms, instance_reader: true, instance_writer: true, instance_accessor: true, default: nil)","<p>Defines both class and instance accessors for class attributes.\n\n<pre>class Account\n  thread_mattr_accessor ...</pre>\n"],["tidy_bytes","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-tidy_bytes","(force = false)","<p>Replaces all ISO-8859-1 or CP1252 characters by their UTF-8 equivalent resulting in a valid UTF-8 string. …\n"],["tidy_bytes","ActiveSupport::Multibyte::Unicode","ActiveSupport/Multibyte/Unicode.html#method-i-tidy_bytes","(string, force = false)","<p>Replaces all ISO-8859-1 or CP1252 characters by their UTF-8 equivalent resulting in a valid UTF-8 string. …\n"],["time","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-time","()","<p>Returns a <code>Time</code> instance that represents the time in <code>time_zone</code>.\n"],["time_now","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-time_now","()",""],["time_with_zone","DateAndTime::Zones","DateAndTime/Zones.html#method-i-time_with_zone","(time, zone)",""],["titlecase","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-titlecase","()",""],["titlecase","String","String.html#method-i-titlecase","(keep_id_suffix: false)",""],["titleize","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-titleize","(word, keep_id_suffix: false)","<p>Capitalizes all the words and replaces some characters in the string to create a nicer looking title. …\n"],["titleize","ActiveSupport::Multibyte::Chars","ActiveSupport/Multibyte/Chars.html#method-i-titleize","()","<p>Capitalizes the first letter of every word, when possible.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;ÉL QUE SE ENTERÓ&quot;</span>.<span class=\"ruby-identifier\">mb_chars</span>.<span class=\"ruby-identifier\">titleize</span>.<span class=\"ruby-identifier\">to_s</span>  <span class=\"ruby-operator\">...</span>\n</pre>\n"],["titleize","String","String.html#method-i-titleize","(keep_id_suffix: false)","<p>Capitalizes all the words and replaces some characters in the string to create a nicer looking title. …\n"],["to","Array","Array.html#method-i-to","(position)","<p>Returns the beginning of the array up to <code>position</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-node\">%w( a b c d )</span>.<span class=\"ruby-identifier\">to</span>(<span class=\"ruby-value\">0</span>)  <span class=\"ruby-comment\"># =&gt; [&quot;a&quot;]</span>\n<span class=\"ruby-node\">%w( a b c d )</span>.<span class=\"ruby-identifier\">to</span>(<span class=\"ruby-value\">2</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to","String","String.html#method-i-to","(position)","<p>Returns a substring from the beginning of the string to the given position. If the position is negative, …\n"],["to_a","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-to_a","()","<p>Returns Array of parts of Time in sequence of [seconds, minutes, hours, day, month, year, weekday, yearday, …\n"],["to_complete","ActiveSupport::ExecutionWrapper","ActiveSupport/ExecutionWrapper.html#method-c-to_complete","(*args, &block)",""],["to_date","String","String.html#method-i-to_date","()","<p>Converts a string to a Date value.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;1-1-2012&quot;</span>.<span class=\"ruby-identifier\">to_date</span>   <span class=\"ruby-comment\"># =&gt; Sun, 01 Jan 2012</span>\n<span class=\"ruby-string\">&quot;01/01/2012&quot;</span>.<span class=\"ruby-identifier\">to_date</span> <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["to_datetime","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-to_datetime","()","<p>Returns an instance of DateTime with the timezone&#39;s UTC offset\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">zone</span>.<span class=\"ruby-identifier\">now</span>.<span class=\"ruby-identifier\">to_datetime</span>          <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to_datetime","String","String.html#method-i-to_datetime","()","<p>Converts a string to a DateTime value.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;1-1-2012&quot;</span>.<span class=\"ruby-identifier\">to_datetime</span>            <span class=\"ruby-comment\"># =&gt; Sun, 01 Jan 2012 00:00:00 ...</span>\n</pre>\n"],["to_default_s","ActiveSupport::RangeWithFormat","ActiveSupport/RangeWithFormat.html#method-i-to_default_s","(format = :default)",""],["to_default_s","Array","Array.html#method-i-to_default_s","(format = :default)",""],["to_default_s","Date","Date.html#method-i-to_default_s","(format = :default)",""],["to_default_s","DateTime","DateTime.html#method-i-to_default_s","(format = :default)",""],["to_default_s","Time","Time.html#method-i-to_default_s","(format = :default)",""],["to_f","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-to_f","()","<p>Returns the object&#39;s date and time as a floating point number of seconds since the Epoch (January …\n"],["to_f","DateTime","DateTime.html#method-i-to_f","()","<p>Converts <code>self</code> to a floating-point number of seconds, including fractional microseconds, since the Unix …\n"],["to_formatted_s","ActiveSupport::RangeWithFormat","ActiveSupport/RangeWithFormat.html#method-i-to_formatted_s","(format = :default)",""],["to_formatted_s","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-to_formatted_s","(format = :default)",""],["to_formatted_s","Array","Array.html#method-i-to_formatted_s","(format = :default)","<p>Extends <code>Array#to_s</code> to convert a collection of elements into a comma separated id list if <code>:db</code> argument …\n"],["to_formatted_s","Date","Date.html#method-i-to_formatted_s","(format = :default)","<p>Convert to a formatted string. See DATE_FORMATS for predefined formats.\n<p>This method is aliased to <code>to_s</code> …\n"],["to_formatted_s","DateTime","DateTime.html#method-i-to_formatted_s","(format = :default)","<p>Convert to a formatted string. See Time::DATE_FORMATS for predefined formats.\n<p>This method is aliased to …\n"],["to_formatted_s","Time","Time.html#method-i-to_formatted_s","(format = :default)","<p>Converts to a formatted string. See DATE_FORMATS for built-in formats.\n<p>This method is aliased to <code>to_s</code> …\n"],["to_hash","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-to_hash","()","<p>Convert to a regular hash with string keys.\n"],["to_hash","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-to_hash","()","<p>Convert to a regular hash with string keys.\n"],["to_i","ActiveSupport::Duration","ActiveSupport/Duration.html#method-i-to_i","()","<p>Returns the number of seconds that this Duration represents.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">1</span>.<span class=\"ruby-identifier\">minute</span>.<span class=\"ruby-identifier\">to_i</span>   <span class=\"ruby-comment\"># =&gt; 60</span>\n<span class=\"ruby-value\">1</span>.<span class=\"ruby-identifier\">hour</span>.<span class=\"ruby-identifier\">to_i</span>     <span class=\"ruby-comment\"># ...</span>\n</pre>\n"],["to_i","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-to_i","()","<p>Returns the object&#39;s date and time as an integer number of seconds since the Epoch (January 1, 1970 …\n"],["to_i","DateTime","DateTime.html#method-i-to_i","()","<p>Converts <code>self</code> to an integer number of seconds since the Unix epoch.\n"],["to_options","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-to_options","()",""],["to_options","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-to_options","()",""],["to_options","Hash","Hash.html#method-i-to_options","()",""],["to_options!","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-to_options-21","()",""],["to_options!","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-to_options-21","()",""],["to_options!","Hash","Hash.html#method-i-to_options-21","()",""],["to_param","ActiveSupport::SafeBuffer","ActiveSupport/SafeBuffer.html#method-i-to_param","()",""],["to_param","Array","Array.html#method-i-to_param","()","<p>Calls <code>to_param</code> on all its elements and joins the result with slashes. This is used by <code>url_for</code> in Action …\n"],["to_param","FalseClass","FalseClass.html#method-i-to_param","()","<p>Returns <code>self</code>.\n"],["to_param","Hash","Hash.html#method-i-to_param","(namespace = nil)",""],["to_param","NilClass","NilClass.html#method-i-to_param","()","<p>Returns <code>self</code>.\n"],["to_param","Object","Object.html#method-i-to_param","()","<p>Alias of <code>to_s</code>.\n"],["to_param","TrueClass","TrueClass.html#method-i-to_param","()","<p>Returns <code>self</code>.\n"],["to_prepare","ActiveSupport::Reloader","ActiveSupport/Reloader.html#method-c-to_prepare","(*args, &block)","<p>Registers a callback that will run once at application startup and every time the code is reloaded.\n"],["to_query","Array","Array.html#method-i-to_query","(key)","<p>Converts an array into a string suitable for use as a URL query string, using the given <code>key</code> as the param …\n"],["to_query","Hash","Hash.html#method-i-to_query","(namespace = nil)","<p>Returns a string representation of the receiver suitable for use as a URL query string:\n\n<pre>{name: &#39;David&#39;, ...</pre>\n"],["to_query","Object","Object.html#method-i-to_query","(key)","<p>Converts an object into a string suitable for use as a URL query string, using the given <code>key</code> as the param …\n"],["to_r","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-to_r","()","<p>Returns the object&#39;s date and time as a rational number of seconds since the Epoch (January 1, 1970 …\n"],["to_regex","ActiveSupport::Inflector::Inflections::Uncountables","ActiveSupport/Inflector/Inflections/Uncountables.html#method-i-to_regex","(string)",""],["to_run","ActiveSupport::ExecutionWrapper","ActiveSupport/ExecutionWrapper.html#method-c-to_run","(*args, &block)",""],["to_s","ActiveSupport::Duration","ActiveSupport/Duration.html#method-i-to_s","()","<p>Returns the amount of seconds a duration covers as a string. For more information check to_i method. …\n"],["to_s","ActiveSupport::NumericWithFormat","ActiveSupport/NumericWithFormat.html#method-i-to_s","(format = nil, options = nil)","<p>Provides options for converting numbers into formatted strings. Options are provided for phone numbers, …\n"],["to_s","ActiveSupport::RangeWithFormat","ActiveSupport/RangeWithFormat.html#method-i-to_s","(format = :default)","<p>Convert range to a formatted string. See RANGE_FORMATS for predefined formats.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">range</span> = (<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">100</span>)       <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to_s","ActiveSupport::SafeBuffer","ActiveSupport/SafeBuffer.html#method-i-to_s","()",""],["to_s","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-to_s","(format = :default)","<p>Returns a string of the object&#39;s date and time. Accepts an optional <code>format</code>:\n<p><code>:default</code> - default value, …\n"],["to_s","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-to_s","()","<p>Returns a textual representation of this time zone.\n"],["to_s","Array","Array.html#method-i-to_s","(format = :default)",""],["to_s","Date","Date.html#method-i-to_s","(format = :default)",""],["to_s","DateTime","DateTime.html#method-i-to_s","(format = :default)",""],["to_s","Time","Time.html#method-i-to_s","(format = :default)",""],["to_sentence","Array","Array.html#method-i-to_sentence","(options = {})","<p>Converts the array to a comma-separated sentence where the last element is joined by the connector word. …\n"],["to_tag","ActiveSupport::XmlMini","ActiveSupport/XmlMini.html#method-i-to_tag","(key, value, options)",""],["to_time","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-to_time","()","<p>Returns an instance of <code>Time</code>, either with the same UTC offset as <code>self</code> or in the local system timezone …\n"],["to_time","Date","Date.html#method-i-to_time","(form = :local)","<p>Converts a Date instance to a Time, where the time is set to the beginning of the day. The timezone can …\n"],["to_time","DateTime","DateTime.html#method-i-to_time","()","<p>Either return an instance of <code>Time</code> with the same UTC offset as <code>self</code> or an instance of <code>Time</code> representing …\n"],["to_time","String","String.html#method-i-to_time","(form = :local)","<p>Converts a string to a Time value. The <code>form</code> can be either :utc or :local (default :local).\n<p>The time is …\n"],["to_time","Time","Time.html#method-i-to_time","()","<p>Either return <code>self</code> or the time in the local system timezone depending on the setting of <code>ActiveSupport.to_time_preserves_timezone</code> …\n"],["to_time_preserves_timezone","ActiveSupport","ActiveSupport.html#method-c-to_time_preserves_timezone","()",""],["to_time_preserves_timezone=","ActiveSupport","ActiveSupport.html#method-c-to_time_preserves_timezone-3D","(value)",""],["to_xml","Array","Array.html#method-i-to_xml","(options = {})","<p>Returns a string that represents the array in XML by invoking <code>to_xml</code> on each element. Active Record collections …\n"],["to_xml","Hash","Hash.html#method-i-to_xml","(options = {})","<p>Returns a string containing an XML representation of its receiver:\n\n<pre class=\"ruby\">{ <span class=\"ruby-value\">foo:</span> <span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">bar:</span> <span class=\"ruby-value\">2</span> }.<span class=\"ruby-identifier\">to_xml</span>\n<span class=\"ruby-comment\"># =&gt;</span>\n<span class=\"ruby-comment\"># &lt;?xml ...</span>\n</pre>\n"],["to_yaml_type","ActiveSupport::OrderedHash","ActiveSupport/OrderedHash.html#method-i-to_yaml_type","()",""],["today","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-today","()","<p>Returns the current date in this time zone.\n"],["today?","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-today-3F","()","<p>Returns true if the current object&#39;s time falls within the current day.\n"],["today?","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-today-3F","()","<p>Returns true if the date/time is today.\n"],["tomorrow","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-tomorrow","()","<p>Returns the next date in this time zone.\n"],["tomorrow","Date","Date.html#method-c-tomorrow","()","<p>Returns a new Date representing the date 1 day after today (i.e. tomorrow&#39;s date).\n"],["tomorrow","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-tomorrow","()","<p>Returns a new date/time representing tomorrow.\n"],["tomorrow?","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-tomorrow-3F","()","<p>Returns true if the current object&#39;s time falls within the next day (tomorrow).\n"],["tomorrow?","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-tomorrow-3F","()","<p>Returns true if the date/time is tomorrow.\n"],["transfer_time_values_to_utc_constructor","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-transfer_time_values_to_utc_constructor","(time)",""],["transform_keys","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-transform_keys","(*args, &block)",""],["transform_keys","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-transform_keys","(*args, &block)",""],["transform_keys!","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-transform_keys-21","()",""],["transform_keys!","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-transform_keys-21","()",""],["transform_values","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-transform_values","(*args, &block)",""],["transform_values","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-transform_values","(*args, &block)",""],["transliterate","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-transliterate","(string, replacement = \"?\", locale: nil)","<p>Replaces non-ASCII characters with an ASCII approximation, or if none exists, a replacement character …\n"],["travel","ActiveSupport::Testing::TimeHelpers","ActiveSupport/Testing/TimeHelpers.html#method-i-travel","(duration, &block)","<p>Changes current time to the time in the future or in the past by a given time difference by stubbing …\n"],["travel_back","ActiveSupport::Testing::TimeHelpers","ActiveSupport/Testing/TimeHelpers.html#method-i-travel_back","()","<p>Returns the current time back to its original state, by removing the stubs added by <code>travel</code>, <code>travel_to</code> …\n"],["travel_to","ActiveSupport::Testing::TimeHelpers","ActiveSupport/Testing/TimeHelpers.html#method-i-travel_to","(date_or_time)","<p>Changes current time to the given time by stubbing <code>Time.now</code>, <code>Date.today</code>, and <code>DateTime.now</code> to return the …\n"],["truncate","String","String.html#method-i-truncate","(truncate_at, options = {})","<p>Truncates a given <code>text</code> after a given <code>length</code> if <code>text</code> is longer than <code>length</code>:\n\n<pre>&#39;Once upon a time in a world ...</pre>\n"],["truncate_bytes","String","String.html#method-i-truncate_bytes","(truncate_at, omission: \"…\")","<p>Truncates <code>text</code> to at most <code>bytesize</code> bytes in length without breaking string encoding by splitting multibyte …\n"],["truncate_key","ActiveSupport::Cache::RedisCacheStore","ActiveSupport/Cache/RedisCacheStore.html#method-i-truncate_key","(key)",""],["truncate_words","String","String.html#method-i-truncate_words","(words_count, options = {})","<p>Truncates a given <code>text</code> after a given number of words (<code>words_count</code>):\n\n<pre>&#39;Once upon a time in a world far far ...</pre>\n"],["try","Delegator","Delegator.html#method-i-try","","<p>See Object#try\n"],["try","NilClass","NilClass.html#method-i-try","(_method_name = nil, *)","<p>Calling <code>try</code> on <code>nil</code> always returns <code>nil</code>. It becomes especially helpful when navigating through associations …\n"],["try","Object","Object.html#method-i-try","","<p>Invokes the public method whose name goes as first argument just like <code>public_send</code> does, except that if …\n"],["try!","Delegator","Delegator.html#method-i-try-21","","<p>See Object#try!\n"],["try!","NilClass","NilClass.html#method-i-try-21","(_method_name = nil, *)","<p>Calling <code>try!</code> on <code>nil</code> always returns <code>nil</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">nil</span>.<span class=\"ruby-identifier\">try!</span>(<span class=\"ruby-value\">:name</span>) <span class=\"ruby-comment\"># =&gt; nil</span>\n</pre>\n"],["try!","Object","Object.html#method-i-try-21","","<p>Same as #try, but raises a <code>NoMethodError</code> exception if the receiver is not <code>nil</code> and does not implement …\n"],["tv_sec","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-tv_sec","()",""],["uncountable","ActiveSupport::Inflector::Inflections","ActiveSupport/Inflector/Inflections.html#method-i-uncountable","(*words)","<p>Specifies words that are uncountable and should not be inflected.\n\n<pre>uncountable &#39;money&#39;\nuncountable &#39;money&#39;, ...</pre>\n"],["uncountable?","ActiveSupport::Inflector::Inflections::Uncountables","ActiveSupport/Inflector/Inflections/Uncountables.html#method-i-uncountable-3F","(str)",""],["underscore","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-underscore","(camel_cased_word)","<p>Makes an underscored, lowercase form from the expression in the string.\n<p>Changes &#39;::&#39; to &#39;/&#39; …\n"],["underscore","String","String.html#method-i-underscore","()","<p>The reverse of <code>camelize</code>. Makes an underscored, lowercase form from the expression in the string.\n<p><code>underscore</code> …\n"],["unescape","Object","Object.html#method-i-unescape","(str, escaped = /%[a-fA-F\\d]{2}/)",""],["unfreeze_time","ActiveSupport::Testing::TimeHelpers","ActiveSupport/Testing/TimeHelpers.html#method-i-unfreeze_time","()",""],["unique_id","ActiveSupport::Notifications::Instrumenter","ActiveSupport/Notifications/Instrumenter.html#method-i-unique_id","()",""],["unload_interlock","ActiveSupport::Dependencies","ActiveSupport/Dependencies.html#method-c-unload_interlock","()","<p>Execute the supplied block while holding an exclusive lock, preventing any other thread from being inside …\n"],["unloading","ActiveSupport::Dependencies::Interlock","ActiveSupport/Dependencies/Interlock.html#method-i-unloading","()",""],["unsubscribe","ActiveSupport::Notifications","ActiveSupport/Notifications.html#method-c-unsubscribe","(subscriber_or_name)",""],["unsubscribe","ActiveSupport::Notifications::Fanout","ActiveSupport/Notifications/Fanout.html#method-i-unsubscribe","(subscriber_or_name)",""],["until","ActiveSupport::Duration","ActiveSupport/Duration.html#method-i-until","(time = ::Time.current)",""],["upcase_first","ActiveSupport::Inflector","ActiveSupport/Inflector.html#method-i-upcase_first","(string)","<p>Converts just the first character to uppercase.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">upcase_first</span>(<span class=\"ruby-string\">&#39;what a Lovely Day&#39;</span>) <span class=\"ruby-comment\"># =&gt; &quot;What a Lovely ...</span>\n</pre>\n"],["upcase_first","String","String.html#method-i-upcase_first","()","<p>Converts just the first character to uppercase.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&#39;what a Lovely Day&#39;</span>.<span class=\"ruby-identifier\">upcase_first</span> <span class=\"ruby-comment\"># =&gt; &quot;What a Lovely Day&quot; ...</span>\n</pre>\n"],["update","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-update","(*other_hashes, &block)","<p>Updates the receiver in-place, merging in the hashes passed as arguments:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">hash_1</span> = <span class=\"ruby-constant\">ActiveSupport</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HashWithIndifferentAccess</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["update","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-update","(*other_hashes, &block)","<p>Updates the receiver in-place, merging in the hashes passed as arguments:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">hash_1</span> = <span class=\"ruby-constant\">ActiveSupport</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HashWithIndifferentAccess</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["update_with_single_argument","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-update_with_single_argument","(other_hash, block)",""],["update_with_single_argument","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-update_with_single_argument","(other_hash, block)",""],["updated?","ActiveSupport::FileUpdateChecker","ActiveSupport/FileUpdateChecker.html#method-i-updated-3F","()","<p>Check if any of the entries were updated. If so, the watched and/or updated_at values are cached until …\n"],["updated_at","ActiveSupport::FileUpdateChecker","ActiveSupport/FileUpdateChecker.html#method-i-updated_at","(paths)",""],["us_zones","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-c-us_zones","()","<p>A convenience method for returning a collection of TimeZone objects for time zones in the USA.\n"],["use_temporary_local_cache","ActiveSupport::Cache::Strategy::LocalCache","ActiveSupport/Cache/Strategy/LocalCache.html#method-i-use_temporary_local_cache","(temporary_cache)",""],["use_zone","Time","Time.html#method-c-use_zone","(time_zone)","<p>Allows override of <code>Time.zone</code> locally inside supplied block; resets <code>Time.zone</code> to existing value when done. …\n"],["usec","DateTime","DateTime.html#method-i-usec","()","<p>Returns the fraction of a second as microseconds\n"],["utc","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-utc","()","<p>Returns a <code>Time</code> instance of the simultaneous time in the UTC timezone.\n"],["utc","DateTime","DateTime.html#method-i-utc","()","<p>Returns a <code>Time</code> instance of the simultaneous time in the UTC timezone.\n\n<pre>DateTime.civil(2005, 2, 21, 10, ...</pre>\n"],["utc?","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-utc-3F","()","<p>Returns true if the current time zone is set to UTC.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">zone</span> = <span class=\"ruby-string\">&#39;UTC&#39;</span>                           <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["utc?","DateTime","DateTime.html#method-i-utc-3F","()","<p>Returns <code>true</code> if <code>offset == 0</code>.\n"],["utc_offset","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-utc_offset","()","<p>Returns the offset from current time to UTC time in seconds.\n"],["utc_offset","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-utc_offset","()","<p>Returns the offset of this time zone from UTC in seconds.\n"],["utc_offset","DateTime","DateTime.html#method-i-utc_offset","()","<p>Returns the offset value in seconds.\n"],["utc_to_local","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-utc_to_local","(time)","<p>Adjust the given time to the simultaneous time in the time zone represented by <code>self</code>. Returns a local …\n"],["utc_to_local_returns_utc_offset_times","ActiveSupport","ActiveSupport.html#method-c-utc_to_local_returns_utc_offset_times","()",""],["utc_to_local_returns_utc_offset_times=","ActiveSupport","ActiveSupport.html#method-c-utc_to_local_returns_utc_offset_times-3D","(value)",""],["uuid_from_hash","Digest::UUID","Digest/UUID.html#method-c-uuid_from_hash","(hash_class, uuid_namespace, name)","<p>Generates a v5 non-random UUID (Universally Unique IDentifier).\n<p>Using Digest::MD5 generates version 3 …\n"],["uuid_v3","Digest::UUID","Digest/UUID.html#method-c-uuid_v3","(uuid_namespace, name)","<p>Convenience method for uuid_from_hash using Digest::MD5.\n"],["uuid_v4","Digest::UUID","Digest/UUID.html#method-c-uuid_v4","()","<p>Convenience method for SecureRandom.uuid.\n"],["uuid_v5","Digest::UUID","Digest/UUID.html#method-c-uuid_v5","(uuid_namespace, name)","<p>Convenience method for uuid_from_hash using Digest::SHA1.\n"],["valid_message?","ActiveSupport::MessageVerifier","ActiveSupport/MessageVerifier.html#method-i-valid_message-3F","(signed_message)","<p>Checks if a signed message could have been generated by signing an object with the <code>MessageVerifier</code>&#39;s …\n"],["values_at","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-values_at","(*keys)","<p>Returns an array of the values at the specified indices:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">hash</span> = <span class=\"ruby-constant\">ActiveSupport</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HashWithIndifferentAccess</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["values_at","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-values_at","(*keys)","<p>Returns an array of the values at the specified indices:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">hash</span> = <span class=\"ruby-constant\">ActiveSupport</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">HashWithIndifferentAccess</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["verified","ActiveSupport::MessageVerifier","ActiveSupport/MessageVerifier.html#method-i-verified","(signed_message, purpose: nil, **)","<p>Decodes the signed message using the <code>MessageVerifier</code>&#39;s secret.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">verifier</span> = <span class=\"ruby-constant\">ActiveSupport</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">MessageVerifier</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["verified","ActiveSupport::Messages::Rotator::Verifier","ActiveSupport/Messages/Rotator/Verifier.html#method-i-verified","(*args, on_rotation: @on_rotation, **options)",""],["verify","ActiveSupport::MessageVerifier","ActiveSupport/MessageVerifier.html#method-i-verify","(*args, **options)","<p>Decodes the signed message using the <code>MessageVerifier</code>&#39;s secret.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">verifier</span> = <span class=\"ruby-constant\">ActiveSupport</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">MessageVerifier</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["version","ActiveSupport","ActiveSupport.html#method-c-version","()","<p>Returns the version of the currently loaded ActiveSupport as a <code>Gem::Version</code>\n"],["wait","ActiveSupport::LogSubscriber::TestHelper","ActiveSupport/LogSubscriber/TestHelper.html#method-i-wait","()","<p>Wait notifications to be published.\n"],["wait","ActiveSupport::Notifications::Fanout","ActiveSupport/Notifications/Fanout.html#method-i-wait","()","<p>This is a sync queue, so there is no waiting.\n"],["wait_for","ActiveSupport::Concurrency::ShareLock","ActiveSupport/Concurrency/ShareLock.html#method-i-wait_for","(method)",""],["warn","ActiveSupport::Deprecation::DeprecatedInstanceVariableProxy","ActiveSupport/Deprecation/DeprecatedInstanceVariableProxy.html#method-i-warn","(callstack, called, args)",""],["warn","ActiveSupport::Deprecation::DeprecatedObjectProxy","ActiveSupport/Deprecation/DeprecatedObjectProxy.html#method-i-warn","(callstack, called, args)",""],["warn","ActiveSupport::Deprecation::Reporting","ActiveSupport/Deprecation/Reporting.html#method-i-warn","(message = nil, callstack = nil)","<p>Outputs a deprecation warning to the output configured by <code>ActiveSupport::Deprecation.behavior</code>.\n\n<pre>ActiveSupport::Deprecation.warn(&#39;something ...</pre>\n"],["watch_namespaces","ActiveSupport::Dependencies::WatchStack","ActiveSupport/Dependencies/WatchStack.html#method-i-watch_namespaces","(namespaces)","<p>Add a set of modules to the watch stack, remembering the initial constants.\n"],["watched","ActiveSupport::FileUpdateChecker","ActiveSupport/FileUpdateChecker.html#method-i-watched","()",""],["watching?","ActiveSupport::Dependencies::WatchStack","ActiveSupport/Dependencies/WatchStack.html#method-i-watching-3F","()",""],["week","Numeric","Numeric.html#method-i-week","()",""],["weeks","Numeric","Numeric.html#method-i-weeks","()","<p>Returns a Duration instance matching the number of weeks provided.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">2</span>.<span class=\"ruby-identifier\">weeks</span> <span class=\"ruby-comment\"># =&gt; 2 weeks</span>\n</pre>\n"],["weeks_ago","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-weeks_ago","(weeks)","<p>Returns a new date/time the specified number of weeks ago.\n"],["weeks_since","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-weeks_since","(weeks)","<p>Returns a new date/time the specified number of weeks in the future.\n"],["with","ActiveSupport::Cache::ConnectionPoolLike","ActiveSupport/Cache/ConnectionPoolLike.html#method-i-with","()",""],["with_backend","ActiveSupport::XmlMini","ActiveSupport/XmlMini.html#method-i-with_backend","(name)",""],["with_defaults","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-with_defaults","(other_hash)",""],["with_defaults","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-with_defaults","(other_hash)",""],["with_defaults","Hash","Hash.html#method-i-with_defaults","(other_hash)",""],["with_defaults!","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-with_defaults-21","(other_hash)",""],["with_defaults!","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-with_defaults-21","(other_hash)",""],["with_defaults!","Hash","Hash.html#method-i-with_defaults-21","(other_hash)",""],["with_execution_control","ActiveSupport::LazyLoadHooks","ActiveSupport/LazyLoadHooks.html#method-i-with_execution_control","(name, block, once)",""],["with_indifferent_access","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-with_indifferent_access","()",""],["with_indifferent_access","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-with_indifferent_access","()",""],["with_indifferent_access","Hash","Hash.html#method-i-with_indifferent_access","()","<p>Returns an <code>ActiveSupport::HashWithIndifferentAccess</code> out of its receiver:\n\n<pre class=\"ruby\">{ <span class=\"ruby-value\">a:</span> <span class=\"ruby-value\">1</span> }.<span class=\"ruby-identifier\">with_indifferent_access</span>[<span class=\"ruby-string\">&#39;a&#39;</span>] <span class=\"ruby-operator\">...</span>\n</pre>\n"],["with_local_cache","ActiveSupport::Cache::Strategy::LocalCache","ActiveSupport/Cache/Strategy/LocalCache.html#method-i-with_local_cache","()","<p>Use a local cache for the duration of block.\n"],["with_options","Object","Object.html#method-i-with_options","(options, &block)","<p>An elegant way to factor duplication out of options passed to a series of method calls. Each method called …\n"],["with_warnings","Kernel","Kernel.html#method-i-with_warnings","(flag)","<p>Sets $VERBOSE for the duration of the block and back to its original value afterwards.\n"],["without","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-without","(*keys)",""],["without","ActiveSupport::HashWithIndifferentAccess","ActiveSupport/HashWithIndifferentAccess.html#method-i-without","(*keys)",""],["without","Array","Array.html#method-i-without","(*elements)","<p>Alias for #excluding.\n"],["without","Enumerable","Enumerable.html#method-i-without","(*elements)","<p>Alias for #excluding.\n"],["work_from_queue","ActiveSupport::Testing::Parallelization::Worker","ActiveSupport/Testing/Parallelization/Worker.html#method-i-work_from_queue","()",""],["wrap","ActiveSupport::ExecutionWrapper","ActiveSupport/ExecutionWrapper.html#method-c-wrap","()","<p>Perform the work in the supplied block as an execution.\n"],["wrap","ActiveSupport::Reloader","ActiveSupport/Reloader.html#method-c-wrap","()","<p>Run the supplied block as a work unit, reloading code as needed\n"],["wrap","Array","Array.html#method-c-wrap","(object)","<p>Wraps its argument in an array unless it is already an array (or array-like).\n<p>Specifically:\n<p>If the argument …\n"],["wrap_with_time_zone","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-wrap_with_time_zone","(time)",""],["write","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-write","(name, value, options = nil)","<p>Writes the value to the cache, with the key.\n<p>Options are passed to the underlying cache implementation. …\n"],["write","ActiveSupport::EncryptedConfiguration","ActiveSupport/EncryptedConfiguration.html#method-i-write","(contents)",""],["write","ActiveSupport::EncryptedFile","ActiveSupport/EncryptedFile.html#method-i-write","(contents)",""],["write_cache_value","ActiveSupport::Cache::Strategy::LocalCache","ActiveSupport/Cache/Strategy/LocalCache.html#method-i-write_cache_value","(name, value, **options)",""],["write_entry","ActiveSupport::Cache::FileStore","ActiveSupport/Cache/FileStore.html#method-i-write_entry","(key, entry, **options)",""],["write_entry","ActiveSupport::Cache::MemCacheStore","ActiveSupport/Cache/MemCacheStore.html#method-i-write_entry","(key, entry, **options)","<p>Write an entry to the cache.\n"],["write_entry","ActiveSupport::Cache::MemoryStore","ActiveSupport/Cache/MemoryStore.html#method-i-write_entry","(key, entry, **options)",""],["write_entry","ActiveSupport::Cache::NullStore","ActiveSupport/Cache/NullStore.html#method-i-write_entry","(key, entry, **options)",""],["write_entry","ActiveSupport::Cache::RedisCacheStore","ActiveSupport/Cache/RedisCacheStore.html#method-i-write_entry","(key, entry, unless_exist: false, raw: false, expires_in: nil, race_condition_ttl: nil, **options)","<p>Write an entry to the cache.\n<p>Requires Redis 2.6.12+ for extended SET options.\n"],["write_entry","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-write_entry","(key, entry, **options)","<p>Writes an entry to the cache implementation. Subclasses must implement this method.\n"],["write_entry","ActiveSupport::Cache::Strategy::LocalCache","ActiveSupport/Cache/Strategy/LocalCache.html#method-i-write_entry","(key, entry, **options)",""],["write_entry","ActiveSupport::Cache::Strategy::LocalCache::LocalStore","ActiveSupport/Cache/Strategy/LocalCache/LocalStore.html#method-i-write_entry","(key, entry, **options)",""],["write_key_expiry","ActiveSupport::Cache::RedisCacheStore","ActiveSupport/Cache/RedisCacheStore.html#method-i-write_key_expiry","(client, key, options)",""],["write_multi","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-write_multi","(hash, options = nil)","<p>Cache Storage API to write multiple values at once.\n"],["write_multi_entries","ActiveSupport::Cache::RedisCacheStore","ActiveSupport/Cache/RedisCacheStore.html#method-i-write_multi_entries","(entries, expires_in: nil, **options)","<p>Nonstandard store provider API to write multiple values at once.\n"],["write_multi_entries","ActiveSupport::Cache::Store","ActiveSupport/Cache/Store.html#method-i-write_multi_entries","(hash, **options)","<p>Writes multiple entries to the cache implementation. Subclasses MAY implement this method.\n"],["writing","ActiveSupport::EncryptedFile","ActiveSupport/EncryptedFile.html#method-i-writing","(contents)",""],["xmlschema","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-xmlschema","(fraction_digits = 0)","<p>Returns a string of the object&#39;s date and time in the ISO 8601 standard format.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">zone</span>.<span class=\"ruby-identifier\">now</span>.<span class=\"ruby-identifier\">xmlschema</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["xmlschema","Date","Date.html#method-i-xmlschema","()","<p>Returns a string which represents the time in used time zone as DateTime defined by XML Schema:\n\n<pre>date = ...</pre>\n"],["year","Integer","Integer.html#method-i-year","()",""],["years","Integer","Integer.html#method-i-years","()","<p>Returns a Duration instance matching the number of years provided.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">2</span>.<span class=\"ruby-identifier\">years</span> <span class=\"ruby-comment\"># =&gt; 2 years</span>\n</pre>\n"],["years_ago","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-years_ago","(years)","<p>Returns a new date/time the specified number of years ago.\n"],["years_since","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-years_since","(years)","<p>Returns a new date/time the specified number of years in the future.\n"],["yesterday","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-i-yesterday","()","<p>Returns the previous date in this time zone.\n"],["yesterday","Date","Date.html#method-c-yesterday","()","<p>Returns a new Date representing the date 1 day ago (i.e. yesterday&#39;s date).\n"],["yesterday","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-yesterday","()","<p>Returns a new date/time representing yesterday.\n"],["yesterday?","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-yesterday-3F","()","<p>Returns true if the current object&#39;s time falls within the previous day (yesterday).\n"],["yesterday?","DateAndTime::Calculations","DateAndTime/Calculations.html#method-i-yesterday-3F","()","<p>Returns true if the date/time is yesterday.\n"],["yield_shares","ActiveSupport::Concurrency::ShareLock","ActiveSupport/Concurrency/ShareLock.html#method-i-yield_shares","(purpose: nil, compatible: [], block_share: false)","<p>Temporarily give up all held Share locks while executing the supplied block, allowing any <code>compatible</code> …\n"],["zone","ActiveSupport::TimeWithZone","ActiveSupport/TimeWithZone.html#method-i-zone","()","<p>Returns the time zone abbreviation.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">zone</span> = <span class=\"ruby-string\">&#39;Eastern Time (US &amp; Canada)&#39;</span>   <span class=\"ruby-comment\"># =&gt; &quot;Eastern Time (US ...</span>\n</pre>\n"],["zone","Time","Time.html#method-c-zone","()","<p>Returns the TimeZone for the current request, if this has been set (via Time.zone=). If <code>Time.zone</code> has …\n"],["zone=","Time","Time.html#method-c-zone-3D","(time_zone)","<p>Sets <code>Time.zone</code> to a TimeZone object for the current request/thread.\n<p>This method accepts any of the following: …\n"],["zones_map","ActiveSupport::TimeZone","ActiveSupport/TimeZone.html#method-c-zones_map","()",""]]}}