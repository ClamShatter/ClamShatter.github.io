var search_data = {"index":{"searchIndex":["tzinfo","absolutedayofyeartransitionrule","ambiguoustime","annualrules","concurrentstringdeduper","country","countrytimezone","datasource","datasourcenotfound","datasources","constantoffsetdatatimezoneinfo","countryinfo","datatimezoneinfo","invalidposixtimezone","invalidzoneinfodirectory","invalidzoneinfofile","linkedtimezoneinfo","posixtimezoneparser","rubydatasource","tzinfodatanotfound","timezoneinfo","transitionsdatatimezoneinfo","zoneinfodatasource","zoneinfodirectorynotfound","zoneinforeader","datatimezone","datetimewithoffset","dayofmonthtransitionrule","dayofweektransitionrule","dayofyeartransitionrule","format1","countrydefiner","countryindexdefinition","classmethods","timezonedefiner","timezonedefinition","classmethods","timezoneindexdefinition","classmethods","format2","countrydefiner","countryindexdefiner","countryindexdefinition","classmethods","timezonedefiner","timezonedefinition","classmethods","timezoneindexdefiner","timezoneindexdefinition","classmethods","infotimezone","invalidcountrycode","invaliddatasource","invalidtimezoneidentifier","juliandayofyeartransitionrule","lastdayofmonthtransitionrule","linkedtimezone","offsettimezoneperiod","periodnotfound","stringdeduper","timewithoffset","timestamp","timestampwithoffset","timezone","timezoneoffset","timezoneperiod","timezoneproxy","timezonetransition","transitionrule","transitionstimezoneperiod","unaryminusglobalstringdeduper","unknowntimezone","untaintext","withoffset","<=>()","<=>()","<=>()","==()","==()","==()","==()","==()","=~()","=~()","_dump()","_dump()","_dump()","_load()","_load()","_load()","abbr()","abbr()","abbreviation()","abbreviation()","add_and_set_utc_offset()","all()","all()","all_codes()","all_country_zone_identifiers()","all_country_zones()","all_data_zone_identifiers()","all_data_zones()","all_identifiers()","all_linked_zone_identifiers()","all_linked_zones()","alternate_iso3166_tab_search_path()","alternate_iso3166_tab_search_path=()","at()","base_utc_offset()","base_utc_offset()","build_timezone_identifiers()","canonical_identifier()","canonical_zone()","canonical_zone()","canonical_zone()","canonical_zone()","clear_timezone_offset()","clear_timezone_offset()","code()","constant_period()","country_codes()","create()","create_default_data_source()","create_timezone()","create_timezone()","create_timezone()","current_period()","current_period_and_time()","current_time_and_period()","data_source()","data_source()","data_timezone_identifiers()","data_timezone_identifiers()","default_dst()","default_dst=()","description_or_friendly_identifier()","dms_to_rational()","downto()","dst?()","dst?()","dst?()","dst?()","end_transition()","end_transition()","ends_at()","england()","enum_timezones()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","find_minimum_transition()","find_timezone_identifier()","find_zoneinfo_dir()","for()","for_datetime()","for_time()","for_time_like()","for_timestamp()","friendly_identifier()","get()","get()","get()","get_country_info()","get_proxies()","get_proxy()","get_timezone_info()","getlocal()","gmtime()","gregorian()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","identifier()","identifier()","identifier()","info()","initialize!()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","is_time_like?()","isdst()","italy()","julian()","linked_timezone_identifiers()","linked_timezone_identifiers()","load_countries()","load_country_info()","load_country_info()","load_country_info()","load_timezone_identifiers()","load_timezone_info()","load_timezone_info()","load_timezone_info()","local_datetime()","local_end_at()","local_ends_at()","local_start_at()","local_starts_at()","local_time()","local_timestamp()","local_to_utc()","localtime()","lookup_country_info()","name()","name()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new!()","new_datetime()","new_start()","new_time()","now()","observed_utc_offset()","observed_utc_offset()","offsets_up_to()","period_for()","period_for()","period_for()","period_for()","period_for()","period_for()","period_for()","period_for_local()","period_for_utc()","periods_for_local()","periods_for_local()","periods_for_local()","periods_for_local()","periods_for_local()","periods_for_local()","periods_for_local()","process_search_path()","raise_invalid_data_source()","raise_not_implemented()","raise_not_implemented()","raise_not_implemented()","raise_unknown_timezone()","real_timezone()","require_data()","require_definition()","require_index()","resolve_tab_path()","round()","search_path()","search_path=()","set()","set_timezone_offset()","set_timezone_offset()","set_timezone_offset()","set_timezone_offset()","start_transition()","start_transition()","starts_at()","std_offset()","step()","strftime()","strftime()","strftime()","sub_second_to_s()","timestamp()","timestamp_with_offset()","timezone()","timezone_identifier_encoding()","timezone_identifiers()","to_a()","to_datetime()","to_datetime()","to_datetime()","to_i()","to_local()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_time()","to_time()","to_time()","transition_on_or_after_timestamp?()","transitions_up_to()","transitions_up_to()","transitions_up_to()","transitions_up_to()","transitions_up_to()","transitions_up_to()","transitions_up_to()","try_with_encoding()","upto()","utc()","utc()","utc()","utc?()","utc_offset()","utc_offset()","utc_to_local()","utc_total_offset()","validate_timezone_identifier()","validate_zoneinfo_dir()","value_and_sub_second_to_s()","version_info()","zone()","zone_identifier()","zone_identifiers()","zone_info()","zone_names()","zones()","changes","license","readme"],"longSearchIndex":["tzinfo","tzinfo::absolutedayofyeartransitionrule","tzinfo::ambiguoustime","tzinfo::annualrules","tzinfo::concurrentstringdeduper","tzinfo::country","tzinfo::countrytimezone","tzinfo::datasource","tzinfo::datasourcenotfound","tzinfo::datasources","tzinfo::datasources::constantoffsetdatatimezoneinfo","tzinfo::datasources::countryinfo","tzinfo::datasources::datatimezoneinfo","tzinfo::datasources::invalidposixtimezone","tzinfo::datasources::invalidzoneinfodirectory","tzinfo::datasources::invalidzoneinfofile","tzinfo::datasources::linkedtimezoneinfo","tzinfo::datasources::posixtimezoneparser","tzinfo::datasources::rubydatasource","tzinfo::datasources::tzinfodatanotfound","tzinfo::datasources::timezoneinfo","tzinfo::datasources::transitionsdatatimezoneinfo","tzinfo::datasources::zoneinfodatasource","tzinfo::datasources::zoneinfodirectorynotfound","tzinfo::datasources::zoneinforeader","tzinfo::datatimezone","tzinfo::datetimewithoffset","tzinfo::dayofmonthtransitionrule","tzinfo::dayofweektransitionrule","tzinfo::dayofyeartransitionrule","tzinfo::format1","tzinfo::format1::countrydefiner","tzinfo::format1::countryindexdefinition","tzinfo::format1::countryindexdefinition::classmethods","tzinfo::format1::timezonedefiner","tzinfo::format1::timezonedefinition","tzinfo::format1::timezonedefinition::classmethods","tzinfo::format1::timezoneindexdefinition","tzinfo::format1::timezoneindexdefinition::classmethods","tzinfo::format2","tzinfo::format2::countrydefiner","tzinfo::format2::countryindexdefiner","tzinfo::format2::countryindexdefinition","tzinfo::format2::countryindexdefinition::classmethods","tzinfo::format2::timezonedefiner","tzinfo::format2::timezonedefinition","tzinfo::format2::timezonedefinition::classmethods","tzinfo::format2::timezoneindexdefiner","tzinfo::format2::timezoneindexdefinition","tzinfo::format2::timezoneindexdefinition::classmethods","tzinfo::infotimezone","tzinfo::invalidcountrycode","tzinfo::invaliddatasource","tzinfo::invalidtimezoneidentifier","tzinfo::juliandayofyeartransitionrule","tzinfo::lastdayofmonthtransitionrule","tzinfo::linkedtimezone","tzinfo::offsettimezoneperiod","tzinfo::periodnotfound","tzinfo::stringdeduper","tzinfo::timewithoffset","tzinfo::timestamp","tzinfo::timestampwithoffset","tzinfo::timezone","tzinfo::timezoneoffset","tzinfo::timezoneperiod","tzinfo::timezoneproxy","tzinfo::timezonetransition","tzinfo::transitionrule","tzinfo::transitionstimezoneperiod","tzinfo::unaryminusglobalstringdeduper","tzinfo::unknowntimezone","tzinfo::untaintext","tzinfo::withoffset","tzinfo::country#<=>()","tzinfo::timestamp#<=>()","tzinfo::timezone#<=>()","tzinfo::countrytimezone#==()","tzinfo::offsettimezoneperiod#==()","tzinfo::timezoneoffset#==()","tzinfo::timezonetransition#==()","tzinfo::transitionstimezoneperiod#==()","tzinfo::country#=~()","tzinfo::timezone#=~()","tzinfo::country#_dump()","tzinfo::timezone#_dump()","tzinfo::timezoneproxy#_dump()","tzinfo::country::_load()","tzinfo::timezone::_load()","tzinfo::timezoneproxy::_load()","tzinfo::timezone#abbr()","tzinfo::timezoneperiod#abbr()","tzinfo::timezone#abbreviation()","tzinfo::timezoneperiod#abbreviation()","tzinfo::timestamp#add_and_set_utc_offset()","tzinfo::country::all()","tzinfo::timezone::all()","tzinfo::country::all_codes()","tzinfo::timezone::all_country_zone_identifiers()","tzinfo::timezone::all_country_zones()","tzinfo::timezone::all_data_zone_identifiers()","tzinfo::timezone::all_data_zones()","tzinfo::timezone::all_identifiers()","tzinfo::timezone::all_linked_zone_identifiers()","tzinfo::timezone::all_linked_zones()","tzinfo::datasources::zoneinfodatasource::alternate_iso3166_tab_search_path()","tzinfo::datasources::zoneinfodatasource::alternate_iso3166_tab_search_path=()","tzinfo::timezonetransition#at()","tzinfo::timezone#base_utc_offset()","tzinfo::timezoneperiod#base_utc_offset()","tzinfo::datasource#build_timezone_identifiers()","tzinfo::timezone#canonical_identifier()","tzinfo::datatimezone#canonical_zone()","tzinfo::linkedtimezone#canonical_zone()","tzinfo::timezone#canonical_zone()","tzinfo::timezoneproxy#canonical_zone()","tzinfo::datetimewithoffset#clear_timezone_offset()","tzinfo::timewithoffset#clear_timezone_offset()","tzinfo::country#code()","tzinfo::datasources::constantoffsetdatatimezoneinfo#constant_period()","tzinfo::datasource#country_codes()","tzinfo::timestamp::create()","tzinfo::datasource::create_default_data_source()","tzinfo::datasources::datatimezoneinfo#create_timezone()","tzinfo::datasources::linkedtimezoneinfo#create_timezone()","tzinfo::datasources::timezoneinfo#create_timezone()","tzinfo::timezone#current_period()","tzinfo::timezone#current_period_and_time()","tzinfo::timezone#current_time_and_period()","tzinfo::country::data_source()","tzinfo::timezone::data_source()","tzinfo::datasource#data_timezone_identifiers()","tzinfo::datasources::zoneinfodatasource#data_timezone_identifiers()","tzinfo::timezone::default_dst()","tzinfo::timezone::default_dst=()","tzinfo::countrytimezone#description_or_friendly_identifier()","tzinfo::datasources::zoneinfodatasource#dms_to_rational()","tzinfo::datetimewithoffset#downto()","tzinfo::timewithoffset#dst?()","tzinfo::timezone#dst?()","tzinfo::timezoneoffset#dst?()","tzinfo::timezoneperiod#dst?()","tzinfo::offsettimezoneperiod#end_transition()","tzinfo::timezoneperiod#end_transition()","tzinfo::timezoneperiod#ends_at()","tzinfo::datetimewithoffset#england()","tzinfo::datasources::zoneinfodatasource#enum_timezones()","tzinfo::country#eql?()","tzinfo::countrytimezone#eql?()","tzinfo::offsettimezoneperiod#eql?()","tzinfo::timezone#eql?()","tzinfo::timezoneoffset#eql?()","tzinfo::timezonetransition#eql?()","tzinfo::transitionstimezoneperiod#eql?()","tzinfo::datasources::transitionsdatatimezoneinfo#find_minimum_transition()","tzinfo::datasource#find_timezone_identifier()","tzinfo::datasources::zoneinfodatasource#find_zoneinfo_dir()","tzinfo::timestamp::for()","tzinfo::timestamp::for_datetime()","tzinfo::timestamp::for_time()","tzinfo::timestamp::for_time_like()","tzinfo::timestamp::for_timestamp()","tzinfo::timezone#friendly_identifier()","tzinfo::country::get()","tzinfo::datasource::get()","tzinfo::timezone::get()","tzinfo::datasource#get_country_info()","tzinfo::timezone::get_proxies()","tzinfo::timezone::get_proxy()","tzinfo::datasource#get_timezone_info()","tzinfo::timewithoffset#getlocal()","tzinfo::timewithoffset#gmtime()","tzinfo::datetimewithoffset#gregorian()","tzinfo::country#hash()","tzinfo::countrytimezone#hash()","tzinfo::offsettimezoneperiod#hash()","tzinfo::timestamp#hash()","tzinfo::timezone#hash()","tzinfo::timezoneoffset#hash()","tzinfo::timezonetransition#hash()","tzinfo::transitionstimezoneperiod#hash()","tzinfo::infotimezone#identifier()","tzinfo::timezone#identifier()","tzinfo::timezoneproxy#identifier()","tzinfo::infotimezone#info()","tzinfo::timestamp#initialize!()","tzinfo::country#inspect()","tzinfo::datasource#inspect()","tzinfo::datasources::countryinfo#inspect()","tzinfo::datasources::rubydatasource#inspect()","tzinfo::datasources::timezoneinfo#inspect()","tzinfo::datasources::zoneinfodatasource#inspect()","tzinfo::timestamp#inspect()","tzinfo::timezone#inspect()","tzinfo::timezoneoffset#inspect()","tzinfo::transitionstimezoneperiod#inspect()","tzinfo::timestamp::is_time_like?()","tzinfo::timewithoffset#isdst()","tzinfo::datetimewithoffset#italy()","tzinfo::datetimewithoffset#julian()","tzinfo::datasource#linked_timezone_identifiers()","tzinfo::datasources::zoneinfodatasource#linked_timezone_identifiers()","tzinfo::datasources::zoneinfodatasource#load_countries()","tzinfo::datasource#load_country_info()","tzinfo::datasources::rubydatasource#load_country_info()","tzinfo::datasources::zoneinfodatasource#load_country_info()","tzinfo::datasources::zoneinfodatasource#load_timezone_identifiers()","tzinfo::datasource#load_timezone_info()","tzinfo::datasources::rubydatasource#load_timezone_info()","tzinfo::datasources::zoneinfodatasource#load_timezone_info()","tzinfo::timezone#local_datetime()","tzinfo::timezonetransition#local_end_at()","tzinfo::timezoneperiod#local_ends_at()","tzinfo::timezonetransition#local_start_at()","tzinfo::timezoneperiod#local_starts_at()","tzinfo::timezone#local_time()","tzinfo::timezone#local_timestamp()","tzinfo::timezone#local_to_utc()","tzinfo::timewithoffset#localtime()","tzinfo::datasource#lookup_country_info()","tzinfo::country#name()","tzinfo::timezone#name()","tzinfo::country::new()","tzinfo::countrytimezone::new()","tzinfo::datasource::new()","tzinfo::datasources::constantoffsetdatatimezoneinfo::new()","tzinfo::datasources::countryinfo::new()","tzinfo::datasources::linkedtimezoneinfo::new()","tzinfo::datasources::rubydatasource::new()","tzinfo::datasources::timezoneinfo::new()","tzinfo::datasources::transitionsdatatimezoneinfo::new()","tzinfo::datasources::zoneinfodatasource::new()","tzinfo::infotimezone::new()","tzinfo::linkedtimezone::new()","tzinfo::offsettimezoneperiod::new()","tzinfo::timestamp::new()","tzinfo::timezoneoffset::new()","tzinfo::timezoneperiod::new()","tzinfo::timezoneproxy::new()","tzinfo::timezonetransition::new()","tzinfo::transitionstimezoneperiod::new()","tzinfo::timestamp::new!()","tzinfo::timestamp#new_datetime()","tzinfo::datetimewithoffset#new_start()","tzinfo::timestamp#new_time()","tzinfo::timezone#now()","tzinfo::timezone#observed_utc_offset()","tzinfo::timezoneperiod#observed_utc_offset()","tzinfo::timezone#offsets_up_to()","tzinfo::datasources::constantoffsetdatatimezoneinfo#period_for()","tzinfo::datasources::datatimezoneinfo#period_for()","tzinfo::datasources::transitionsdatatimezoneinfo#period_for()","tzinfo::datatimezone#period_for()","tzinfo::linkedtimezone#period_for()","tzinfo::timezone#period_for()","tzinfo::timezoneproxy#period_for()","tzinfo::timezone#period_for_local()","tzinfo::timezone#period_for_utc()","tzinfo::datasources::constantoffsetdatatimezoneinfo#periods_for_local()","tzinfo::datasources::datatimezoneinfo#periods_for_local()","tzinfo::datasources::transitionsdatatimezoneinfo#periods_for_local()","tzinfo::datatimezone#periods_for_local()","tzinfo::linkedtimezone#periods_for_local()","tzinfo::timezone#periods_for_local()","tzinfo::timezoneproxy#periods_for_local()","tzinfo::datasources::zoneinfodatasource::process_search_path()","tzinfo::datasource#raise_invalid_data_source()","tzinfo::datasources::datatimezoneinfo#raise_not_implemented()","tzinfo::datasources::timezoneinfo#raise_not_implemented()","tzinfo::timezoneperiod#raise_not_implemented()","tzinfo::timezone#raise_unknown_timezone()","tzinfo::timezoneproxy#real_timezone()","tzinfo::datasources::rubydatasource#require_data()","tzinfo::datasources::rubydatasource#require_definition()","tzinfo::datasources::rubydatasource#require_index()","tzinfo::datasources::zoneinfodatasource#resolve_tab_path()","tzinfo::timewithoffset#round()","tzinfo::datasources::zoneinfodatasource::search_path()","tzinfo::datasources::zoneinfodatasource::search_path=()","tzinfo::datasource::set()","tzinfo::datetimewithoffset#set_timezone_offset()","tzinfo::timewithoffset#set_timezone_offset()","tzinfo::timestampwithoffset#set_timezone_offset()","tzinfo::timestampwithoffset::set_timezone_offset()","tzinfo::offsettimezoneperiod#start_transition()","tzinfo::timezoneperiod#start_transition()","tzinfo::timezoneperiod#starts_at()","tzinfo::timezoneperiod#std_offset()","tzinfo::datetimewithoffset#step()","tzinfo::timestamp#strftime()","tzinfo::timezone#strftime()","tzinfo::withoffset#strftime()","tzinfo::timestamp#sub_second_to_s()","tzinfo::timezoneperiod#timestamp()","tzinfo::timezoneperiod#timestamp_with_offset()","tzinfo::countrytimezone#timezone()","tzinfo::datasource#timezone_identifier_encoding()","tzinfo::datasource#timezone_identifiers()","tzinfo::timewithoffset#to_a()","tzinfo::timewithoffset#to_datetime()","tzinfo::timestamp#to_datetime()","tzinfo::timestampwithoffset#to_datetime()","tzinfo::timestamp#to_i()","tzinfo::timezone#to_local()","tzinfo::country#to_s()","tzinfo::datasource#to_s()","tzinfo::datasources::rubydatasource#to_s()","tzinfo::datasources::zoneinfodatasource#to_s()","tzinfo::timestamp#to_s()","tzinfo::timezone#to_s()","tzinfo::datetimewithoffset#to_time()","tzinfo::timestamp#to_time()","tzinfo::timestampwithoffset#to_time()","tzinfo::datasources::transitionsdatatimezoneinfo#transition_on_or_after_timestamp?()","tzinfo::datasources::constantoffsetdatatimezoneinfo#transitions_up_to()","tzinfo::datasources::datatimezoneinfo#transitions_up_to()","tzinfo::datasources::transitionsdatatimezoneinfo#transitions_up_to()","tzinfo::datatimezone#transitions_up_to()","tzinfo::linkedtimezone#transitions_up_to()","tzinfo::timezone#transitions_up_to()","tzinfo::timezoneproxy#transitions_up_to()","tzinfo::datasource#try_with_encoding()","tzinfo::datetimewithoffset#upto()","tzinfo::timewithoffset#utc()","tzinfo::timestamp#utc()","tzinfo::timestamp::utc()","tzinfo::timestamp#utc?()","tzinfo::timezone#utc_offset()","tzinfo::timezoneperiod#utc_offset()","tzinfo::timezone#utc_to_local()","tzinfo::timezoneperiod#utc_total_offset()","tzinfo::datasource#validate_timezone_identifier()","tzinfo::datasources::zoneinfodatasource#validate_zoneinfo_dir()","tzinfo::timestamp#value_and_sub_second_to_s()","tzinfo::datasources::rubydatasource#version_info()","tzinfo::timewithoffset#zone()","tzinfo::timezoneperiod#zone_identifier()","tzinfo::country#zone_identifiers()","tzinfo::country#zone_info()","tzinfo::country#zone_names()","tzinfo::country#zones()","","",""],"info":[["TZInfo","","TZInfo.html","","<p>The top level module for TZInfo.\n"],["TZInfo::AbsoluteDayOfYearTransitionRule","","TZInfo/AbsoluteDayOfYearTransitionRule.html","",""],["TZInfo::AmbiguousTime","","TZInfo/AmbiguousTime.html","","<p>{AmbiguousTime} is raised to indicate that a specified local time has more than one possible equivalent …\n"],["TZInfo::AnnualRules","","TZInfo/AnnualRules.html","",""],["TZInfo::ConcurrentStringDeduper","","TZInfo/ConcurrentStringDeduper.html","",""],["TZInfo::Country","","TZInfo/Country.html","","<p>The {Country} class represents an ISO 3166-1 country. It can be used to obtain a list of time zones observed …\n"],["TZInfo::CountryTimezone","","TZInfo/CountryTimezone.html","","<p>Information about a time zone used by a {Country}.\n"],["TZInfo::DataSource","","TZInfo/DataSource.html","","<p>TZInfo can be used with different data sources for time zone and country data. Each source of data is …\n"],["TZInfo::DataSourceNotFound","","TZInfo/DataSourceNotFound.html","","<p>{DataSourceNotFound} is raised if no data source could be found (i.e. if `&#39;tzinfo/data&#39;` cannot …\n"],["TZInfo::DataSources","","TZInfo/DataSources.html","","<p>{DataSource} implementations and classes used by {DataSource} implementations.\n"],["TZInfo::DataSources::ConstantOffsetDataTimezoneInfo","","TZInfo/DataSources/ConstantOffsetDataTimezoneInfo.html","","<p>Represents a data time zone defined by a constantly observed offset.\n"],["TZInfo::DataSources::CountryInfo","","TZInfo/DataSources/CountryInfo.html","","<p>Represents a country and references to its time zones as returned by a {DataSource}.\n"],["TZInfo::DataSources::DataTimezoneInfo","","TZInfo/DataSources/DataTimezoneInfo.html","","<p>The base class for time zones defined as either a series of transitions ({TransitionsDataTimezoneInfo}) …\n"],["TZInfo::DataSources::InvalidPosixTimeZone","","TZInfo/DataSources/InvalidPosixTimeZone.html","",""],["TZInfo::DataSources::InvalidZoneinfoDirectory","","TZInfo/DataSources/InvalidZoneinfoDirectory.html","","<p>An {InvalidZoneinfoDirectory} exception is raised if {ZoneinfoDataSource} is initialized with a specific …\n"],["TZInfo::DataSources::InvalidZoneinfoFile","","TZInfo/DataSources/InvalidZoneinfoFile.html","","<p>An {InvalidZoneinfoFile} exception is raised if an attempt is made to load an invalid zoneinfo file. …\n"],["TZInfo::DataSources::LinkedTimezoneInfo","","TZInfo/DataSources/LinkedTimezoneInfo.html","","<p>Represents a time zone that is defined as a link to or alias of another zone.\n"],["TZInfo::DataSources::PosixTimeZoneParser","","TZInfo/DataSources/PosixTimeZoneParser.html","",""],["TZInfo::DataSources::RubyDataSource","","TZInfo/DataSources/RubyDataSource.html","","<p>A DataSource implementation that loads data from the set of Ruby modules included in the tzinfo-data …\n"],["TZInfo::DataSources::TZInfoDataNotFound","","TZInfo/DataSources/TZInfoDataNotFound.html","","<p>A {TZInfoDataNotFound} exception is raised if the tzinfo-data gem could not be found (i.e. `require &#39;tzinfo/data&#39;` …\n"],["TZInfo::DataSources::TimezoneInfo","","TZInfo/DataSources/TimezoneInfo.html","","<p>Represents a time zone defined by a data source.\n<p>@abstract Data sources return instances of {TimezoneInfo} …\n"],["TZInfo::DataSources::TransitionsDataTimezoneInfo","","TZInfo/DataSources/TransitionsDataTimezoneInfo.html","","<p>Represents a data time zone defined by a list of transitions that change the locally observed time.\n"],["TZInfo::DataSources::ZoneinfoDataSource","","TZInfo/DataSources/ZoneinfoDataSource.html","","<p>A DataSource implementation that loads data from a &#39;zoneinfo&#39; directory containing compiled “TZif” …\n"],["TZInfo::DataSources::ZoneinfoDirectoryNotFound","","TZInfo/DataSources/ZoneinfoDirectoryNotFound.html","","<p>A {ZoneinfoDirectoryNotFound} exception is raised if no valid zoneinfo directory could be found when …\n"],["TZInfo::DataSources::ZoneinfoReader","","TZInfo/DataSources/ZoneinfoReader.html","",""],["TZInfo::DataTimezone","","TZInfo/DataTimezone.html","","<p>Represents time zones that are defined by rules that set out when transitions occur.\n"],["TZInfo::DateTimeWithOffset","","TZInfo/DateTimeWithOffset.html","","<p>A subclass of `DateTime` used to represent local times. {DateTimeWithOffset} holds a reference to the …\n"],["TZInfo::DayOfMonthTransitionRule","","TZInfo/DayOfMonthTransitionRule.html","",""],["TZInfo::DayOfWeekTransitionRule","","TZInfo/DayOfWeekTransitionRule.html","",""],["TZInfo::DayOfYearTransitionRule","","TZInfo/DayOfYearTransitionRule.html","",""],["TZInfo::Format1","","TZInfo/Format1.html","",""],["TZInfo::Format1::CountryDefiner","","TZInfo/Format1/CountryDefiner.html","",""],["TZInfo::Format1::CountryIndexDefinition","","TZInfo/Format1/CountryIndexDefinition.html","",""],["TZInfo::Format1::CountryIndexDefinition::ClassMethods","","TZInfo/Format1/CountryIndexDefinition/ClassMethods.html","",""],["TZInfo::Format1::TimezoneDefiner","","TZInfo/Format1/TimezoneDefiner.html","",""],["TZInfo::Format1::TimezoneDefinition","","TZInfo/Format1/TimezoneDefinition.html","",""],["TZInfo::Format1::TimezoneDefinition::ClassMethods","","TZInfo/Format1/TimezoneDefinition/ClassMethods.html","",""],["TZInfo::Format1::TimezoneIndexDefinition","","TZInfo/Format1/TimezoneIndexDefinition.html","",""],["TZInfo::Format1::TimezoneIndexDefinition::ClassMethods","","TZInfo/Format1/TimezoneIndexDefinition/ClassMethods.html","",""],["TZInfo::Format2","","TZInfo/Format2.html","",""],["TZInfo::Format2::CountryDefiner","","TZInfo/Format2/CountryDefiner.html","",""],["TZInfo::Format2::CountryIndexDefiner","","TZInfo/Format2/CountryIndexDefiner.html","",""],["TZInfo::Format2::CountryIndexDefinition","","TZInfo/Format2/CountryIndexDefinition.html","",""],["TZInfo::Format2::CountryIndexDefinition::ClassMethods","","TZInfo/Format2/CountryIndexDefinition/ClassMethods.html","",""],["TZInfo::Format2::TimezoneDefiner","","TZInfo/Format2/TimezoneDefiner.html","",""],["TZInfo::Format2::TimezoneDefinition","","TZInfo/Format2/TimezoneDefinition.html","",""],["TZInfo::Format2::TimezoneDefinition::ClassMethods","","TZInfo/Format2/TimezoneDefinition/ClassMethods.html","",""],["TZInfo::Format2::TimezoneIndexDefiner","","TZInfo/Format2/TimezoneIndexDefiner.html","",""],["TZInfo::Format2::TimezoneIndexDefinition","","TZInfo/Format2/TimezoneIndexDefinition.html","",""],["TZInfo::Format2::TimezoneIndexDefinition::ClassMethods","","TZInfo/Format2/TimezoneIndexDefinition/ClassMethods.html","",""],["TZInfo::InfoTimezone","","TZInfo/InfoTimezone.html","","<p>A {Timezone} based on a {DataSources::TimezoneInfo}.\n<p>@abstract\n"],["TZInfo::InvalidCountryCode","","TZInfo/InvalidCountryCode.html","","<p>{InvalidCountryCode} is raised by {Country#get} if the code given is not a valid ISO 3166-1 alpha-2 code. …\n"],["TZInfo::InvalidDataSource","","TZInfo/InvalidDataSource.html","","<p>{InvalidDataSource} is raised if the selected {DataSource} doesn&#39;t implement one of the required …\n"],["TZInfo::InvalidTimezoneIdentifier","","TZInfo/InvalidTimezoneIdentifier.html","","<p>{InvalidTimezoneIdentifier} is raised by {Timezone.get} if the identifier given is not valid.\n"],["TZInfo::JulianDayOfYearTransitionRule","","TZInfo/JulianDayOfYearTransitionRule.html","",""],["TZInfo::LastDayOfMonthTransitionRule","","TZInfo/LastDayOfMonthTransitionRule.html","",""],["TZInfo::LinkedTimezone","","TZInfo/LinkedTimezone.html","","<p>Represents time zones that are defined as a link to or alias for another time zone.\n"],["TZInfo::OffsetTimezonePeriod","","TZInfo/OffsetTimezonePeriod.html","","<p>Represents the infinite period of time in a time zone that constantly observes the same offset from  …\n"],["TZInfo::PeriodNotFound","","TZInfo/PeriodNotFound.html","","<p>{PeriodNotFound} is raised to indicate that no {TimezonePeriod} matching a given time could be found. …\n"],["TZInfo::StringDeduper","","TZInfo/StringDeduper.html","",""],["TZInfo::TimeWithOffset","","TZInfo/TimeWithOffset.html","","<p>A subclass of `Time` used to represent local times. {TimeWithOffset} holds a reference to the related …\n"],["TZInfo::Timestamp","","TZInfo/Timestamp.html","","<p>A time represented as an `Integer` number of seconds since 1970-01-01 00:00:00 UTC (ignoring leap seconds), …\n"],["TZInfo::TimestampWithOffset","","TZInfo/TimestampWithOffset.html","","<p>A subclass of {Timestamp} used to represent local times. {TimestampWithOffset} holds a reference to the …\n"],["TZInfo::Timezone","","TZInfo/Timezone.html","","<p>The {Timezone} class represents a time zone. It provides a factory method, {get}, to retrieve {Timezone} …\n"],["TZInfo::TimezoneOffset","","TZInfo/TimezoneOffset.html","","<p>Represents an offset from UTC observed by a time zone.\n"],["TZInfo::TimezonePeriod","","TZInfo/TimezonePeriod.html","","<p>{TimezonePeriod} represents a period of time for a time zone where the same offset from UTC applies. …\n"],["TZInfo::TimezoneProxy","","TZInfo/TimezoneProxy.html","","<p>A proxy class standing in for a {Timezone} with a given identifier. {TimezoneProxy} inherits from {Timezone} …\n"],["TZInfo::TimezoneTransition","","TZInfo/TimezoneTransition.html","","<p>Represents a transition from one observed UTC offset ({TimezoneOffset} to another for a time zone.\n"],["TZInfo::TransitionRule","","TZInfo/TransitionRule.html","",""],["TZInfo::TransitionsTimezonePeriod","","TZInfo/TransitionsTimezonePeriod.html","","<p>Represents a period of time in a time zone where the same offset from UTC applies. The period of time …\n"],["TZInfo::UnaryMinusGlobalStringDeduper","","TZInfo/UnaryMinusGlobalStringDeduper.html","",""],["TZInfo::UnknownTimezone","","TZInfo/UnknownTimezone.html","","<p>{UnknownTimezone} is raised when calling methods on an instance of {Timezone} that was created directly. …\n"],["TZInfo::UntaintExt","","TZInfo/UntaintExt.html","",""],["TZInfo::WithOffset","","TZInfo/WithOffset.html","","<p>The {WithOffset} module is included in {TimeWithOffset}, {DateTimeWithOffset} and {TimestampWithOffset}. …\n"],["<=>","TZInfo::Country","TZInfo/Country.html#method-i-3C-3D-3E","(c)","<p>Compares this {Country} with another based on their {code}.\n<p>@param c [Object] an `Object` to compare this …\n"],["<=>","TZInfo::Timestamp","TZInfo/Timestamp.html#method-i-3C-3D-3E","(t)","<p>Compares this {Timestamp} with another.\n<p>{Timestamp} instances without a defined UTC offset are not comparable …\n"],["<=>","TZInfo::Timezone","TZInfo/Timezone.html#method-i-3C-3D-3E","(tz)","<p>Compares this {Timezone} with another based on the {identifier}.\n<p>@param tz [Object] an `Object` to compare …\n"],["==","TZInfo::CountryTimezone","TZInfo/CountryTimezone.html#method-i-3D-3D","(ct)","<p>Tests if the given object is equal to the current instance (has the same identifier, latitude, longitude …\n"],["==","TZInfo::OffsetTimezonePeriod","TZInfo/OffsetTimezonePeriod.html#method-i-3D-3D","(p)","<p>Determines if this {OffsetTimezonePeriod} is equal to another instance.\n<p>@param p [Object] the instance …\n"],["==","TZInfo::TimezoneOffset","TZInfo/TimezoneOffset.html#method-i-3D-3D","(toi)","<p>Determines if this {TimezoneOffset} is equal to another instance.\n<p>@param toi [Object] the instance to …\n"],["==","TZInfo::TimezoneTransition","TZInfo/TimezoneTransition.html#method-i-3D-3D","(tti)","<p>Determines if this {TimezoneTransition} is equal to another instance.\n<p>@param tti [Object] the instance …\n"],["==","TZInfo::TransitionsTimezonePeriod","TZInfo/TransitionsTimezonePeriod.html#method-i-3D-3D","(p)","<p>Determines if this {TransitionsTimezonePeriod} is equal to another instance.\n<p>@param p [Object] the instance …\n"],["=~","TZInfo::Country","TZInfo/Country.html#method-i-3D~","(regexp)","<p>Matches `regexp` against the {code} of this {Country}.\n<p>@param regexp [Regexp] a `Regexp` to match against …\n"],["=~","TZInfo::Timezone","TZInfo/Timezone.html#method-i-3D~","(regexp)","<p>Matches `regexp` against the {identifier} of this {Timezone}.\n<p>@param regexp [Regexp] a `Regexp` to match …\n"],["_dump","TZInfo::Country","TZInfo/Country.html#method-i-_dump","(limit)","<p>Returns a serialized representation of this {Country}. This method is called when using `Marshal.dump` …\n"],["_dump","TZInfo::Timezone","TZInfo/Timezone.html#method-i-_dump","(limit)","<p>Returns a serialized representation of this {Timezone}. This method is called when using `Marshal.dump` …\n"],["_dump","TZInfo::TimezoneProxy","TZInfo/TimezoneProxy.html#method-i-_dump","(limit)","<p>Returns a serialized representation of this {TimezoneProxy}. This method is called when using `Marshal.dump` …\n"],["_load","TZInfo::Country","TZInfo/Country.html#method-c-_load","(data)","<p>Loads a {Country} from the serialized representation returned by {_dump}. This is method is called when …\n"],["_load","TZInfo::Timezone","TZInfo/Timezone.html#method-c-_load","(data)","<p>Loads a {Timezone} from the serialized representation returned by {_dump}. This is method is called when …\n"],["_load","TZInfo::TimezoneProxy","TZInfo/TimezoneProxy.html#method-c-_load","(data)","<p>Loads a {TimezoneProxy} from the serialized representation returned by {_dump}. This is method is called …\n"],["abbr","TZInfo::Timezone","TZInfo/Timezone.html#method-i-abbr","(time = Time.now)",""],["abbr","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-abbr","()",""],["abbreviation","TZInfo::Timezone","TZInfo/Timezone.html#method-i-abbreviation","(time = Time.now)","<p>@param time [Object] a `Time`, `DateTime` or `Timestamp`. @return [String] the abbreviation of this {Timezone} …\n"],["abbreviation","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-abbreviation","()","<p>The abbreviation that identifies this offset. For example GMT (Greenwich Mean Time) or BST (British  …\n"],["add_and_set_utc_offset","TZInfo::Timestamp","TZInfo/Timestamp.html#method-i-add_and_set_utc_offset","(seconds, utc_offset)","<p>Adds a number of seconds to the {Timestamp} value, setting the UTC offset of the result.\n<p>@param seconds …\n"],["all","TZInfo::Country","TZInfo/Country.html#method-c-all","()","<p>@return [Array&lt;Country&gt;] an `Array` containing one {Country} instance\n\n<pre>for each defined country.</pre>\n"],["all","TZInfo::Timezone","TZInfo/Timezone.html#method-c-all","()","<p>Returns an `Array` of all the available time zones.\n<p>{TimezoneProxy} instances are returned to avoid the …\n"],["all_codes","TZInfo::Country","TZInfo/Country.html#method-c-all_codes","()","<p>@return [Array&lt;String&gt;] an `Array` containing all the valid ISO 3166-1\n\n<pre>alpha-2 country codes.</pre>\n"],["all_country_zone_identifiers","TZInfo::Timezone","TZInfo/Timezone.html#method-c-all_country_zone_identifiers","()","<p>Returns an `Array` of the identifiers of all the time zones that are observed by at least one {Country}. …\n"],["all_country_zones","TZInfo::Timezone","TZInfo/Timezone.html#method-c-all_country_zones","()","<p>Returns an `Array` of all the time zones that are observed by at least one {Country}. This is not the …\n"],["all_data_zone_identifiers","TZInfo::Timezone","TZInfo/Timezone.html#method-c-all_data_zone_identifiers","()","<p>@return [Array&lt;String&gt;] an `Array` of the identifiers of all available time zones that are defined …\n"],["all_data_zones","TZInfo::Timezone","TZInfo/Timezone.html#method-c-all_data_zones","()","<p>Returns an `Array` of all the available time zones that are defined by offsets and transitions.\n<p>{TimezoneProxy} …\n"],["all_identifiers","TZInfo::Timezone","TZInfo/Timezone.html#method-c-all_identifiers","()","<p>@return [Array&lt;String&gt;] an `Array` containing the identifiers of all the\n\n<pre>available time zones.</pre>\n"],["all_linked_zone_identifiers","TZInfo::Timezone","TZInfo/Timezone.html#method-c-all_linked_zone_identifiers","()","<p>@return [Array&lt;String&gt;] an `Array` of the identifiers of all available time zones that are defined …\n"],["all_linked_zones","TZInfo::Timezone","TZInfo/Timezone.html#method-c-all_linked_zones","()","<p>Returns an `Array` of all the available time zones that are defined as links to / aliases for other time …\n"],["alternate_iso3166_tab_search_path","TZInfo::DataSources::ZoneinfoDataSource","TZInfo/DataSources/ZoneinfoDataSource.html#method-c-alternate_iso3166_tab_search_path","()","<p>An `Array` of paths that will be checked to find an alternate iso3166.tab file if one was not included …\n"],["alternate_iso3166_tab_search_path=","TZInfo::DataSources::ZoneinfoDataSource","TZInfo/DataSources/ZoneinfoDataSource.html#method-c-alternate_iso3166_tab_search_path-3D","(alternate_iso3166_tab_search_path)","<p>Sets the paths to check to locate an alternate iso3166.tab file if one was not included in the zoneinfo …\n"],["at","TZInfo::TimezoneTransition","TZInfo/TimezoneTransition.html#method-i-at","()","<p>Returns a {Timestamp} instance representing the UTC time when this transition occurs.\n<p>To obtain the result …\n"],["base_utc_offset","TZInfo::Timezone","TZInfo/Timezone.html#method-i-base_utc_offset","(time = Time.now)","<p>Returns the base offset from UTC in seconds at the given time. This does not include any adjustment made …\n"],["base_utc_offset","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-base_utc_offset","()","<p>Returns the base offset from UTC in seconds (`observed_utc_offset - std_offset`). This does not include …\n"],["build_timezone_identifiers","TZInfo::DataSource","TZInfo/DataSource.html#method-i-build_timezone_identifiers","()","<p>Combines {data_timezone_identifiers} and {linked_timezone_identifiers} to create an `Array` containing …\n"],["canonical_identifier","TZInfo::Timezone","TZInfo/Timezone.html#method-i-canonical_identifier","()","<p>Returns the canonical identifier of this time zone.\n<p>This is a shortcut for calling `canonical_zone.identifier`. …\n"],["canonical_zone","TZInfo::DataTimezone","TZInfo/DataTimezone.html#method-i-canonical_zone","()","<p>Returns the canonical {Timezone} instance for this {DataTimezone}.\n<p>For a {DataTimezone}, this is always …\n"],["canonical_zone","TZInfo::LinkedTimezone","TZInfo/LinkedTimezone.html#method-i-canonical_zone","()","<p>Returns the canonical {Timezone} instance for this {LinkedTimezone}.\n<p>For a {LinkedTimezone}, this is the …\n"],["canonical_zone","TZInfo::Timezone","TZInfo/Timezone.html#method-i-canonical_zone","()","<p>Returns the canonical {Timezone} instance for this {Timezone}.\n<p>The IANA Time Zone database contains two …\n"],["canonical_zone","TZInfo::TimezoneProxy","TZInfo/TimezoneProxy.html#method-i-canonical_zone","()","<p>(see Timezone#canonical_zone)\n"],["clear_timezone_offset","TZInfo::DateTimeWithOffset","TZInfo/DateTimeWithOffset.html#method-i-clear_timezone_offset","()","<p>Clears the associated {TimezoneOffset}.\n<p>@return [DateTimeWithOffset] `self`.\n"],["clear_timezone_offset","TZInfo::TimeWithOffset","TZInfo/TimeWithOffset.html#method-i-clear_timezone_offset","()","<p>Clears the associated {TimezoneOffset}.\n<p>@return [TimeWithOffset] `self`.\n"],["code","TZInfo::Country","TZInfo/Country.html#method-i-code","()","<p>@return [String] the ISO 3166-1 alpha-2 country code.\n"],["constant_period","TZInfo::DataSources::ConstantOffsetDataTimezoneInfo","TZInfo/DataSources/ConstantOffsetDataTimezoneInfo.html#method-i-constant_period","()","<p>@return [TimezonePeriod] an unbounded {TimezonePeriod} with the constant\n\n<pre>offset of this timezone.</pre>\n"],["country_codes","TZInfo::DataSource","TZInfo/DataSource.html#method-i-country_codes","()","<p>Returns a frozen `Array` of all the available ISO 3166-1 alpha-2 country codes. The identifiers are sorted …\n"],["create","TZInfo::Timestamp","TZInfo/Timestamp.html#method-c-create","(year, month = 1, day = 1, hour = 0, minute = 0, second = 0, sub_second = 0, utc_offset = nil)","<p>Returns a new {Timestamp} representing the (Gregorian calendar) date and time specified by the supplied …\n"],["create_default_data_source","TZInfo::DataSource","TZInfo/DataSource.html#method-c-create_default_data_source","()","<p>Creates a {DataSource} instance for use as the default. Used if no preference has been specified manually. …\n"],["create_timezone","TZInfo::DataSources::DataTimezoneInfo","TZInfo/DataSources/DataTimezoneInfo.html#method-i-create_timezone","()","<p>@return [DataTimezone] a new {DataTimezone} instance for the time zone\n\n<pre>represented by this {DataTimezoneInfo}.</pre>\n"],["create_timezone","TZInfo::DataSources::LinkedTimezoneInfo","TZInfo/DataSources/LinkedTimezoneInfo.html#method-i-create_timezone","()","<p>@return [LinkedTimezone] a new {LinkedTimezone} instance for the time\n\n<pre>zone represented by this {LinkedTimezoneInfo}.</pre>\n"],["create_timezone","TZInfo::DataSources::TimezoneInfo","TZInfo/DataSources/TimezoneInfo.html#method-i-create_timezone","()","<p>@return [Timezone] a new {Timezone} instance for the time zone\n\n<pre>represented by this {TimezoneInfo}.</pre>\n"],["current_period","TZInfo::Timezone","TZInfo/Timezone.html#method-i-current_period","()","<p>@return [TimezonePeriod] the current {TimezonePeriod} for the time zone.\n"],["current_period_and_time","TZInfo::Timezone","TZInfo/Timezone.html#method-i-current_period_and_time","()",""],["current_time_and_period","TZInfo::Timezone","TZInfo/Timezone.html#method-i-current_time_and_period","()","<p>Returns the current local time and {TimezonePeriod} for the time zone as an `Array`. The first element …\n"],["data_source","TZInfo::Country","TZInfo/Country.html#method-c-data_source","()","<p>@return [DataSource] the current DataSource.\n"],["data_source","TZInfo::Timezone","TZInfo/Timezone.html#method-c-data_source","()","<p>@return [DataSource] the current DataSource.\n"],["data_timezone_identifiers","TZInfo::DataSource","TZInfo/DataSource.html#method-i-data_timezone_identifiers","()","<p>Returns a frozen `Array` of all the available time zone identifiers for data time zones (i.e. those that …\n"],["data_timezone_identifiers","TZInfo::DataSources::ZoneinfoDataSource","TZInfo/DataSources/ZoneinfoDataSource.html#method-i-data_timezone_identifiers","()","<p>Returns a frozen `Array` of all the available time zone identifiers. The identifiers are sorted according …\n"],["default_dst","TZInfo::Timezone","TZInfo/Timezone.html#method-c-default_dst","()","<p>Returns the default value of the optional `dst` parameter of the {local_time}, {local_datetime} and {local_timestamp}, …\n"],["default_dst=","TZInfo::Timezone","TZInfo/Timezone.html#method-c-default_dst-3D","(value)","<p>Sets the default value of the optional `dst` parameter of the {local_datetime}, {local_time}, {local_timestamp}, …\n"],["description_or_friendly_identifier","TZInfo::CountryTimezone","TZInfo/CountryTimezone.html#method-i-description_or_friendly_identifier","()","<p>@return [String] the {description} if present, otherwise a human-readable\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">representation</span> <span class=\"ruby-identifier\">of</span> <span class=\"ruby-identifier\">the</span> <span class=\"ruby-identifier\">identifier</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["dms_to_rational","TZInfo::DataSources::ZoneinfoDataSource","TZInfo/DataSources/ZoneinfoDataSource.html#method-i-dms_to_rational","(sign, degrees, minutes, seconds = nil)","<p>Converts degrees, minutes and seconds to a Rational.\n<p>@param sign [String] `&#39;-&#39;` or `&#39;+&#39;`. …\n"],["downto","TZInfo::DateTimeWithOffset","TZInfo/DateTimeWithOffset.html#method-i-downto","(min)","<p>An overridden version of `DateTime#downto` that clears the associated {TimezoneOffset} of the returned …\n"],["dst?","TZInfo::TimeWithOffset","TZInfo/TimeWithOffset.html#method-i-dst-3F","()","<p>An overridden version of `Time#dst?` that, if there is an associated {TimezoneOffset}, returns the result …\n"],["dst?","TZInfo::Timezone","TZInfo/Timezone.html#method-i-dst-3F","(time = Time.now)","<p>@param time [Object] a `Time`, `DateTime` or `Timestamp`. @return [Boolean] whether daylight savings …\n"],["dst?","TZInfo::TimezoneOffset","TZInfo/TimezoneOffset.html#method-i-dst-3F","()","<p>Determines if daylight savings is in effect (i.e. if {std_offset} is non-zero).\n<p>@return [Boolean] `true` …\n"],["dst?","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-dst-3F","()","<p>Determines if daylight savings is in effect (i.e. if {std_offset} is non-zero).\n<p>@return [Boolean] `true` …\n"],["end_transition","TZInfo::OffsetTimezonePeriod","TZInfo/OffsetTimezonePeriod.html#method-i-end_transition","()","<p>@return [TimezoneTransition] the transition that defines the end of this\n\n<pre>{TimezonePeriod}, always `nil` ...</pre>\n"],["end_transition","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-end_transition","()","<p>@return [TimezoneTransition] the transition that defines the end of this\n\n<pre>{TimezonePeriod} (`nil` if the ...</pre>\n"],["ends_at","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-ends_at","()","<p>Returns the UTC end time of the period or `nil` if the end of the period is unbounded.\n<p>The result is returned …\n"],["england","TZInfo::DateTimeWithOffset","TZInfo/DateTimeWithOffset.html#method-i-england","()","<p>An overridden version of `DateTime#england` that preserves the associated {TimezoneOffset}.\n<p>@return [DateTime] …\n"],["enum_timezones","TZInfo::DataSources::ZoneinfoDataSource","TZInfo/DataSources/ZoneinfoDataSource.html#method-i-enum_timezones","(dir, exclude = [], &block)","<p>Recursively enumerate a directory of time zones.\n<p>@param dir [Array&lt;String&gt;] the directory to enumerate …\n"],["eql?","TZInfo::Country","TZInfo/Country.html#method-i-eql-3F","(c)","<p>@param c [Object] an `Object` to compare this {Country} with. @return [Boolean] `true` if `c` is an instance …\n"],["eql?","TZInfo::CountryTimezone","TZInfo/CountryTimezone.html#method-i-eql-3F","(ct)","<p>Tests if the given object is equal to the current instance (has the same identifier, latitude, longitude …\n"],["eql?","TZInfo::OffsetTimezonePeriod","TZInfo/OffsetTimezonePeriod.html#method-i-eql-3F","(p)",""],["eql?","TZInfo::Timezone","TZInfo/Timezone.html#method-i-eql-3F","(tz)","<p>@param tz [Object] an `Object` to compare this {Timezone} with. @return [Boolean] `true` if `tz` is an …\n"],["eql?","TZInfo::TimezoneOffset","TZInfo/TimezoneOffset.html#method-i-eql-3F","(toi)","<p>Determines if this {TimezoneOffset} is equal to another instance.\n<p>@param toi [Object] the instance to …\n"],["eql?","TZInfo::TimezoneTransition","TZInfo/TimezoneTransition.html#method-i-eql-3F","(tti)",""],["eql?","TZInfo::TransitionsTimezonePeriod","TZInfo/TransitionsTimezonePeriod.html#method-i-eql-3F","(p)",""],["find_minimum_transition","TZInfo::DataSources::TransitionsDataTimezoneInfo","TZInfo/DataSources/TransitionsDataTimezoneInfo.html#method-i-find_minimum_transition","(&block)","<p>Performs a binary search on {transitions} to find the index of the earliest transition satisfying a condition. …\n"],["find_timezone_identifier","TZInfo::DataSource","TZInfo/DataSource.html#method-i-find_timezone_identifier","(identifier)","<p>If the given `identifier` is contained within the {timezone_identifiers} `Array`, the `String` instance …\n"],["find_zoneinfo_dir","TZInfo::DataSources::ZoneinfoDataSource","TZInfo/DataSources/ZoneinfoDataSource.html#method-i-find_zoneinfo_dir","()","<p>Finds a zoneinfo directory using {search_path} and {alternate_iso3166_tab_search_path}.\n<p>@return [Array&lt;String&gt;] …\n"],["for","TZInfo::Timestamp","TZInfo/Timestamp.html#method-c-for","(value, offset = :preserve)","<p>When used without a block, returns a {Timestamp} representation of a given `Time`, `DateTime` or {Timestamp}. …\n"],["for_datetime","TZInfo::Timestamp","TZInfo/Timestamp.html#method-c-for_datetime","(datetime, ignore_offset, target_utc_offset)","<p>Creates a {Timestamp} that represents a given `DateTime`, optionally ignoring the offset.\n<p>@param datetime …\n"],["for_time","TZInfo::Timestamp","TZInfo/Timestamp.html#method-c-for_time","(time, ignore_offset, target_utc_offset)","<p>Creates a {Timestamp} that represents a given `Time`, optionally ignoring the offset.\n<p>@param time [Time] …\n"],["for_time_like","TZInfo::Timestamp","TZInfo/Timestamp.html#method-c-for_time_like","(time_like, ignore_offset, target_utc_offset)","<p>Creates a {Timestamp} that represents a given `Time`-like object, optionally ignoring the offset (if …\n"],["for_timestamp","TZInfo::Timestamp","TZInfo/Timestamp.html#method-c-for_timestamp","(timestamp, ignore_offset, target_utc_offset)","<p>Returns a {Timestamp} that represents another {Timestamp}, optionally ignoring the offset. If the result …\n"],["friendly_identifier","TZInfo::Timezone","TZInfo/Timezone.html#method-i-friendly_identifier","(skip_first_part = false)","<p>Returns {identifier}, modified to make it more readable. Set `skip_first_part` to omit the first part …\n"],["get","TZInfo::Country","TZInfo/Country.html#method-c-get","(code)","<p>Gets a {Country} by its ISO 3166-1 alpha-2 code.\n<p>The {Country.all_codes} method can be used to obtain …\n"],["get","TZInfo::DataSource","TZInfo/DataSource.html#method-c-get","()","<p>@return [DataSource] the currently selected source of data.\n"],["get","TZInfo::Timezone","TZInfo/Timezone.html#method-c-get","(identifier)","<p>Returns a time zone by its IANA Time Zone Database identifier (e.g. `“Europe/London”` or `“America/Chicago”`). …\n"],["get_country_info","TZInfo::DataSource","TZInfo/DataSource.html#method-i-get_country_info","(code)","<p>@param code [String] an ISO 3166-1 alpha-2 country code. @return [DataSources::CountryInfo] a {DataSources::CountryInfo} …\n"],["get_proxies","TZInfo::Timezone","TZInfo/Timezone.html#method-c-get_proxies","(identifiers)","<p>@param [Enumerable&lt;String&gt;] identifiers an `Enumerable` of time zone\n\n<pre>identifiers.</pre>\n<p>@return [Array&lt;TimezoneProxy&gt;] …\n"],["get_proxy","TZInfo::Timezone","TZInfo/Timezone.html#method-c-get_proxy","(identifier)","<p>Returns a proxy for the time zone with the given identifier. This allows loading of the time zone data …\n"],["get_timezone_info","TZInfo::DataSource","TZInfo/DataSource.html#method-i-get_timezone_info","(identifier)","<p>Returns a {DataSources::TimezoneInfo} instance for the given identifier. The result will derive from …\n"],["getlocal","TZInfo::TimeWithOffset","TZInfo/TimeWithOffset.html#method-i-getlocal","(*args)","<p>An overridden version of `Time#getlocal` that clears the associated {TimezoneOffset} if the base implementation …\n"],["gmtime","TZInfo::TimeWithOffset","TZInfo/TimeWithOffset.html#method-i-gmtime","()","<p>An overridden version of `Time#gmtime` that clears the associated {TimezoneOffset}.\n<p>@return [TimeWithOffset] …\n"],["gregorian","TZInfo::DateTimeWithOffset","TZInfo/DateTimeWithOffset.html#method-i-gregorian","()","<p>An overridden version of `DateTime#gregorian` that preserves the associated {TimezoneOffset}.\n<p>@return …\n"],["hash","TZInfo::Country","TZInfo/Country.html#method-i-hash","()","<p>@return [Integer] a hash based on the {code}.\n"],["hash","TZInfo::CountryTimezone","TZInfo/CountryTimezone.html#method-i-hash","()","<p>@return [Integer] a hash based on the {identifier}, {latitude}, {longitude} and {description}.\n"],["hash","TZInfo::OffsetTimezonePeriod","TZInfo/OffsetTimezonePeriod.html#method-i-hash","()","<p>@return [Integer] a hash based on {offset}.\n"],["hash","TZInfo::Timestamp","TZInfo/Timestamp.html#method-i-hash","()","<p>@return [Integer] a hash based on the value, sub-second and whether there\n\n<pre>is a defined UTC offset.</pre>\n"],["hash","TZInfo::Timezone","TZInfo/Timezone.html#method-i-hash","()","<p>@return [Integer] a hash based on the {identifier}.\n"],["hash","TZInfo::TimezoneOffset","TZInfo/TimezoneOffset.html#method-i-hash","()","<p>@return [Integer] a hash based on {utc_offset}, {std_offset} and\n\n<pre>{abbreviation}.</pre>\n"],["hash","TZInfo::TimezoneTransition","TZInfo/TimezoneTransition.html#method-i-hash","()","<p>@return [Integer] a hash based on {offset}, {previous_offset} and\n\n<pre>{timestamp_value}.</pre>\n"],["hash","TZInfo::TransitionsTimezonePeriod","TZInfo/TransitionsTimezonePeriod.html#method-i-hash","()","<p>@return [Integer] a hash based on {start_transition} and {end_transition}.\n"],["identifier","TZInfo::InfoTimezone","TZInfo/InfoTimezone.html#method-i-identifier","()","<p>(see Timezone#identifier)\n"],["identifier","TZInfo::Timezone","TZInfo/Timezone.html#method-i-identifier","()","<p>@return [String] the identifier of the time zone, for example,\n\n<pre>`&quot;Europe/Paris&quot;`.</pre>\n"],["identifier","TZInfo::TimezoneProxy","TZInfo/TimezoneProxy.html#method-i-identifier","()","<p>(see Timezone#identifier)\n"],["info","TZInfo::InfoTimezone","TZInfo/InfoTimezone.html#method-i-info","()","<p>@return [DataSources::TimezoneInfo] the {DataSources::TimezoneInfo} this\n\n<pre>{InfoTimezone} is based on.</pre>\n"],["initialize!","TZInfo::Timestamp","TZInfo/Timestamp.html#method-i-initialize-21","(value, sub_second = 0, utc_offset = nil)","<p>Initializes a new {Timestamp} without validating the parameters. This method is used internally within …\n"],["inspect","TZInfo::Country","TZInfo/Country.html#method-i-inspect","()","<p>@return [String] the internal object state as a programmer-readable\n\n<pre>`String`.</pre>\n"],["inspect","TZInfo::DataSource","TZInfo/DataSource.html#method-i-inspect","()","<p>@return [String] the internal object state as a programmer-readable\n\n<pre>`String`.</pre>\n"],["inspect","TZInfo::DataSources::CountryInfo","TZInfo/DataSources/CountryInfo.html#method-i-inspect","()","<p>@return [String] the internal object state as a programmer-readable\n\n<pre>`String`.</pre>\n"],["inspect","TZInfo::DataSources::RubyDataSource","TZInfo/DataSources/RubyDataSource.html#method-i-inspect","()","<p>(see DataSource#inspect)\n"],["inspect","TZInfo::DataSources::TimezoneInfo","TZInfo/DataSources/TimezoneInfo.html#method-i-inspect","()","<p>@return [String] the internal object state as a programmer-readable\n\n<pre>`String`.</pre>\n"],["inspect","TZInfo::DataSources::ZoneinfoDataSource","TZInfo/DataSources/ZoneinfoDataSource.html#method-i-inspect","()","<p>(see DataSource#inspect)\n"],["inspect","TZInfo::Timestamp","TZInfo/Timestamp.html#method-i-inspect","()","<p>@return [String] the internal object state as a programmer-readable\n\n<pre>`String`.</pre>\n"],["inspect","TZInfo::Timezone","TZInfo/Timezone.html#method-i-inspect","()","<p>@return [String] the internal object state as a programmer-readable\n\n<pre>`String`.</pre>\n"],["inspect","TZInfo::TimezoneOffset","TZInfo/TimezoneOffset.html#method-i-inspect","()","<p>@return [String] the internal object state as a programmer-readable\n\n<pre>`String`.</pre>\n"],["inspect","TZInfo::TransitionsTimezonePeriod","TZInfo/TransitionsTimezonePeriod.html#method-i-inspect","()","<p>@return [String] the internal object state as a programmer-readable\n\n<pre>`String`.</pre>\n"],["is_time_like?","TZInfo::Timestamp","TZInfo/Timestamp.html#method-c-is_time_like-3F","(value)","<p>Determines if an object is like a `Time` (for the purposes of converting to a {Timestamp} with {for}), …\n"],["isdst","TZInfo::TimeWithOffset","TZInfo/TimeWithOffset.html#method-i-isdst","()",""],["italy","TZInfo::DateTimeWithOffset","TZInfo/DateTimeWithOffset.html#method-i-italy","()","<p>An overridden version of `DateTime#italy` that preserves the associated {TimezoneOffset}.\n<p>@return [DateTime] …\n"],["julian","TZInfo::DateTimeWithOffset","TZInfo/DateTimeWithOffset.html#method-i-julian","()","<p>An overridden version of `DateTime#julian` that preserves the associated {TimezoneOffset}.\n<p>@return [DateTime] …\n"],["linked_timezone_identifiers","TZInfo::DataSource","TZInfo/DataSource.html#method-i-linked_timezone_identifiers","()","<p>Returns a frozen `Array` of all the available time zone identifiers that are links to other time zones. …\n"],["linked_timezone_identifiers","TZInfo::DataSources::ZoneinfoDataSource","TZInfo/DataSources/ZoneinfoDataSource.html#method-i-linked_timezone_identifiers","()","<p>Returns an empty `Array`. There is no information about linked/aliased time zones in the zoneinfo files. …\n"],["load_countries","TZInfo::DataSources::ZoneinfoDataSource","TZInfo/DataSources/ZoneinfoDataSource.html#method-i-load_countries","(iso3166_tab_path, zone_tab_path)","<p>Uses the iso3166.tab and zone1970.tab or zone.tab files to return a Hash mapping country codes to CountryInfo …\n"],["load_country_info","TZInfo::DataSource","TZInfo/DataSource.html#method-i-load_country_info","(code)","<p>@param code [String] an ISO 3166-1 alpha-2 country code. @return [DataSources::CountryInfo] a {DataSources::CountryInfo} …\n"],["load_country_info","TZInfo::DataSources::RubyDataSource","TZInfo/DataSources/RubyDataSource.html#method-i-load_country_info","(code)","<p>(see DataSource#load_country_info)\n"],["load_country_info","TZInfo::DataSources::ZoneinfoDataSource","TZInfo/DataSources/ZoneinfoDataSource.html#method-i-load_country_info","(code)","<p>(see DataSource#load_country_info)\n"],["load_timezone_identifiers","TZInfo::DataSources::ZoneinfoDataSource","TZInfo/DataSources/ZoneinfoDataSource.html#method-i-load_timezone_identifiers","()","<p>Scans @zoneinfo_dir and returns an `Array` of available time zone identifiers. The result is sorted according …\n"],["load_timezone_info","TZInfo::DataSource","TZInfo/DataSource.html#method-i-load_timezone_info","(identifier)","<p>Returns a {DataSources::TimezoneInfo} instance for the given time zone identifier. The result should …\n"],["load_timezone_info","TZInfo::DataSources::RubyDataSource","TZInfo/DataSources/RubyDataSource.html#method-i-load_timezone_info","(identifier)","<p>Returns a {TimezoneInfo} instance for the given time zone identifier. The result will either be a {ConstantOffsetDataTimezoneInfo}, …\n"],["load_timezone_info","TZInfo::DataSources::ZoneinfoDataSource","TZInfo/DataSources/ZoneinfoDataSource.html#method-i-load_timezone_info","(identifier)","<p>Returns a {TimezoneInfo} instance for the given time zone identifier. The result will either be a {ConstantOffsetDataTimezoneInfo} …\n"],["local_datetime","TZInfo::Timezone","TZInfo/Timezone.html#method-i-local_datetime","(year, month = 1, day = 1, hour = 0, minute = 0, second = 0, sub_second = 0, dst = Timezone.default_dst, &block)","<p>Creates a `DateTime` object based on the given (Gregorian calendar) date and time parameters. The parameters …\n"],["local_end_at","TZInfo::TimezoneTransition","TZInfo/TimezoneTransition.html#method-i-local_end_at","()","<p>Returns a {TimestampWithOffset} instance representing the local time when this transition causes the …\n"],["local_ends_at","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-local_ends_at","()","<p>Returns the local end time of the period or `nil` if the end of the period is unbounded.\n<p>The result is …\n"],["local_start_at","TZInfo::TimezoneTransition","TZInfo/TimezoneTransition.html#method-i-local_start_at","()","<p>Returns a {TimestampWithOffset} instance representing the local time when this transition causes the …\n"],["local_starts_at","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-local_starts_at","()","<p>Returns the local start time of the period or `nil` if the start of the period is unbounded.\n<p>The result …\n"],["local_time","TZInfo::Timezone","TZInfo/Timezone.html#method-i-local_time","(year, month = 1, day = 1, hour = 0, minute = 0, second = 0, sub_second = 0, dst = Timezone.default_dst, &block)","<p>Creates a `Time` object based on the given (Gregorian calendar) date and time parameters. The parameters …\n"],["local_timestamp","TZInfo::Timezone","TZInfo/Timezone.html#method-i-local_timestamp","(year, month = 1, day = 1, hour = 0, minute = 0, second = 0, sub_second = 0, dst = Timezone.default_dst, &block)","<p>Creates a {Timestamp} object based on the given (Gregorian calendar) date and time parameters. The parameters …\n"],["local_to_utc","TZInfo::Timezone","TZInfo/Timezone.html#method-i-local_to_utc","(local_time, dst = Timezone.default_dst)","<p>Converts a local time for the time zone to UTC.\n<p>The result will either be a `Time`, `DateTime` or {Timestamp} …\n"],["localtime","TZInfo::TimeWithOffset","TZInfo/TimeWithOffset.html#method-i-localtime","(*args)","<p>An overridden version of `Time#localtime` that clears the associated {TimezoneOffset}.\n<p>@return [TimeWithOffset] …\n"],["lookup_country_info","TZInfo::DataSource","TZInfo/DataSource.html#method-i-lookup_country_info","(hash, code, encoding = Encoding::UTF_8)","<p>Looks up a given code in the given hash of code to {DataSources::CountryInfo} mappings. If the code is …\n"],["name","TZInfo::Country","TZInfo/Country.html#method-i-name","()","<p>@return [String] the name of the country.\n"],["name","TZInfo::Timezone","TZInfo/Timezone.html#method-i-name","()","<p>@return [String] the identifier of the time zone, for example,\n\n<pre>`&quot;Europe/Paris&quot;`.</pre>\n"],["new","TZInfo::Country","TZInfo/Country.html#method-c-new","(info)","<p>Initializes a new {Country} based upon a {DataSources::CountryInfo} instance.\n<p>{Country} instances should …\n"],["new","TZInfo::CountryTimezone","TZInfo/CountryTimezone.html#method-c-new","(identifier, latitude, longitude, description = nil)","<p>Creates a new {CountryTimezone}.\n<p>The passed in identifier and description instances will be frozen.\n<p>{CountryTimezone} …\n"],["new","TZInfo::DataSource","TZInfo/DataSource.html#method-c-new","()","<p>Initializes a new {DataSource} instance. Typically only called via subclasses of {DataSource}.\n"],["new","TZInfo::DataSources::ConstantOffsetDataTimezoneInfo","TZInfo/DataSources/ConstantOffsetDataTimezoneInfo.html#method-c-new","(identifier, constant_offset)","<p>Initializes a new {ConstantOffsetDataTimezoneInfo}.\n<p>The passed in `identifier` instance will be frozen. …\n"],["new","TZInfo::DataSources::CountryInfo","TZInfo/DataSources/CountryInfo.html#method-c-new","(code, name, zones)","<p>Initializes a new {CountryInfo}. The passed in `code`, `name` and `zones` instances will be frozen.\n<p>@param …\n"],["new","TZInfo::DataSources::LinkedTimezoneInfo","TZInfo/DataSources/LinkedTimezoneInfo.html#method-c-new","(identifier, link_to_identifier)","<p>Initializes a new {LinkedTimezoneInfo}. The passed in `identifier` and `link_to_identifier` instances …\n"],["new","TZInfo::DataSources::RubyDataSource","TZInfo/DataSources/RubyDataSource.html#method-c-new","()","<p>Initializes a new {RubyDataSource} instance.\n<p>@raise [TZInfoDataNotFound] if the tzinfo-data gem could …\n"],["new","TZInfo::DataSources::TimezoneInfo","TZInfo/DataSources/TimezoneInfo.html#method-c-new","(identifier)","<p>Initializes a new TimezoneInfo. The passed in `identifier` instance will be frozen.\n<p>@param identifier …\n"],["new","TZInfo::DataSources::TransitionsDataTimezoneInfo","TZInfo/DataSources/TransitionsDataTimezoneInfo.html#method-c-new","(identifier, transitions)","<p>Initializes a new {TransitionsDataTimezoneInfo}.\n<p>The passed in `identifier` instance will be frozen.  …\n"],["new","TZInfo::DataSources::ZoneinfoDataSource","TZInfo/DataSources/ZoneinfoDataSource.html#method-c-new","(zoneinfo_dir = nil, alternate_iso3166_tab_path = nil)","<p>Initializes a new {ZoneinfoDataSource}.\n<p>If `zoneinfo_dir` is specified, it will be checked and used as …\n"],["new","TZInfo::InfoTimezone","TZInfo/InfoTimezone.html#method-c-new","(info)","<p>Initializes a new {InfoTimezone}.\n<p>{InfoTimezone} instances should not normally be created directly. Use …\n"],["new","TZInfo::LinkedTimezone","TZInfo/LinkedTimezone.html#method-c-new","(info)","<p>Initializes a new {LinkedTimezone}.\n<p>{LinkedTimezone} instances should not normally be created directly. …\n"],["new","TZInfo::OffsetTimezonePeriod","TZInfo/OffsetTimezonePeriod.html#method-c-new","(offset)","<p>Initializes an {OffsetTimezonePeriod}.\n<p>@param offset [TimezoneOffset] the offset that is constantly observed. …\n"],["new","TZInfo::Timestamp","TZInfo/Timestamp.html#method-c-new","(value, sub_second = 0, utc_offset = nil)","<p>Initializes a new {Timestamp}.\n<p>@param value [Integer] the number of seconds since 1970-01-01 00:00:00 …\n"],["new","TZInfo::TimezoneOffset","TZInfo/TimezoneOffset.html#method-c-new","(base_utc_offset, std_offset, abbreviation)","<p>Initializes a new {TimezoneOffset}.\n<p>{TimezoneOffset} instances should not normally be constructed manually. …\n"],["new","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-c-new","(offset)","<p>Initializes a {TimezonePeriod}.\n<p>@param offset [TimezoneOffset] the offset that is observed for the period …\n"],["new","TZInfo::TimezoneProxy","TZInfo/TimezoneProxy.html#method-c-new","(identifier)","<p>Initializes a new {TimezoneProxy}.\n<p>The `identifier` parameter is not checked when initializing the proxy. …\n"],["new","TZInfo::TimezoneTransition","TZInfo/TimezoneTransition.html#method-c-new","(offset, previous_offset, timestamp_value)","<p>Initializes a new {TimezoneTransition}.\n<p>{TimezoneTransition} instances should not normally be constructed …\n"],["new","TZInfo::TransitionsTimezonePeriod","TZInfo/TransitionsTimezonePeriod.html#method-c-new","(start_transition, end_transition)","<p>Initializes a {TransitionsTimezonePeriod}.\n<p>At least one of `start_transition` and `end_transition` must …\n"],["new!","TZInfo::Timestamp","TZInfo/Timestamp.html#method-c-new-21","(value, sub_second = 0, utc_offset = nil)","<p>Constructs a new instance of `self` (i.e. {Timestamp} or a subclass of {Timestamp}) without validating …\n"],["new_datetime","TZInfo::Timestamp","TZInfo/Timestamp.html#method-i-new_datetime","(klass = DateTime)","<p>Constructs a new instance of a `DateTime` or `DateTime`-like class with the same {value}, {sub_second} …\n"],["new_start","TZInfo::DateTimeWithOffset","TZInfo/DateTimeWithOffset.html#method-i-new_start","(start = Date::ITALY)","<p>An overridden version of `DateTime#new_start` that preserves the associated {TimezoneOffset}.\n<p>@return …\n"],["new_time","TZInfo::Timestamp","TZInfo/Timestamp.html#method-i-new_time","(klass = Time)","<p>Creates a new instance of a `Time` or `Time`-like class matching the {value} and {sub_second} of this …\n"],["now","TZInfo::Timezone","TZInfo/Timezone.html#method-i-now","()","<p>@return [TimeWithOffset] the current local time in the time zone.\n"],["observed_utc_offset","TZInfo::Timezone","TZInfo/Timezone.html#method-i-observed_utc_offset","(time = Time.now)","<p>Returns the observed offset from UTC in seconds at the given time. This includes adjustments made for …\n"],["observed_utc_offset","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-observed_utc_offset","()","<p>Returns the observed offset from UTC in seconds (`base_utc_offset + std_offset`). This includes adjustments …\n"],["offsets_up_to","TZInfo::Timezone","TZInfo/Timezone.html#method-i-offsets_up_to","(to, from = nil)","<p>Returns the unique offsets used by the time zone up to a given time (`to`) as an `Array` of {TimezoneOffset} …\n"],["period_for","TZInfo::DataSources::ConstantOffsetDataTimezoneInfo","TZInfo/DataSources/ConstantOffsetDataTimezoneInfo.html#method-i-period_for","(timestamp)","<p>@param timestamp [Timestamp] ignored. @return [TimezonePeriod] an unbounded {TimezonePeriod} for the …\n"],["period_for","TZInfo::DataSources::DataTimezoneInfo","TZInfo/DataSources/DataTimezoneInfo.html#method-i-period_for","(timestamp)","<p>@param timestamp [Timestamp] a {Timestamp} with a specified\n\n<pre>{Timestamp#utc_offset utc_offset}.</pre>\n<p>@return …\n"],["period_for","TZInfo::DataSources::TransitionsDataTimezoneInfo","TZInfo/DataSources/TransitionsDataTimezoneInfo.html#method-i-period_for","(timestamp)","<p>(see DataTimezoneInfo#period_for)\n"],["period_for","TZInfo::DataTimezone","TZInfo/DataTimezone.html#method-i-period_for","(time)","<p>(see Timezone#period_for)\n"],["period_for","TZInfo::LinkedTimezone","TZInfo/LinkedTimezone.html#method-i-period_for","(time)","<p>(see Timezone#period_for)\n"],["period_for","TZInfo::Timezone","TZInfo/Timezone.html#method-i-period_for","(time)","<p>Returns the {TimezonePeriod} that is valid at a given time.\n<p>Unlike {period_for_local} and {period_for_utc}, …\n"],["period_for","TZInfo::TimezoneProxy","TZInfo/TimezoneProxy.html#method-i-period_for","(time)","<p>(see Timezone#period_for)\n"],["period_for_local","TZInfo::Timezone","TZInfo/Timezone.html#method-i-period_for_local","(local_time, dst = Timezone.default_dst)","<p>Returns the {TimezonePeriod} that is valid at the given local time.\n<p>The UTC offset of the `local_time` …\n"],["period_for_utc","TZInfo::Timezone","TZInfo/Timezone.html#method-i-period_for_utc","(utc_time)","<p>Returns the {TimezonePeriod} that is valid at a given time.\n<p>The UTC offset of the `utc_time` parameter …\n"],["periods_for_local","TZInfo::DataSources::ConstantOffsetDataTimezoneInfo","TZInfo/DataSources/ConstantOffsetDataTimezoneInfo.html#method-i-periods_for_local","(local_timestamp)","<p>@param local_timestamp [Timestamp] ignored. @return [Array&lt;TimezonePeriod&gt;] an `Array` containing …\n"],["periods_for_local","TZInfo::DataSources::DataTimezoneInfo","TZInfo/DataSources/DataTimezoneInfo.html#method-i-periods_for_local","(local_timestamp)","<p>Returns an `Array` containing the {TimezonePeriod TimezonePeriods} that could be observed at the local …\n"],["periods_for_local","TZInfo::DataSources::TransitionsDataTimezoneInfo","TZInfo/DataSources/TransitionsDataTimezoneInfo.html#method-i-periods_for_local","(local_timestamp)","<p>(see DataTimezoneInfo#periods_for_local)\n"],["periods_for_local","TZInfo::DataTimezone","TZInfo/DataTimezone.html#method-i-periods_for_local","(local_time)","<p>(see Timezone#periods_for_local)\n"],["periods_for_local","TZInfo::LinkedTimezone","TZInfo/LinkedTimezone.html#method-i-periods_for_local","(local_time)","<p>(see Timezone#periods_for_local)\n"],["periods_for_local","TZInfo::Timezone","TZInfo/Timezone.html#method-i-periods_for_local","(local_time)","<p>Returns the set of {TimezonePeriod}s that are valid for the given local time as an `Array`.\n<p>The UTC offset …\n"],["periods_for_local","TZInfo::TimezoneProxy","TZInfo/TimezoneProxy.html#method-i-periods_for_local","(local_time)","<p>(see Timezone#periods_for_local)\n"],["process_search_path","TZInfo::DataSources::ZoneinfoDataSource","TZInfo/DataSources/ZoneinfoDataSource.html#method-c-process_search_path","(path, default)","<p>Processes a path for use as the {search_path} or {alternate_iso3166_tab_search_path}.\n<p>@param path [Object] …\n"],["raise_invalid_data_source","TZInfo::DataSource","TZInfo/DataSource.html#method-i-raise_invalid_data_source","(method_name)","<p>Raises {InvalidDataSource} to indicate that a method has not been overridden by a particular data source …\n"],["raise_not_implemented","TZInfo::DataSources::DataTimezoneInfo","TZInfo/DataSources/DataTimezoneInfo.html#method-i-raise_not_implemented","(method_name)","<p>Raises a {NotImplementedError} to indicate that the base class is incorrectly being used directly.\n<p>raise …\n"],["raise_not_implemented","TZInfo::DataSources::TimezoneInfo","TZInfo/DataSources/TimezoneInfo.html#method-i-raise_not_implemented","(method_name)","<p>Raises a {NotImplementedError}.\n<p>@param method_name [String] the name of the method that must be\n\n<pre>overridden.</pre>\n"],["raise_not_implemented","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-raise_not_implemented","(method_name)","<p>Raises a {NotImplementedError} to indicate that subclasses should override a method.\n<p>@raise [NotImplementedError] …\n"],["raise_unknown_timezone","TZInfo::Timezone","TZInfo/Timezone.html#method-i-raise_unknown_timezone","()","<p>Raises an {UnknownTimezone} exception.\n<p>@raise [UnknownTimezone] always.\n"],["real_timezone","TZInfo::TimezoneProxy","TZInfo/TimezoneProxy.html#method-i-real_timezone","()","<p>Returns the real {Timezone} instance being proxied.\n<p>The real {Timezone} is loaded using {Timezone.get} …\n"],["require_data","TZInfo::DataSources::RubyDataSource","TZInfo/DataSources/RubyDataSource.html#method-i-require_data","(*file)","<p>Requires a file from tzinfo/data.\n<p>@param file [Array&lt;String&gt;] a relative path to a file to be required. …\n"],["require_definition","TZInfo::DataSources::RubyDataSource","TZInfo/DataSources/RubyDataSource.html#method-i-require_definition","(identifier)","<p>Requires a zone definition by its identifier (split on /).\n<p>@param identifier [Array&lt;string&gt;] the …\n"],["require_index","TZInfo::DataSources::RubyDataSource","TZInfo/DataSources/RubyDataSource.html#method-i-require_index","(name)","<p>Requires an index by its name.\n<p>@param name [String] an index name.\n"],["resolve_tab_path","TZInfo::DataSources::ZoneinfoDataSource","TZInfo/DataSources/ZoneinfoDataSource.html#method-i-resolve_tab_path","(zoneinfo_path, standard_names, tab_name)","<p>Attempts to resolve the path to a tab file given its standard names and tab sub-directory name (as used …\n"],["round","TZInfo::TimeWithOffset","TZInfo/TimeWithOffset.html#method-i-round","(ndigits = 0)","<p>An overridden version of `Time#round` that, if there is an associated {TimezoneOffset}, returns a {TimeWithOffset} …\n"],["search_path","TZInfo::DataSources::ZoneinfoDataSource","TZInfo/DataSources/ZoneinfoDataSource.html#method-c-search_path","()","<p>An `Array` of directories that will be checked to find the system zoneinfo directory.\n<p>Directories are …\n"],["search_path=","TZInfo::DataSources::ZoneinfoDataSource","TZInfo/DataSources/ZoneinfoDataSource.html#method-c-search_path-3D","(search_path)","<p>Sets the directories to be checked when locating the system zoneinfo directory.\n<p>Can be set to an `Array` …\n"],["set","TZInfo::DataSource","TZInfo/DataSource.html#method-c-set","(data_source_or_type, *args)","<p>Sets the currently selected data source for time zone and country data.\n<p>This should usually be set to …\n"],["set_timezone_offset","TZInfo::DateTimeWithOffset","TZInfo/DateTimeWithOffset.html#method-i-set_timezone_offset","(timezone_offset)","<p>Sets the associated {TimezoneOffset}.\n<p>@param timezone_offset [TimezoneOffset] a {TimezoneOffset} valid …\n"],["set_timezone_offset","TZInfo::TimeWithOffset","TZInfo/TimeWithOffset.html#method-i-set_timezone_offset","(timezone_offset)","<p>Marks this {TimeWithOffset} as a local time with the UTC offset of a given {TimezoneOffset} and sets …\n"],["set_timezone_offset","TZInfo::TimestampWithOffset","TZInfo/TimestampWithOffset.html#method-i-set_timezone_offset","(timezone_offset)","<p>Sets the associated {TimezoneOffset} of this {TimestampWithOffset}.\n<p>@param timezone_offset [TimezoneOffset] …\n"],["set_timezone_offset","TZInfo::TimestampWithOffset","TZInfo/TimestampWithOffset.html#method-c-set_timezone_offset","(timestamp, timezone_offset)","<p>Creates a new {TimestampWithOffset} from a given {Timestamp} and {TimezoneOffset}.\n<p>@param timestamp [Timestamp] …\n"],["start_transition","TZInfo::OffsetTimezonePeriod","TZInfo/OffsetTimezonePeriod.html#method-i-start_transition","()","<p>@return [TimezoneTransition] the transition that defines the start of this\n\n<pre>{TimezonePeriod}, always `nil` ...</pre>\n"],["start_transition","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-start_transition","()","<p>@return [TimezoneTransition] the transition that defines the start of this\n\n<pre>{TimezonePeriod} (`nil` if ...</pre>\n"],["starts_at","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-starts_at","()","<p>Returns the UTC start time of the period or `nil` if the start of the period is unbounded.\n<p>The result …\n"],["std_offset","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-std_offset","()","<p>Returns the offset from the time zone&#39;s standard time in seconds (`observed_utc_offset - base_utc_offset …\n"],["step","TZInfo::DateTimeWithOffset","TZInfo/DateTimeWithOffset.html#method-i-step","(limit, step = 1)","<p>An overridden version of `DateTime#step` that clears the associated {TimezoneOffset} of the returned …\n"],["strftime","TZInfo::Timestamp","TZInfo/Timestamp.html#method-i-strftime","(format)","<p>Formats this {Timestamp} according to the directives in the given format string.\n<p>@param format [String] …\n"],["strftime","TZInfo::Timezone","TZInfo/Timezone.html#method-i-strftime","(format, time = Time.now)","<p>Converts a time to local time for the time zone and returns a `String` representation of the local time …\n"],["strftime","TZInfo::WithOffset","TZInfo/WithOffset.html#method-i-strftime","(format)","<p>Overrides the `Time`, `DateTime` or {Timestamp} version of `strftime`, replacing `%Z` with the {TimezoneOffset#abbreviation …\n"],["sub_second_to_s","TZInfo::Timestamp","TZInfo/Timestamp.html#method-i-sub_second_to_s","()","<p>Converts the {sub_second} value to a `String` suitable for appending to the `String` representation of …\n"],["timestamp","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-timestamp","(transition)","<p>@param  transition [TimezoneTransition] a transition or `nil`. @return [Timestamp] the {Timestamp} representing …\n"],["timestamp_with_offset","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-timestamp_with_offset","(transition)","<p>@param transition [TimezoneTransition] a transition or `nil`. @return [TimestampWithOffset] a {Timestamp} …\n"],["timezone","TZInfo::CountryTimezone","TZInfo/CountryTimezone.html#method-i-timezone","()","<p>Returns the associated {Timezone}.\n<p>The result is actually an instance of {TimezoneProxy} in order to defer …\n"],["timezone_identifier_encoding","TZInfo::DataSource","TZInfo/DataSource.html#method-i-timezone_identifier_encoding","()","<p>@return [Encoding] the `Encoding` used by the `String` instances returned\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">by</span> {<span class=\"ruby-identifier\">data_timezone_identifiers</span>} <span class=\"ruby-operator\">...</span>\n</pre>\n"],["timezone_identifiers","TZInfo::DataSource","TZInfo/DataSource.html#method-i-timezone_identifiers","()","<p>@return [Array&lt;String&gt;] a frozen `Array“ of all the available time zone\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">identifiers</span>. <span class=\"ruby-constant\">The</span> <span class=\"ruby-identifier\">identifiers</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to_a","TZInfo::TimeWithOffset","TZInfo/TimeWithOffset.html#method-i-to_a","()","<p>An overridden version of `Time#to_a`. The `isdst` (index 8) and `zone` (index 9) elements of the array …\n"],["to_datetime","TZInfo::TimeWithOffset","TZInfo/TimeWithOffset.html#method-i-to_datetime","()","<p>An overridden version of `Time#to_datetime` that, if there is an associated {TimezoneOffset}, returns …\n"],["to_datetime","TZInfo::Timestamp","TZInfo/Timestamp.html#method-i-to_datetime","()","<p>Converts this {Timestamp} to a `DateTime`.\n<p>@return [DateTime] a DateTime representation of this {Timestamp}. …\n"],["to_datetime","TZInfo::TimestampWithOffset","TZInfo/TimestampWithOffset.html#method-i-to_datetime","()","<p>An overridden version of {Timestamp#to_datetime}, if there is an associated {TimezoneOffset}, returns …\n"],["to_i","TZInfo::Timestamp","TZInfo/Timestamp.html#method-i-to_i","()","<p>Converts this {Timestamp} to an `Integer` number of seconds since 1970-01-01 00:00:00 UTC (ignoring leap …\n"],["to_local","TZInfo::Timezone","TZInfo/Timezone.html#method-i-to_local","(time)","<p>Converts a time to the local time for the time zone.\n<p>The result will be of type {TimeWithOffset} (if passed …\n"],["to_s","TZInfo::Country","TZInfo/Country.html#method-i-to_s","()","<p>@return [String] a `String` representation of this {Country} (the name of\n\n<pre>the country).</pre>\n"],["to_s","TZInfo::DataSource","TZInfo/DataSource.html#method-i-to_s","()","<p>@return [String] a description of the {DataSource}.\n"],["to_s","TZInfo::DataSources::RubyDataSource","TZInfo/DataSources/RubyDataSource.html#method-i-to_s","()","<p>(see DataSource#to_s)\n"],["to_s","TZInfo::DataSources::ZoneinfoDataSource","TZInfo/DataSources/ZoneinfoDataSource.html#method-i-to_s","()","<p>(see DataSource#to_s)\n"],["to_s","TZInfo::Timestamp","TZInfo/Timestamp.html#method-i-to_s","()","<p>@return [String] a `String` representation of this {Timestamp}.\n"],["to_s","TZInfo::Timezone","TZInfo/Timezone.html#method-i-to_s","()","<p>@return [String] {identifier}, modified to make it more readable.\n"],["to_time","TZInfo::DateTimeWithOffset","TZInfo/DateTimeWithOffset.html#method-i-to_time","()","<p>An overridden version of `DateTime#to_time` that, if there is an associated {TimezoneOffset}, returns …\n"],["to_time","TZInfo::Timestamp","TZInfo/Timestamp.html#method-i-to_time","()","<p>Converts this {Timestamp} to a `Time`.\n<p>@return [Time] a `Time` representation of this {Timestamp}. If …\n"],["to_time","TZInfo::TimestampWithOffset","TZInfo/TimestampWithOffset.html#method-i-to_time","()","<p>An overridden version of {Timestamp#to_time} that, if there is an associated {TimezoneOffset}, returns …\n"],["transition_on_or_after_timestamp?","TZInfo::DataSources::TransitionsDataTimezoneInfo","TZInfo/DataSources/TransitionsDataTimezoneInfo.html#method-i-transition_on_or_after_timestamp-3F","(transition, timestamp)","<p>Determines if a transition occurs at or after a given {Timestamp}, taking the {Timestamp#sub_second  …\n"],["transitions_up_to","TZInfo::DataSources::ConstantOffsetDataTimezoneInfo","TZInfo/DataSources/ConstantOffsetDataTimezoneInfo.html#method-i-transitions_up_to","(to_timestamp, from_timestamp = nil)","<p>@param to_timestamp [Timestamp] ignored. @param from_timestamp [Timestamp] ignored. @return [Array] an …\n"],["transitions_up_to","TZInfo::DataSources::DataTimezoneInfo","TZInfo/DataSources/DataTimezoneInfo.html#method-i-transitions_up_to","(to_timestamp, from_timestamp = nil)","<p>Returns an `Array` of {TimezoneTransition} instances representing the times where the UTC offset of the …\n"],["transitions_up_to","TZInfo::DataSources::TransitionsDataTimezoneInfo","TZInfo/DataSources/TransitionsDataTimezoneInfo.html#method-i-transitions_up_to","(to_timestamp, from_timestamp = nil)","<p>(see DataTimezoneInfo#transitions_up_to)\n"],["transitions_up_to","TZInfo::DataTimezone","TZInfo/DataTimezone.html#method-i-transitions_up_to","(to, from = nil)","<p>(see Timezone#transitions_up_to)\n"],["transitions_up_to","TZInfo::LinkedTimezone","TZInfo/LinkedTimezone.html#method-i-transitions_up_to","(to, from = nil)","<p>(see Timezone#transitions_up_to)\n"],["transitions_up_to","TZInfo::Timezone","TZInfo/Timezone.html#method-i-transitions_up_to","(to, from = nil)","<p>Returns an `Array` of {TimezoneTransition} instances representing the times where the UTC offset of the …\n"],["transitions_up_to","TZInfo::TimezoneProxy","TZInfo/TimezoneProxy.html#method-i-transitions_up_to","(to, from = nil)","<p>(see Timezone#transitions_up_to)\n"],["try_with_encoding","TZInfo::DataSource","TZInfo/DataSource.html#method-i-try_with_encoding","(string, encoding)","<p>Tries an operation using `string` directly. If the operation fails, the string is copied and encoded …\n"],["upto","TZInfo::DateTimeWithOffset","TZInfo/DateTimeWithOffset.html#method-i-upto","(max)","<p>An overridden version of `DateTime#upto` that clears the associated {TimezoneOffset} of the returned …\n"],["utc","TZInfo::TimeWithOffset","TZInfo/TimeWithOffset.html#method-i-utc","()","<p>An overridden version of `Time#utc` that clears the associated {TimezoneOffset}.\n<p>@return [TimeWithOffset] …\n"],["utc","TZInfo::Timestamp","TZInfo/Timestamp.html#method-i-utc","()","<p>@return [Timestamp] a UTC {Timestamp} equivalent to this instance. Returns\n\n<pre>`self` if {#utc? self.utc?} ...</pre>\n"],["utc","TZInfo::Timestamp","TZInfo/Timestamp.html#method-c-utc","(value, sub_second = 0)","<p>Creates a new UTC {Timestamp}.\n<p>@param value [Integer] the number of seconds since 1970-01-01 00:00:00 …\n"],["utc?","TZInfo::Timestamp","TZInfo/Timestamp.html#method-i-utc-3F","()","<p>@return [Boolean] `true` if this {Timestamp} represents UTC, `false` if\n\n<pre>the {Timestamp} wasn&#39;t specified ...</pre>\n"],["utc_offset","TZInfo::Timezone","TZInfo/Timezone.html#method-i-utc_offset","(time = Time.now)",""],["utc_offset","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-utc_offset","()",""],["utc_to_local","TZInfo::Timezone","TZInfo/Timezone.html#method-i-utc_to_local","(utc_time)","<p>Converts a time in UTC to the local time for the time zone.\n<p>The result will be of type {TimeWithOffset} …\n"],["utc_total_offset","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-utc_total_offset","()",""],["validate_timezone_identifier","TZInfo::DataSource","TZInfo/DataSource.html#method-i-validate_timezone_identifier","(identifier)","<p>Checks that the given identifier is a valid time zone identifier (can be found in the {timezone_identifiers} …\n"],["validate_zoneinfo_dir","TZInfo::DataSources::ZoneinfoDataSource","TZInfo/DataSources/ZoneinfoDataSource.html#method-i-validate_zoneinfo_dir","(path, iso3166_tab_path = nil)","<p>Validates a zoneinfo directory and returns the paths to the iso3166.tab and zone1970.tab or zone.tab …\n"],["value_and_sub_second_to_s","TZInfo::Timestamp","TZInfo/Timestamp.html#method-i-value_and_sub_second_to_s","(offset = 0)","<p>Converts the value and sub-seconds to a `String`, adding on the given offset.\n<p>@param offset [Integer] …\n"],["version_info","TZInfo::DataSources::RubyDataSource","TZInfo/DataSources/RubyDataSource.html#method-i-version_info","()","<p>@return [String] a `String` containing TZInfo::Data version infomation\n\n<pre>for inclusion in the #to_s and ...</pre>\n"],["zone","TZInfo::TimeWithOffset","TZInfo/TimeWithOffset.html#method-i-zone","()","<p>An overridden version of `Time#zone` that, if there is an associated {TimezoneOffset}, returns the {TimezoneOffset#abbreviation …\n"],["zone_identifier","TZInfo::TimezonePeriod","TZInfo/TimezonePeriod.html#method-i-zone_identifier","()",""],["zone_identifiers","TZInfo::Country","TZInfo/Country.html#method-i-zone_identifiers","()","<p>Returns an `Array` containing the identifier for each time zone observed by the country. These are in …\n"],["zone_info","TZInfo::Country","TZInfo/Country.html#method-i-zone_info","()","<p>Returns a frozen `Array` containing a {CountryTimezone} instance for each time zone observed by the country. …\n"],["zone_names","TZInfo::Country","TZInfo/Country.html#method-i-zone_names","()",""],["zones","TZInfo::Country","TZInfo/Country.html#method-i-zones","()","<p>Returns An `Array` containing a {Timezone} instance for each time zone observed by the country. These …\n"],["CHANGES","","CHANGES_md.html","","<p>Changes\n<p>Version 2.0.4 - 16-Dec-2020\n<p>Fixed an incorrect InvalidTimezoneIdentifier exception raised when …\n"],["LICENSE","","LICENSE.html","","<p>Copyright © 2005-2020 Philip Ross\n<p>Permission is hereby granted, free of charge, to any person obtaining …\n"],["README","","README_md.html","","<p>TZInfo - Ruby Time Zone Library\n<p><img src=\"https://img.shields.io/gem/v/tzinfo\"> <img src=\"https://img.shields.io/travis/com/tzinfo/tzinfo?logo=travis\"> …\n"]]}}