var search_data = {"index":{"searchIndex":["object","octokit","abusedetected","accountsuspended","applicationcredentialsrequired","arguments","authentication","badgateway","badrequest","billingissue","branchnotprotected","client","actionssecrets","actionsworkflowruns","actionsworkflows","apps","authorizations","checks","commitbranches","commitcomments","commitpulls","commits","communityprofile","contents","deployments","downloads","emojis","events","feeds","gists","gitignore","hooks","issues","labels","legacysearch","licenses","markdown","marketplace","meta","milestones","notifications","oauthapplications","objects","organizations","pages","projects","pubsubhubbub","pullrequests","ratelimit","reactions","refs","releases","repositories","repositoryinvitations","reviews","say","search","servicestatus","sourceimport","stats","statuses","traffic","users","clienterror","commitisnotpartofpullrequest","configurable","conflict","connection","default","enterpriseadminclient","adminstats","license","orgs","searchindexing","users","enterprisemanagementconsoleclient","managementconsole","error","forbidden","gist","installationsuspended","internalservererror","invalidrepository","methodnotallowed","middleware","followredirects","redirectlimitreached","missingcontenttype","notacceptable","notfound","notimplemented","onetimepasswordrequired","organization","pathdifftoolarge","preview","ratelimit","repoarguments","repository","repositoryunavailable","response","feedparser","raiseerror","samlprotected","servererror","serviceunavailable","toolargecontent","toomanyloginattempts","toomanyrequests","unauthorized","unavailableforlegalreasons","unprocessableentity","unsupportedmediatype","unverifiedemail","user","warnable","accept_repo_invitation()","accept_repository_invitation()","access_token()","access_token=()","add_assignees()","add_authorized_key()","add_collab()","add_collaborator()","add_comment()","add_content()","add_contents()","add_deploy_key()","add_email()","add_key()","add_label()","add_labels_to_an_issue()","add_repo_to_installation()","add_repository_to_app_installation()","add_repository_to_integration_installation()","add_team_member()","add_team_membership()","add_team_repo()","add_team_repository()","admin_comments_stats()","admin_gists_stats()","admin_hooks_stats()","admin_issues_stats()","admin_milestones_stats()","admin_organization_stats()","admin_pages_stats()","admin_pull_requests_stats()","admin_repository_stats()","admin_stats()","admin_users_stats()","agent()","all_organizations()","all_orgs()","all_repositories()","all_users()","api_endpoint()","api_endpoint()","app()","application_authenticated?()","archive_link()","as_app()","authorization()","authorizations()","authorize_url()","authorized_keys()","auto_paginate()","available_hooks()","basic_authenticated?()","bearer_authenticated?()","bearer_token()","bearer_token=()","billing_actions()","blob()","boolean_from_response()","branch()","branch_protection()","branches()","build_error_context()","build_error_message()","call()","cancel_source_import()","cancel_workflow_run()","check_application_authorization()","check_assignee()","check_run()","check_run_annotations()","check_runs_for_check_suite()","check_runs_for_ref()","check_suite()","check_suites_for_ref()","check_token()","child_teams()","client()","client_id()","client_id=()","client_secret()","client_secret=()","client_without_redirects()","clones()","close_issue()","close_pull_request()","code_frequency_stats()","collaborator?()","collaborators()","collabs()","column_cards()","combined_status()","commit()","commit_activity_stats()","commit_branches()","commit_comment()","commit_comment_reactions()","commit_comments()","commit_pulls()","commits()","commits_before()","commits_between()","commits_on()","commits_since()","community_profile()","compare()","conceal_membership()","config_check()","config_status()","configure()","connection_options()","content()","content_type_from_file()","contents()","contribs()","contributor_stats()","contributors()","contributors_stats()","convert_to_get?()","convert_to_outside_collaborator()","create()","create_app_installation_access_token()","create_authorization()","create_blob()","create_check_run()","create_check_suite()","create_commit()","create_commit_comment()","create_commit_comment_reaction()","create_content()","create_contents()","create_deployment()","create_deployment_status()","create_gist()","create_gist_comment()","create_hook()","create_impersonation_token()","create_installation_access_token()","create_integration_installation_access_token()","create_issue()","create_issue_comment_reaction()","create_issue_reaction()","create_milestone()","create_or_update_secret()","create_org_hook()","create_org_project()","create_organization()","create_organization_project()","create_project()","create_project_card()","create_project_column()","create_pull_comment()","create_pull_reply()","create_pull_request()","create_pull_request_comment()","create_pull_request_comment_reply()","create_pull_request_for_issue()","create_pull_request_review()","create_pull_request_review_comment_reaction()","create_ref()","create_reference()","create_release()","create_repo()","create_repo_from_template()","create_repository()","create_repository_from_template()","create_review_reply()","create_status()","create_tag()","create_team()","create_tree()","create_user()","create_view_comment()","data()","decline_invitation()","decline_repository_invitation()","default_media_type()","delete()","delete_app_authorization()","delete_app_token()","delete_application_authorization()","delete_authorization()","delete_authorized_key()","delete_branch()","delete_comment()","delete_commit_comment()","delete_content()","delete_contents()","delete_deployment()","delete_download()","delete_gist()","delete_gist_comment()","delete_impersonation_token()","delete_installation()","delete_key()","delete_label!()","delete_migration_archive()","delete_milestone()","delete_project()","delete_project_card()","delete_project_column()","delete_pull_comment()","delete_pull_request_comment()","delete_pull_request_review()","delete_pull_request_review_request()","delete_reaction()","delete_ref()","delete_reference()","delete_release()","delete_release_asset()","delete_repo()","delete_repo_invitation()","delete_repository()","delete_repository_invitation()","delete_review_comment()","delete_secret()","delete_subscription()","delete_team()","delete_thread_subscription()","delete_user()","delete_user_migration_archive()","delete_workflow_run()","delete_workflow_run_logs()","delivery_method_from_header()","demote()","deploy_key()","deploy_keys()","deployment()","deployment_statuses()","deployments()","disable_vulnerability_alerts()","dismiss_pull_request_review()","dispatch_event()","documentation_url()","download()","downloads()","edit()","edit_deploy_key()","edit_gist()","edit_hook()","edit_maintenance_status()","edit_milestone()","edit_org_hook()","edit_release()","edit_release_asset()","edit_repository()","edit_settings()","emails()","emojis()","enable_vulnerability_alerts()","endpoint()","endpoint()","ensure_api_media_type()","enterprise_admin_client()","enterprise_management_console_client()","error_for_401()","error_for_403()","error_for_404()","error_for_422()","errors()","exchange_code_for_token()","faraday_configuration()","feed()","feeds()","fetch_client_id_and_secret()","find_app_installations()","find_installation_repositories_for_user()","find_installations()","find_integration_installations()","find_organization_installation()","find_repository_installation()","find_user_installation()","find_user_installations()","follow()","follow_limit()","follow_redirect?()","followers()","following()","follows?()","fork()","fork_gist()","forks()","from_response()","from_response()","from_url()","from_url()","get()","get_admin_stats()","get_authorized_keys()","get_branch()","get_maintenance_status()","get_public_key()","get_secret()","get_settings()","get_stats()","gist()","gist_comment()","gist_comments()","gist_commits()","gist_forks()","gist_starred?()","gists()","git_commit()","github_meta()","github_status()","github_status_last_message()","github_status_messages()","gitignore_template()","gitignore_templates()","head()","hook()","hooks()","href()","id_api_path()","index_organization()","index_organizations_repositories()","index_organizations_repositories_code()","index_organizations_repositories_issues()","index_repository()","index_repository_code()","index_repository_issues()","index_user()","index_users_repositories()","index_users_repositories_code()","index_users_repositories_issues()","inspect()","installation()","invite_user_to_repo()","invite_user_to_repository()","iso8601()","issue()","issue_comment()","issue_comment_reactions()","issue_comments()","issue_event()","issue_events()","issue_reactions()","issue_timeline()","issues()","issues_comments()","key()","keys()","keys()","label()","labels()","labels_for_issue()","labels_for_milestone()","languages()","last_response()","latest_pages_build()","latest_release()","legacy_search_issues()","legacy_search_repositories()","legacy_search_users()","license()","license_info()","licenses()","list_accounts_for_plan()","list_all_keys()","list_app_installation_repositories()","list_assignees()","list_check_runs_for_check_suite()","list_check_runs_for_ref()","list_check_suites_for_ref()","list_commit_comments()","list_commits()","list_deploy_keys()","list_deployment_statuses()","list_deployments()","list_downloads()","list_gists()","list_installation_repos()","list_integration_installation_repositories()","list_issues()","list_milestones()","list_org_hooks()","list_organizations()","list_orgs()","list_pages_builds()","list_plans()","list_references()","list_refs()","list_releases()","list_repos()","list_repositories()","list_repository_workflow_runs()","list_secrets()","list_statuses()","list_workflow_runs()","list_workflows()","lock_issue()","login()","login()","login=()","login_from_netrc()","maintenance_status()","management_console_endpoint()","management_console_endpoint()","management_console_endpoint=()","management_console_password()","management_console_password=()","map_source_import_commit_author()","mark_notifications_as_read()","mark_repo_notifications_as_read()","mark_repository_notifications_as_read()","mark_thread_as_read()","markdown()","marketplace_purchases()","matching_refs()","merge()","merge_pull_request()","meta()","method_missing()","middleware()","migration_archive_url()","migration_status()","migrations()","milestone()","milestones()","move_project_card()","move_project_column()","named_api_path()","netrc()","netrc?()","netrc_file()","network()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","notifications()","octocat()","octokit_warn()","on_complete()","on_complete()","open_issue()","options()","options()","org()","org_hook()","org_hooks()","org_invitations()","org_issues()","org_member?()","org_members()","org_membership()","org_memberships()","org_projects()","org_public_member?()","org_public_members()","org_repos()","org_repositories()","org_teams()","organization()","organization_events()","organization_invitations()","organization_member?()","organization_members()","organization_membership()","organization_memberships()","organization_projects()","organization_public_events()","organization_public_member?()","organization_public_members()","organization_repositories()","organization_teams()","organizations()","orgs()","outside_collaborators()","pages()","pages_build()","pages_builds()","paginate()","parse_date()","parse_payload()","parse_query_and_convenience_headers()","participation_stats()","password()","password=()","password_delivery()","password_hash()","patch()","path()","path()","path()","path()","per_page()","perform_with_redirection()","permission_level()","ping_hook()","ping_org_hook()","plan_for_account()","post()","project()","project_card()","project_column()","project_columns()","projects()","promote()","protect_branch()","proxy()","pub_sub_hubbub_request()","public_events()","public_gists()","publicize_membership()","pull()","pull_comment()","pull_comments()","pull_commits()","pull_files()","pull_merged?()","pull_request()","pull_request_comment()","pull_request_comments()","pull_request_commits()","pull_request_files()","pull_request_merged?()","pull_request_review()","pull_request_review_comment_reactions()","pull_request_review_comments()","pull_request_review_requests()","pull_request_reviews()","pull_requests()","pull_requests_comments()","pulls()","pulls_comments()","punch_card()","punch_card_stats()","put()","queue_index()","raise_invalid_repository!()","rate_limit()","rate_limit!()","rate_limit_remaining()","rate_limit_remaining!()","ratelimit()","ratelimit!()","ratelimit_remaining()","ratelimit_remaining!()","readme()","received_events()","received_public_events()","redact_url()","ref()","reference()","references()","refs()","release()","release_asset()","release_assets()","release_for_tag()","releases()","remove_all_labels()","remove_assignees()","remove_authorized_key()","remove_collab()","remove_collaborator()","remove_content()","remove_contents()","remove_deploy_key()","remove_email()","remove_hook()","remove_key()","remove_label()","remove_org_hook()","remove_org_member()","remove_org_membership()","remove_organization_member()","remove_organization_membership()","remove_outside_collaborator()","remove_repo_from_installation()","remove_repository_from_app_installation()","remove_repository_from_integration_installation()","remove_team_member()","remove_team_membership()","remove_team_repo()","remove_team_repository()","rename_branch()","rename_user()","reopen_issue()","replace_all_labels()","replace_all_topics()","repo()","repo_assignees()","repo_invitations()","repo_issue_events()","repo_notifications()","repo_teams()","repos()","repositories()","repository()","repository?()","repository_assignees()","repository_events()","repository_invitations()","repository_issue_events()","repository_license_contents()","repository_network_events()","repository_notifications()","repository_teams()","repository_workflow_runs()","request()","request_page_build()","request_pull_request_review()","required_header()","rerequest_check_suite()","rerun_workflow_run()","reset!()","reset_agent()","reset_application_authorization()","reset_token()","respond_to_missing?()","response_body()","response_error()","response_error_summary()","response_headers()","response_message()","response_status()","review_comment()","review_comments()","reviews_comments()","revoke_all_application_authorizations()","revoke_application_authorization()","root()","safe_escape()","same_host?()","same_options?()","sawyer_options()","say()","scopes()","search()","search_code()","search_commits()","search_issues()","search_repos()","search_repositories()","search_users()","set_check_suite_preferences()","set_maintenance_status()","set_private()","set_public()","set_source_import_lfs_preference()","settings()","setup()","slug()","source_import_commit_authors()","source_import_large_files()","source_import_progress()","ssl_verify_mode()","star()","star_gist()","stargazers()","starred()","starred?()","starred_gists()","start_configuration()","start_migration()","start_source_import()","start_user_migration()","status()","statuses()","submit_pull_request_review()","subscribe()","subscribe_service_hook()","subscribers()","subscription()","subscriptions()","suspend()","tag()","tags()","team()","team_by_name()","team_invitations()","team_member?()","team_members()","team_membership()","team_repo?()","team_repos()","team_repositories()","team_repository?()","teams()","test_hook()","thread_notifications()","thread_subscription()","to_s()","to_s()","token_authenticated?()","top_paths()","top_referrers()","topics()","transfer_repo()","transfer_repository()","tree()","unfollow()","unlock_issue()","unlock_repository()","unlock_user_repository()","unprotect_branch()","unpublicize_membership()","unstar()","unstar_gist()","unsubscribe()","unsubscribe_service_hook()","unsuspend()","unwatch()","update()","update_authorization()","update_branch()","update_check_run()","update_comment()","update_commit_comment()","update_content()","update_contents()","update_deploy_key()","update_env()","update_gist_comment()","update_issue()","update_key()","update_label()","update_milestone()","update_org()","update_org_hook()","update_org_membership()","update_organization()","update_organization_membership()","update_project()","update_project_card()","update_project_column()","update_pull_comment()","update_pull_request()","update_pull_request_comment()","update_pull_request_review()","update_ref()","update_reference()","update_release()","update_release_asset()","update_repo_invitation()","update_repository()","update_repository_invitation()","update_review_comment()","update_source_import()","update_subscription()","update_team()","update_thread_subscription()","update_user()","upgrade()","upload_asset()","upload_license()","url()","url()","user()","user_agent()","user_authenticated?()","user_events()","user_issues()","user_keys()","user_migration_archive_url()","user_migration_repositories()","user_migration_status()","user_migrations()","user_path()","user_public_events()","user_repo_invitations()","user_repository_invitations()","user_teams()","validate_credentials()","validate_owner_and_name!()","views()","vulnerability_alerts_enabled?()","warn_preview()","watch()","watched()","watchers()","web_endpoint()","web_endpoint()","workflow()","workflow_dispatch()","workflow_run()","workflow_run_logs()","workflow_runs()","workflows()"],"longSearchIndex":["object","octokit","octokit::abusedetected","octokit::accountsuspended","octokit::applicationcredentialsrequired","octokit::arguments","octokit::authentication","octokit::badgateway","octokit::badrequest","octokit::billingissue","octokit::branchnotprotected","octokit::client","octokit::client::actionssecrets","octokit::client::actionsworkflowruns","octokit::client::actionsworkflows","octokit::client::apps","octokit::client::authorizations","octokit::client::checks","octokit::client::commitbranches","octokit::client::commitcomments","octokit::client::commitpulls","octokit::client::commits","octokit::client::communityprofile","octokit::client::contents","octokit::client::deployments","octokit::client::downloads","octokit::client::emojis","octokit::client::events","octokit::client::feeds","octokit::client::gists","octokit::client::gitignore","octokit::client::hooks","octokit::client::issues","octokit::client::labels","octokit::client::legacysearch","octokit::client::licenses","octokit::client::markdown","octokit::client::marketplace","octokit::client::meta","octokit::client::milestones","octokit::client::notifications","octokit::client::oauthapplications","octokit::client::objects","octokit::client::organizations","octokit::client::pages","octokit::client::projects","octokit::client::pubsubhubbub","octokit::client::pullrequests","octokit::client::ratelimit","octokit::client::reactions","octokit::client::refs","octokit::client::releases","octokit::client::repositories","octokit::client::repositoryinvitations","octokit::client::reviews","octokit::client::say","octokit::client::search","octokit::client::servicestatus","octokit::client::sourceimport","octokit::client::stats","octokit::client::statuses","octokit::client::traffic","octokit::client::users","octokit::clienterror","octokit::commitisnotpartofpullrequest","octokit::configurable","octokit::conflict","octokit::connection","octokit::default","octokit::enterpriseadminclient","octokit::enterpriseadminclient::adminstats","octokit::enterpriseadminclient::license","octokit::enterpriseadminclient::orgs","octokit::enterpriseadminclient::searchindexing","octokit::enterpriseadminclient::users","octokit::enterprisemanagementconsoleclient","octokit::enterprisemanagementconsoleclient::managementconsole","octokit::error","octokit::forbidden","octokit::gist","octokit::installationsuspended","octokit::internalservererror","octokit::invalidrepository","octokit::methodnotallowed","octokit::middleware","octokit::middleware::followredirects","octokit::middleware::redirectlimitreached","octokit::missingcontenttype","octokit::notacceptable","octokit::notfound","octokit::notimplemented","octokit::onetimepasswordrequired","octokit::organization","octokit::pathdifftoolarge","octokit::preview","octokit::ratelimit","octokit::repoarguments","octokit::repository","octokit::repositoryunavailable","octokit::response","octokit::response::feedparser","octokit::response::raiseerror","octokit::samlprotected","octokit::servererror","octokit::serviceunavailable","octokit::toolargecontent","octokit::toomanyloginattempts","octokit::toomanyrequests","octokit::unauthorized","octokit::unavailableforlegalreasons","octokit::unprocessableentity","octokit::unsupportedmediatype","octokit::unverifiedemail","octokit::user","octokit::warnable","octokit::client::repositoryinvitations#accept_repo_invitation()","octokit::client::repositoryinvitations#accept_repository_invitation()","octokit::default::access_token()","octokit::client#access_token=()","octokit::client::issues#add_assignees()","octokit::enterprisemanagementconsoleclient::managementconsole#add_authorized_key()","octokit::client::repositories#add_collab()","octokit::client::repositories#add_collaborator()","octokit::client::issues#add_comment()","octokit::client::contents#add_content()","octokit::client::contents#add_contents()","octokit::client::repositories#add_deploy_key()","octokit::client::users#add_email()","octokit::client::users#add_key()","octokit::client::labels#add_label()","octokit::client::labels#add_labels_to_an_issue()","octokit::client::apps#add_repo_to_installation()","octokit::client::apps#add_repository_to_app_installation()","octokit::client::apps#add_repository_to_integration_installation()","octokit::client::organizations#add_team_member()","octokit::client::organizations#add_team_membership()","octokit::client::organizations#add_team_repo()","octokit::client::organizations#add_team_repository()","octokit::enterpriseadminclient::adminstats#admin_comments_stats()","octokit::enterpriseadminclient::adminstats#admin_gists_stats()","octokit::enterpriseadminclient::adminstats#admin_hooks_stats()","octokit::enterpriseadminclient::adminstats#admin_issues_stats()","octokit::enterpriseadminclient::adminstats#admin_milestones_stats()","octokit::enterpriseadminclient::adminstats#admin_organization_stats()","octokit::enterpriseadminclient::adminstats#admin_pages_stats()","octokit::enterpriseadminclient::adminstats#admin_pull_requests_stats()","octokit::enterpriseadminclient::adminstats#admin_repository_stats()","octokit::enterpriseadminclient::adminstats#admin_stats()","octokit::enterpriseadminclient::adminstats#admin_users_stats()","octokit::connection#agent()","octokit::client::organizations#all_organizations()","octokit::client::organizations#all_orgs()","octokit::client::repositories#all_repositories()","octokit::client::users#all_users()","octokit::configurable#api_endpoint()","octokit::default::api_endpoint()","octokit::client::apps#app()","octokit::authentication#application_authenticated?()","octokit::client::contents#archive_link()","octokit::client#as_app()","octokit::client::authorizations#authorization()","octokit::client::authorizations#authorizations()","octokit::client::authorizations#authorize_url()","octokit::enterprisemanagementconsoleclient::managementconsole#authorized_keys()","octokit::default::auto_paginate()","octokit::client::hooks#available_hooks()","octokit::authentication#basic_authenticated?()","octokit::authentication#bearer_authenticated?()","octokit::default::bearer_token()","octokit::client#bearer_token=()","octokit::client::organizations#billing_actions()","octokit::client::objects#blob()","octokit::connection#boolean_from_response()","octokit::client::repositories#branch()","octokit::client::repositories#branch_protection()","octokit::client::repositories#branches()","octokit::error#build_error_context()","octokit::error#build_error_message()","octokit::middleware::followredirects#call()","octokit::client::sourceimport#cancel_source_import()","octokit::client::actionsworkflowruns#cancel_workflow_run()","octokit::client::oauthapplications#check_application_authorization()","octokit::client::repositories#check_assignee()","octokit::client::checks#check_run()","octokit::client::checks#check_run_annotations()","octokit::client::checks#check_runs_for_check_suite()","octokit::client::checks#check_runs_for_ref()","octokit::client::checks#check_suite()","octokit::client::checks#check_suites_for_ref()","octokit::client::oauthapplications#check_token()","octokit::client::organizations#child_teams()","octokit::client()","octokit::default::client_id()","octokit::client#client_id=()","octokit::default::client_secret()","octokit::client#client_secret=()","octokit::client#client_without_redirects()","octokit::client::traffic#clones()","octokit::client::issues#close_issue()","octokit::client::pullrequests#close_pull_request()","octokit::client::stats#code_frequency_stats()","octokit::client::repositories#collaborator?()","octokit::client::repositories#collaborators()","octokit::client::repositories#collabs()","octokit::client::projects#column_cards()","octokit::client::statuses#combined_status()","octokit::client::commits#commit()","octokit::client::stats#commit_activity_stats()","octokit::client::commitbranches#commit_branches()","octokit::client::commitcomments#commit_comment()","octokit::client::reactions#commit_comment_reactions()","octokit::client::commitcomments#commit_comments()","octokit::client::commitpulls#commit_pulls()","octokit::client::commits#commits()","octokit::client::commits#commits_before()","octokit::client::commits#commits_between()","octokit::client::commits#commits_on()","octokit::client::commits#commits_since()","octokit::client::communityprofile#community_profile()","octokit::client::commits#compare()","octokit::client::organizations#conceal_membership()","octokit::enterprisemanagementconsoleclient::managementconsole#config_check()","octokit::enterprisemanagementconsoleclient::managementconsole#config_status()","octokit::configurable#configure()","octokit::default::connection_options()","octokit::client::contents#content()","octokit::client::releases#content_type_from_file()","octokit::client::contents#contents()","octokit::client::repositories#contribs()","octokit::client::stats#contributor_stats()","octokit::client::repositories#contributors()","octokit::client::stats#contributors_stats()","octokit::middleware::followredirects#convert_to_get?()","octokit::client::organizations#convert_to_outside_collaborator()","octokit::client::repositories#create()","octokit::client::apps#create_app_installation_access_token()","octokit::client::authorizations#create_authorization()","octokit::client::objects#create_blob()","octokit::client::checks#create_check_run()","octokit::client::checks#create_check_suite()","octokit::client::commits#create_commit()","octokit::client::commitcomments#create_commit_comment()","octokit::client::reactions#create_commit_comment_reaction()","octokit::client::contents#create_content()","octokit::client::contents#create_contents()","octokit::client::deployments#create_deployment()","octokit::client::deployments#create_deployment_status()","octokit::client::gists#create_gist()","octokit::client::gists#create_gist_comment()","octokit::client::hooks#create_hook()","octokit::enterpriseadminclient::users#create_impersonation_token()","octokit::client::apps#create_installation_access_token()","octokit::client::apps#create_integration_installation_access_token()","octokit::client::issues#create_issue()","octokit::client::reactions#create_issue_comment_reaction()","octokit::client::reactions#create_issue_reaction()","octokit::client::milestones#create_milestone()","octokit::client::actionssecrets#create_or_update_secret()","octokit::client::hooks#create_org_hook()","octokit::client::projects#create_org_project()","octokit::enterpriseadminclient::orgs#create_organization()","octokit::client::projects#create_organization_project()","octokit::client::projects#create_project()","octokit::client::projects#create_project_card()","octokit::client::projects#create_project_column()","octokit::client::pullrequests#create_pull_comment()","octokit::client::pullrequests#create_pull_reply()","octokit::client::pullrequests#create_pull_request()","octokit::client::pullrequests#create_pull_request_comment()","octokit::client::pullrequests#create_pull_request_comment_reply()","octokit::client::pullrequests#create_pull_request_for_issue()","octokit::client::reviews#create_pull_request_review()","octokit::client::reactions#create_pull_request_review_comment_reaction()","octokit::client::refs#create_ref()","octokit::client::refs#create_reference()","octokit::client::releases#create_release()","octokit::client::repositories#create_repo()","octokit::client::repositories#create_repo_from_template()","octokit::client::repositories#create_repository()","octokit::client::repositories#create_repository_from_template()","octokit::client::pullrequests#create_review_reply()","octokit::client::statuses#create_status()","octokit::client::objects#create_tag()","octokit::client::organizations#create_team()","octokit::client::objects#create_tree()","octokit::enterpriseadminclient::users#create_user()","octokit::client::pullrequests#create_view_comment()","octokit::error#data()","octokit::client::repositoryinvitations#decline_invitation()","octokit::client::repositoryinvitations#decline_repository_invitation()","octokit::default::default_media_type()","octokit::connection#delete()","octokit::client::oauthapplications#delete_app_authorization()","octokit::client::oauthapplications#delete_app_token()","octokit::client::oauthapplications#delete_application_authorization()","octokit::client::authorizations#delete_authorization()","octokit::enterprisemanagementconsoleclient::managementconsole#delete_authorized_key()","octokit::client::refs#delete_branch()","octokit::client::issues#delete_comment()","octokit::client::commitcomments#delete_commit_comment()","octokit::client::contents#delete_content()","octokit::client::contents#delete_contents()","octokit::client::deployments#delete_deployment()","octokit::client::downloads#delete_download()","octokit::client::gists#delete_gist()","octokit::client::gists#delete_gist_comment()","octokit::enterpriseadminclient::users#delete_impersonation_token()","octokit::client::apps#delete_installation()","octokit::enterpriseadminclient::users#delete_key()","octokit::client::labels#delete_label!()","octokit::client::organizations#delete_migration_archive()","octokit::client::milestones#delete_milestone()","octokit::client::projects#delete_project()","octokit::client::projects#delete_project_card()","octokit::client::projects#delete_project_column()","octokit::client::pullrequests#delete_pull_comment()","octokit::client::pullrequests#delete_pull_request_comment()","octokit::client::reviews#delete_pull_request_review()","octokit::client::reviews#delete_pull_request_review_request()","octokit::client::reactions#delete_reaction()","octokit::client::refs#delete_ref()","octokit::client::refs#delete_reference()","octokit::client::releases#delete_release()","octokit::client::releases#delete_release_asset()","octokit::client::repositories#delete_repo()","octokit::client::repositoryinvitations#delete_repo_invitation()","octokit::client::repositories#delete_repository()","octokit::client::repositoryinvitations#delete_repository_invitation()","octokit::client::pullrequests#delete_review_comment()","octokit::client::actionssecrets#delete_secret()","octokit::client::repositories#delete_subscription()","octokit::client::organizations#delete_team()","octokit::client::notifications#delete_thread_subscription()","octokit::enterpriseadminclient::users#delete_user()","octokit::client::users#delete_user_migration_archive()","octokit::client::actionsworkflowruns#delete_workflow_run()","octokit::client::actionsworkflowruns#delete_workflow_run_logs()","octokit::onetimepasswordrequired#delivery_method_from_header()","octokit::enterpriseadminclient::users#demote()","octokit::client::repositories#deploy_key()","octokit::client::repositories#deploy_keys()","octokit::client::deployments#deployment()","octokit::client::deployments#deployment_statuses()","octokit::client::deployments#deployments()","octokit::client::repositories#disable_vulnerability_alerts()","octokit::client::reviews#dismiss_pull_request_review()","octokit::client::repositories#dispatch_event()","octokit::error#documentation_url()","octokit::client::downloads#download()","octokit::client::downloads#downloads()","octokit::client::repositories#edit()","octokit::client::repositories#edit_deploy_key()","octokit::client::gists#edit_gist()","octokit::client::hooks#edit_hook()","octokit::enterprisemanagementconsoleclient::managementconsole#edit_maintenance_status()","octokit::client::milestones#edit_milestone()","octokit::client::hooks#edit_org_hook()","octokit::client::releases#edit_release()","octokit::client::releases#edit_release_asset()","octokit::client::repositories#edit_repository()","octokit::enterprisemanagementconsoleclient::managementconsole#edit_settings()","octokit::client::users#emails()","octokit::client::emojis#emojis()","octokit::client::repositories#enable_vulnerability_alerts()","octokit::connection#endpoint()","octokit::enterprisemanagementconsoleclient#endpoint()","octokit::preview#ensure_api_media_type()","octokit::enterprise_admin_client()","octokit::enterprise_management_console_client()","octokit::error::error_for_401()","octokit::error::error_for_403()","octokit::error::error_for_404()","octokit::error::error_for_422()","octokit::error#errors()","octokit::client::users#exchange_code_for_token()","octokit::enterprisemanagementconsoleclient#faraday_configuration()","octokit::client::feeds#feed()","octokit::client::feeds#feeds()","octokit::configurable#fetch_client_id_and_secret()","octokit::client::apps#find_app_installations()","octokit::client::apps#find_installation_repositories_for_user()","octokit::client::apps#find_installations()","octokit::client::apps#find_integration_installations()","octokit::client::apps#find_organization_installation()","octokit::client::apps#find_repository_installation()","octokit::client::apps#find_user_installation()","octokit::client::apps#find_user_installations()","octokit::client::users#follow()","octokit::middleware::followredirects#follow_limit()","octokit::middleware::followredirects#follow_redirect?()","octokit::client::users#followers()","octokit::client::users#following()","octokit::client::users#follows?()","octokit::client::repositories#fork()","octokit::client::gists#fork_gist()","octokit::client::repositories#forks()","octokit::error::from_response()","octokit::ratelimit::from_response()","octokit::gist::from_url()","octokit::repository::from_url()","octokit::connection#get()","octokit::enterpriseadminclient::adminstats#get_admin_stats()","octokit::enterprisemanagementconsoleclient::managementconsole#get_authorized_keys()","octokit::client::repositories#get_branch()","octokit::enterprisemanagementconsoleclient::managementconsole#get_maintenance_status()","octokit::client::actionssecrets#get_public_key()","octokit::client::actionssecrets#get_secret()","octokit::enterprisemanagementconsoleclient::managementconsole#get_settings()","octokit::client::stats#get_stats()","octokit::client::gists#gist()","octokit::client::gists#gist_comment()","octokit::client::gists#gist_comments()","octokit::client::gists#gist_commits()","octokit::client::gists#gist_forks()","octokit::client::gists#gist_starred?()","octokit::client::gists#gists()","octokit::client::commits#git_commit()","octokit::client::meta#github_meta()","octokit::client::servicestatus#github_status()","octokit::client::servicestatus#github_status_last_message()","octokit::client::servicestatus#github_status_messages()","octokit::client::gitignore#gitignore_template()","octokit::client::gitignore#gitignore_templates()","octokit::connection#head()","octokit::client::hooks#hook()","octokit::client::hooks#hooks()","object#href()","octokit::repository#id_api_path()","octokit::enterpriseadminclient::searchindexing#index_organization()","octokit::enterpriseadminclient::searchindexing#index_organizations_repositories()","octokit::enterpriseadminclient::searchindexing#index_organizations_repositories_code()","octokit::enterpriseadminclient::searchindexing#index_organizations_repositories_issues()","octokit::enterpriseadminclient::searchindexing#index_repository()","octokit::enterpriseadminclient::searchindexing#index_repository_code()","octokit::enterpriseadminclient::searchindexing#index_repository_issues()","octokit::enterpriseadminclient::searchindexing#index_user()","octokit::enterpriseadminclient::searchindexing#index_users_repositories()","octokit::enterpriseadminclient::searchindexing#index_users_repositories_code()","octokit::enterpriseadminclient::searchindexing#index_users_repositories_issues()","octokit::client#inspect()","octokit::client::apps#installation()","octokit::client::repositoryinvitations#invite_user_to_repo()","octokit::client::repositoryinvitations#invite_user_to_repository()","octokit::client::commits#iso8601()","octokit::client::issues#issue()","octokit::client::issues#issue_comment()","octokit::client::reactions#issue_comment_reactions()","octokit::client::issues#issue_comments()","octokit::client::events#issue_event()","octokit::client::events#issue_events()","octokit::client::reactions#issue_reactions()","octokit::client::issues#issue_timeline()","octokit::client::issues#issues()","octokit::client::issues#issues_comments()","octokit::client::users#key()","octokit::client::users#keys()","octokit::configurable::keys()","octokit::client::labels#label()","octokit::client::labels#labels()","octokit::client::labels#labels_for_issue()","octokit::client::labels#labels_for_milestone()","octokit::client::repositories#languages()","octokit::connection#last_response()","octokit::client::pages#latest_pages_build()","octokit::client::releases#latest_release()","octokit::client::legacysearch#legacy_search_issues()","octokit::client::legacysearch#legacy_search_repositories()","octokit::client::legacysearch#legacy_search_users()","octokit::client::licenses#license()","octokit::enterpriseadminclient::license#license_info()","octokit::client::licenses#licenses()","octokit::client::marketplace#list_accounts_for_plan()","octokit::enterpriseadminclient::users#list_all_keys()","octokit::client::apps#list_app_installation_repositories()","octokit::client::issues#list_assignees()","octokit::client::checks#list_check_runs_for_check_suite()","octokit::client::checks#list_check_runs_for_ref()","octokit::client::checks#list_check_suites_for_ref()","octokit::client::commitcomments#list_commit_comments()","octokit::client::commits#list_commits()","octokit::client::repositories#list_deploy_keys()","octokit::client::deployments#list_deployment_statuses()","octokit::client::deployments#list_deployments()","octokit::client::downloads#list_downloads()","octokit::client::gists#list_gists()","octokit::client::apps#list_installation_repos()","octokit::client::apps#list_integration_installation_repositories()","octokit::client::issues#list_issues()","octokit::client::milestones#list_milestones()","octokit::client::hooks#list_org_hooks()","octokit::client::organizations#list_organizations()","octokit::client::organizations#list_orgs()","octokit::client::pages#list_pages_builds()","octokit::client::marketplace#list_plans()","octokit::client::refs#list_references()","octokit::client::refs#list_refs()","octokit::client::releases#list_releases()","octokit::client::repositories#list_repos()","octokit::client::repositories#list_repositories()","octokit::client::actionsworkflowruns#list_repository_workflow_runs()","octokit::client::actionssecrets#list_secrets()","octokit::client::statuses#list_statuses()","octokit::client::actionsworkflowruns#list_workflow_runs()","octokit::client::actionsworkflows#list_workflows()","octokit::client::issues#lock_issue()","octokit::configurable#login()","octokit::default::login()","octokit::client#login=()","octokit::authentication#login_from_netrc()","octokit::enterprisemanagementconsoleclient::managementconsole#maintenance_status()","octokit::configurable#management_console_endpoint()","octokit::default::management_console_endpoint()","octokit::enterprisemanagementconsoleclient#management_console_endpoint=()","octokit::default::management_console_password()","octokit::enterprisemanagementconsoleclient#management_console_password=()","octokit::client::sourceimport#map_source_import_commit_author()","octokit::client::notifications#mark_notifications_as_read()","octokit::client::notifications#mark_repo_notifications_as_read()","octokit::client::notifications#mark_repository_notifications_as_read()","octokit::client::notifications#mark_thread_as_read()","octokit::client::markdown#markdown()","octokit::client::marketplace#marketplace_purchases()","octokit::client::refs#matching_refs()","octokit::client::commits#merge()","octokit::client::pullrequests#merge_pull_request()","octokit::client::meta#meta()","octokit::method_missing()","octokit::default::middleware()","octokit::client::organizations#migration_archive_url()","octokit::client::organizations#migration_status()","octokit::client::organizations#migrations()","octokit::client::milestones#milestone()","octokit::client::milestones#milestones()","octokit::client::projects#move_project_card()","octokit::client::projects#move_project_column()","octokit::repository#named_api_path()","octokit::default::netrc()","octokit::configurable#netrc?()","octokit::default::netrc_file()","octokit::client::repositories#network()","octokit::arguments::new()","octokit::client::new()","octokit::enterpriseadminclient::new()","octokit::enterprisemanagementconsoleclient::new()","octokit::error::new()","octokit::gist::new()","octokit::middleware::followredirects::new()","octokit::middleware::redirectlimitreached::new()","octokit::repoarguments::new()","octokit::repository::new()","octokit::client::notifications#notifications()","octokit::client::say#octocat()","octokit::warnable#octokit_warn()","octokit::response::feedparser#on_complete()","octokit::response::raiseerror#on_complete()","octokit::client::issues#open_issue()","octokit::configurable#options()","octokit::default::options()","octokit::client::organizations#org()","octokit::client::hooks#org_hook()","octokit::client::hooks#org_hooks()","octokit::client::organizations#org_invitations()","octokit::client::issues#org_issues()","octokit::client::organizations#org_member?()","octokit::client::organizations#org_members()","octokit::client::organizations#org_membership()","octokit::client::organizations#org_memberships()","octokit::client::projects#org_projects()","octokit::client::organizations#org_public_member?()","octokit::client::organizations#org_public_members()","octokit::client::organizations#org_repos()","octokit::client::organizations#org_repositories()","octokit::client::organizations#org_teams()","octokit::client::organizations#organization()","octokit::client::events#organization_events()","octokit::client::organizations#organization_invitations()","octokit::client::organizations#organization_member?()","octokit::client::organizations#organization_members()","octokit::client::organizations#organization_membership()","octokit::client::organizations#organization_memberships()","octokit::client::projects#organization_projects()","octokit::client::events#organization_public_events()","octokit::client::organizations#organization_public_member?()","octokit::client::organizations#organization_public_members()","octokit::client::organizations#organization_repositories()","octokit::client::organizations#organization_teams()","octokit::client::organizations#organizations()","octokit::client::organizations#orgs()","octokit::client::organizations#outside_collaborators()","octokit::client::pages#pages()","octokit::client::pages#pages_build()","octokit::client::pages#pages_builds()","octokit::connection#paginate()","octokit::client::commits#parse_date()","octokit::client::hooks#parse_payload()","octokit::connection#parse_query_and_convenience_headers()","octokit::client::stats#participation_stats()","octokit::default::password()","octokit::client#password=()","octokit::onetimepasswordrequired#password_delivery()","octokit::enterprisemanagementconsoleclient#password_hash()","octokit::connection#patch()","octokit::organization::path()","octokit::repository#path()","octokit::repository::path()","octokit::user::path()","octokit::default::per_page()","octokit::middleware::followredirects#perform_with_redirection()","octokit::client::repositories#permission_level()","octokit::client::hooks#ping_hook()","octokit::client::hooks#ping_org_hook()","octokit::client::marketplace#plan_for_account()","octokit::connection#post()","octokit::client::projects#project()","octokit::client::projects#project_card()","octokit::client::projects#project_column()","octokit::client::projects#project_columns()","octokit::client::projects#projects()","octokit::enterpriseadminclient::users#promote()","octokit::client::repositories#protect_branch()","octokit::default::proxy()","octokit::client::pubsubhubbub#pub_sub_hubbub_request()","octokit::client::events#public_events()","octokit::client::gists#public_gists()","octokit::client::organizations#publicize_membership()","octokit::client::pullrequests#pull()","octokit::client::pullrequests#pull_comment()","octokit::client::pullrequests#pull_comments()","octokit::client::pullrequests#pull_commits()","octokit::client::pullrequests#pull_files()","octokit::client::pullrequests#pull_merged?()","octokit::client::pullrequests#pull_request()","octokit::client::pullrequests#pull_request_comment()","octokit::client::pullrequests#pull_request_comments()","octokit::client::pullrequests#pull_request_commits()","octokit::client::pullrequests#pull_request_files()","octokit::client::pullrequests#pull_request_merged?()","octokit::client::reviews#pull_request_review()","octokit::client::reactions#pull_request_review_comment_reactions()","octokit::client::reviews#pull_request_review_comments()","octokit::client::reviews#pull_request_review_requests()","octokit::client::reviews#pull_request_reviews()","octokit::client::pullrequests#pull_requests()","octokit::client::pullrequests#pull_requests_comments()","octokit::client::pullrequests#pulls()","octokit::client::pullrequests#pulls_comments()","octokit::client::stats#punch_card()","octokit::client::stats#punch_card_stats()","octokit::connection#put()","octokit::enterpriseadminclient::searchindexing#queue_index()","octokit::repository#raise_invalid_repository!()","octokit::client::ratelimit#rate_limit()","octokit::client::ratelimit#rate_limit!()","octokit::client::ratelimit#rate_limit_remaining()","octokit::client::ratelimit#rate_limit_remaining!()","octokit::client::ratelimit#ratelimit()","octokit::client::ratelimit#ratelimit!()","octokit::client::ratelimit#ratelimit_remaining()","octokit::client::ratelimit#ratelimit_remaining!()","octokit::client::contents#readme()","octokit::client::events#received_events()","octokit::client::events#received_public_events()","octokit::error#redact_url()","octokit::client::refs#ref()","octokit::client::refs#reference()","octokit::client::refs#references()","octokit::client::refs#refs()","octokit::client::releases#release()","octokit::client::releases#release_asset()","octokit::client::releases#release_assets()","octokit::client::releases#release_for_tag()","octokit::client::releases#releases()","octokit::client::labels#remove_all_labels()","octokit::client::issues#remove_assignees()","octokit::enterprisemanagementconsoleclient::managementconsole#remove_authorized_key()","octokit::client::repositories#remove_collab()","octokit::client::repositories#remove_collaborator()","octokit::client::contents#remove_content()","octokit::client::contents#remove_contents()","octokit::client::repositories#remove_deploy_key()","octokit::client::users#remove_email()","octokit::client::hooks#remove_hook()","octokit::client::users#remove_key()","octokit::client::labels#remove_label()","octokit::client::hooks#remove_org_hook()","octokit::client::organizations#remove_org_member()","octokit::client::organizations#remove_org_membership()","octokit::client::organizations#remove_organization_member()","octokit::client::organizations#remove_organization_membership()","octokit::client::organizations#remove_outside_collaborator()","octokit::client::apps#remove_repo_from_installation()","octokit::client::apps#remove_repository_from_app_installation()","octokit::client::apps#remove_repository_from_integration_installation()","octokit::client::organizations#remove_team_member()","octokit::client::organizations#remove_team_membership()","octokit::client::organizations#remove_team_repo()","octokit::client::organizations#remove_team_repository()","octokit::client::repositories#rename_branch()","octokit::enterpriseadminclient::users#rename_user()","octokit::client::issues#reopen_issue()","octokit::client::labels#replace_all_labels()","octokit::client::repositories#replace_all_topics()","octokit::client::repositories#repo()","octokit::client::repositories#repo_assignees()","octokit::client::repositoryinvitations#repo_invitations()","octokit::client::events#repo_issue_events()","octokit::client::notifications#repo_notifications()","octokit::client::repositories#repo_teams()","octokit::client::repositories#repos()","octokit::client::repositories#repositories()","octokit::client::repositories#repository()","octokit::client::repositories#repository?()","octokit::client::repositories#repository_assignees()","octokit::client::events#repository_events()","octokit::client::repositoryinvitations#repository_invitations()","octokit::client::events#repository_issue_events()","octokit::client::licenses#repository_license_contents()","octokit::client::events#repository_network_events()","octokit::client::notifications#repository_notifications()","octokit::client::repositories#repository_teams()","octokit::client::actionsworkflowruns#repository_workflow_runs()","octokit::connection#request()","octokit::client::pages#request_page_build()","octokit::client::reviews#request_pull_request_review()","octokit::onetimepasswordrequired::required_header()","octokit::client::checks#rerequest_check_suite()","octokit::client::actionsworkflowruns#rerun_workflow_run()","octokit::configurable#reset!()","octokit::connection#reset_agent()","octokit::client::oauthapplications#reset_application_authorization()","octokit::client::oauthapplications#reset_token()","octokit::respond_to_missing?()","octokit::error#response_body()","octokit::error#response_error()","octokit::error#response_error_summary()","octokit::error#response_headers()","octokit::error#response_message()","octokit::error#response_status()","octokit::client::pullrequests#review_comment()","octokit::client::pullrequests#review_comments()","octokit::client::pullrequests#reviews_comments()","octokit::client::authorizations#revoke_all_application_authorizations()","octokit::client::oauthapplications#revoke_application_authorization()","octokit::connection#root()","octokit::middleware::followredirects#safe_escape()","octokit::middleware::followredirects#same_host?()","octokit::configurable#same_options?()","octokit::connection#sawyer_options()","octokit::client::say#say()","octokit::client::authorizations#scopes()","octokit::client::search#search()","octokit::client::search#search_code()","octokit::client::search#search_commits()","octokit::client::search#search_issues()","octokit::client::search#search_repos()","octokit::client::search#search_repositories()","octokit::client::search#search_users()","octokit::client::checks#set_check_suite_preferences()","octokit::enterprisemanagementconsoleclient::managementconsole#set_maintenance_status()","octokit::client::repositories#set_private()","octokit::client::repositories#set_public()","octokit::client::sourceimport#set_source_import_lfs_preference()","octokit::enterprisemanagementconsoleclient::managementconsole#settings()","octokit::configurable#setup()","octokit::repository#slug()","octokit::client::sourceimport#source_import_commit_authors()","octokit::client::sourceimport#source_import_large_files()","octokit::client::sourceimport#source_import_progress()","octokit::default::ssl_verify_mode()","octokit::client::repositories#star()","octokit::client::gists#star_gist()","octokit::client::repositories#stargazers()","octokit::client::users#starred()","octokit::client::users#starred?()","octokit::client::gists#starred_gists()","octokit::enterprisemanagementconsoleclient::managementconsole#start_configuration()","octokit::client::organizations#start_migration()","octokit::client::sourceimport#start_source_import()","octokit::client::users#start_user_migration()","octokit::client::statuses#status()","octokit::client::statuses#statuses()","octokit::client::reviews#submit_pull_request_review()","octokit::client::pubsubhubbub#subscribe()","octokit::client::pubsubhubbub#subscribe_service_hook()","octokit::client::repositories#subscribers()","octokit::client::repositories#subscription()","octokit::client::users#subscriptions()","octokit::enterpriseadminclient::users#suspend()","octokit::client::objects#tag()","octokit::client::repositories#tags()","octokit::client::organizations#team()","octokit::client::organizations#team_by_name()","octokit::client::organizations#team_invitations()","octokit::client::organizations#team_member?()","octokit::client::organizations#team_members()","octokit::client::organizations#team_membership()","octokit::client::organizations#team_repo?()","octokit::client::organizations#team_repos()","octokit::client::organizations#team_repositories()","octokit::client::organizations#team_repository?()","octokit::client::repositories#teams()","octokit::client::hooks#test_hook()","octokit::client::notifications#thread_notifications()","octokit::client::notifications#thread_subscription()","octokit::gist#to_s()","octokit::repository#to_s()","octokit::authentication#token_authenticated?()","octokit::client::traffic#top_paths()","octokit::client::traffic#top_referrers()","octokit::client::repositories#topics()","octokit::client::repositories#transfer_repo()","octokit::client::repositories#transfer_repository()","octokit::client::objects#tree()","octokit::client::users#unfollow()","octokit::client::issues#unlock_issue()","octokit::client::organizations#unlock_repository()","octokit::client::users#unlock_user_repository()","octokit::client::repositories#unprotect_branch()","octokit::client::organizations#unpublicize_membership()","octokit::client::repositories#unstar()","octokit::client::gists#unstar_gist()","octokit::client::pubsubhubbub#unsubscribe()","octokit::client::pubsubhubbub#unsubscribe_service_hook()","octokit::enterpriseadminclient::users#unsuspend()","octokit::client::repositories#unwatch()","octokit::client::repositories#update()","octokit::client::authorizations#update_authorization()","octokit::client::refs#update_branch()","octokit::client::checks#update_check_run()","octokit::client::issues#update_comment()","octokit::client::commitcomments#update_commit_comment()","octokit::client::contents#update_content()","octokit::client::contents#update_contents()","octokit::client::repositories#update_deploy_key()","octokit::middleware::followredirects#update_env()","octokit::client::gists#update_gist_comment()","octokit::client::issues#update_issue()","octokit::client::users#update_key()","octokit::client::labels#update_label()","octokit::client::milestones#update_milestone()","octokit::client::organizations#update_org()","octokit::client::hooks#update_org_hook()","octokit::client::organizations#update_org_membership()","octokit::client::organizations#update_organization()","octokit::client::organizations#update_organization_membership()","octokit::client::projects#update_project()","octokit::client::projects#update_project_card()","octokit::client::projects#update_project_column()","octokit::client::pullrequests#update_pull_comment()","octokit::client::pullrequests#update_pull_request()","octokit::client::pullrequests#update_pull_request_comment()","octokit::client::reviews#update_pull_request_review()","octokit::client::refs#update_ref()","octokit::client::refs#update_reference()","octokit::client::releases#update_release()","octokit::client::releases#update_release_asset()","octokit::client::repositoryinvitations#update_repo_invitation()","octokit::client::repositories#update_repository()","octokit::client::repositoryinvitations#update_repository_invitation()","octokit::client::pullrequests#update_review_comment()","octokit::client::sourceimport#update_source_import()","octokit::client::repositories#update_subscription()","octokit::client::organizations#update_team()","octokit::client::notifications#update_thread_subscription()","octokit::client::users#update_user()","octokit::enterprisemanagementconsoleclient::managementconsole#upgrade()","octokit::client::releases#upload_asset()","octokit::enterprisemanagementconsoleclient::managementconsole#upload_license()","octokit::gist#url()","octokit::repository#url()","octokit::client::users#user()","octokit::default::user_agent()","octokit::authentication#user_authenticated?()","octokit::client::events#user_events()","octokit::client::issues#user_issues()","octokit::client::users#user_keys()","octokit::client::users#user_migration_archive_url()","octokit::client::users#user_migration_repositories()","octokit::client::users#user_migration_status()","octokit::client::users#user_migrations()","octokit::client#user_path()","octokit::client::events#user_public_events()","octokit::client::repositoryinvitations#user_repo_invitations()","octokit::client::repositoryinvitations#user_repository_invitations()","octokit::client::organizations#user_teams()","octokit::client::users#validate_credentials()","octokit::repository#validate_owner_and_name!()","octokit::client::traffic#views()","octokit::client::repositories#vulnerability_alerts_enabled?()","octokit::preview#warn_preview()","octokit::client::repositories#watch()","octokit::client::users#watched()","octokit::client::repositories#watchers()","octokit::configurable#web_endpoint()","octokit::default::web_endpoint()","octokit::client::actionsworkflows#workflow()","octokit::client::actionsworkflows#workflow_dispatch()","octokit::client::actionsworkflowruns#workflow_run()","octokit::client::actionsworkflowruns#workflow_run_logs()","octokit::client::actionsworkflowruns#workflow_runs()","octokit::client::actionsworkflows#workflows()"],"info":[["Object","","Object.html","",""],["Octokit","","Octokit.html","","<p>Ruby toolkit for the GitHub API\n<p>Adapted from lostisland/faraday_middleware. Trimmed down to just the logic …\n"],["Octokit::AbuseDetected","","Octokit/AbuseDetected.html","","<p>Raised when GitHub returns a 403 HTTP status code and body matches &#39;abuse&#39;\n"],["Octokit::AccountSuspended","","Octokit/AccountSuspended.html","","<p>Raised when GitHub returns a 403 HTTP status code and body matches &#39;account was suspended&#39;\n"],["Octokit::ApplicationCredentialsRequired","","Octokit/ApplicationCredentialsRequired.html","","<p>Raised when a method requires an application client_id and secret but none is provided\n"],["Octokit::Arguments","","Octokit/Arguments.html","","<p>Extracts options from method arguments @private\n"],["Octokit::Authentication","","Octokit/Authentication.html","","<p>Authentication methods for {Octokit::Client}\n"],["Octokit::BadGateway","","Octokit/BadGateway.html","","<p>Raised when GitHub returns a 502 HTTP status code\n"],["Octokit::BadRequest","","Octokit/BadRequest.html","","<p>Raised when GitHub returns a 400 HTTP status code\n"],["Octokit::BillingIssue","","Octokit/BillingIssue.html","","<p>Raised when GitHub returns a 403 HTTP status code and body matches &#39;billing issue&#39;\n"],["Octokit::BranchNotProtected","","Octokit/BranchNotProtected.html","","<p>Raised when GitHub returns a 404 HTTP status code and body matches &#39;Branch not protected&#39;\n"],["Octokit::Client","","Octokit/Client.html","","<p>Client for the GitHub API\n<p>@see developer.github.com\n"],["Octokit::Client::ActionsSecrets","","Octokit/Client/ActionsSecrets.html","","<p>Methods for the Actions Secrets API\n<p>@see developer.github.com/v3/actions/secrets/\n"],["Octokit::Client::ActionsWorkflowRuns","","Octokit/Client/ActionsWorkflowRuns.html","",""],["Octokit::Client::ActionsWorkflows","","Octokit/Client/ActionsWorkflows.html","","<p>Methods for the Actions Workflows API\n<p>@see developer.github.com/v3/actions/workflows\n"],["Octokit::Client::Apps","","Octokit/Client/Apps.html","","<p>Methods for the Apps API\n"],["Octokit::Client::Authorizations","","Octokit/Client/Authorizations.html","","<p>Methods for the Authorizations API\n<p>@see developer.github.com/v3/oauth_authorizations/#oauth-authorizations-api …\n"],["Octokit::Client::Checks","","Octokit/Client/Checks.html","","<p>Methods for the Checks API\n<p>@see developer.github.com/v3/checks/\n"],["Octokit::Client::CommitBranches","","Octokit/Client/CommitBranches.html","","<p>Methods for the Branches for HEAD API\n<p>@see developer.github.com/v3/repos/commits/\n"],["Octokit::Client::CommitComments","","Octokit/Client/CommitComments.html","","<p>Methods for the Commit Comments API\n<p>@see developer.github.com/v3/repos/comments/\n"],["Octokit::Client::CommitPulls","","Octokit/Client/CommitPulls.html","","<p>Methods for the Commit Pulls API\n<p>@see developer.github.com/v3/repos/comments/\n"],["Octokit::Client::Commits","","Octokit/Client/Commits.html","","<p>Methods for the Commits API\n<p>@see developer.github.com/v3/repos/commits/\n"],["Octokit::Client::CommunityProfile","","Octokit/Client/CommunityProfile.html","","<p>Methods for the Community Profile API\n<p>@see developer.github.com/v3/repos/community/\n"],["Octokit::Client::Contents","","Octokit/Client/Contents.html","","<p>Methods for the Repo Contents API\n<p>@see developer.github.com/v3/repos/contents/\n"],["Octokit::Client::Deployments","","Octokit/Client/Deployments.html","","<p>Methods for the Deployments API\n<p>@see developer.github.com/v3/repos/commits/deployments/\n"],["Octokit::Client::Downloads","","Octokit/Client/Downloads.html","","<p>Methods for the Repo Downloads API\n<p>@see developer.github.com/v3/repos/downloads/\n"],["Octokit::Client::Emojis","","Octokit/Client/Emojis.html","","<p>Methods for the Emojis API\n"],["Octokit::Client::Events","","Octokit/Client/Events.html","","<p>Method for the Events API\n<p>@see developer.github.com/v3/activity/events/ @see developer.github.com/v3/issues/events …\n"],["Octokit::Client::Feeds","","Octokit/Client/Feeds.html","","<p>Methods for the Feeds API\n<p>@see developer.github.com/v3/activity/feeds/\n"],["Octokit::Client::Gists","","Octokit/Client/Gists.html","","<p>Methods for the Gists API\n<p>@see developer.github.com/v3/gists/\n"],["Octokit::Client::Gitignore","","Octokit/Client/Gitignore.html","","<p>Methods for the Gitignore API\n<p>@see developer.github.com/v3/gitignore/\n"],["Octokit::Client::Hooks","","Octokit/Client/Hooks.html","","<p>Methods for the Hooks API\n"],["Octokit::Client::Issues","","Octokit/Client/Issues.html","","<p>Methods for the Issues API\n<p>@see developer.github.com/v3/issues/\n"],["Octokit::Client::Labels","","Octokit/Client/Labels.html","","<p>Methods for the Issue Labels API\n<p>@see developer.github.com/v3/issues/labels/\n"],["Octokit::Client::LegacySearch","","Octokit/Client/LegacySearch.html","","<p>Methods for the Legacy Search API\n<p>@see developer.github.com/v3/search/\n"],["Octokit::Client::Licenses","","Octokit/Client/Licenses.html","","<p>Methods for licenses API\n"],["Octokit::Client::Markdown","","Octokit/Client/Markdown.html","","<p>Methods for the Markdown API\n<p>@see developer.github.com/v3/markdown/\n"],["Octokit::Client::Marketplace","","Octokit/Client/Marketplace.html","","<p>Methods for the Marketplace Listing API\n<p>@see developer.github.com/v3/apps/marketplace/\n"],["Octokit::Client::Meta","","Octokit/Client/Meta.html","","<p>Methods for the Meta API\n<p>@see developer.github.com/v3/meta/\n"],["Octokit::Client::Milestones","","Octokit/Client/Milestones.html","","<p>Methods for the Issues Milestones API\n<p>@see developer.github.com/v3/issues/milestones/\n"],["Octokit::Client::Notifications","","Octokit/Client/Notifications.html","","<p>Methods for the Notifications API\n<p>@see developer.github.com/v3/activity/notifications/\n"],["Octokit::Client::OauthApplications","","Octokit/Client/OauthApplications.html","","<p>Methods for the OauthApplications API\n<p>@see developer.github.com/v3/apps/oauth_applications\n"],["Octokit::Client::Objects","","Octokit/Client/Objects.html","","<p>Methods for the Git Data API\n<p>@see developer.github.com/v3/git/\n"],["Octokit::Client::Organizations","","Octokit/Client/Organizations.html","","<p>Methods for the Organizations API\n<p>@see developer.github.com/v3/orgs/\n"],["Octokit::Client::Pages","","Octokit/Client/Pages.html","","<p>Methods for the Pages API\n<p>@see developer.github.com/v3/repos/pages/\n"],["Octokit::Client::Projects","","Octokit/Client/Projects.html","","<p>Methods for Projects API\n<p>@see developer.github.com/v3/repos/projects\n"],["Octokit::Client::PubSubHubbub","","Octokit/Client/PubSubHubbub.html","","<p>Methods for the PubSubHubbub API\n<p>@see developer.github.com/v3/repos/hooks/#pubsubhubbub\n"],["Octokit::Client::PullRequests","","Octokit/Client/PullRequests.html","","<p>Methods for the Pull Requests API\n<p>@see developer.github.com/v3/pulls/\n"],["Octokit::Client::RateLimit","","Octokit/Client/RateLimit.html","","<p>Methods for API rate limiting info\n<p>@see developer.github.com/v3/#rate-limiting\n"],["Octokit::Client::Reactions","","Octokit/Client/Reactions.html","","<p>Methods for the Reacions API\n<p>@see developer.github.com/v3/reactions/\n"],["Octokit::Client::Refs","","Octokit/Client/Refs.html","","<p>Methods for References for Git Data API\n<p>@see developer.github.com/v3/git/refs/\n"],["Octokit::Client::Releases","","Octokit/Client/Releases.html","","<p>Methods for the Releases API\n<p>@see developer.github.com/v3/repos/releases/\n"],["Octokit::Client::Repositories","","Octokit/Client/Repositories.html","","<p>Methods for the Repositories API\n<p>@see developer.github.com/v3/repos/\n"],["Octokit::Client::RepositoryInvitations","","Octokit/Client/RepositoryInvitations.html","","<p>Methods for the Repository Invitations API\n<p>@see developer.github.com/v3/repos/invitations/\n"],["Octokit::Client::Reviews","","Octokit/Client/Reviews.html","","<p>Methods for the Reviews API\n<p>@see developer.github.com/v3/pulls/reviews/\n"],["Octokit::Client::Say","","Octokit/Client/Say.html","","<p>Methods for the unpublished Octocat API\n"],["Octokit::Client::Search","","Octokit/Client/Search.html","","<p>Methods for the Search API\n<p>@see developer.github.com/v3/search/\n"],["Octokit::Client::ServiceStatus","","Octokit/Client/ServiceStatus.html","","<p>Methods for the GitHub Status API\n<p>@see status.github.com/api\n"],["Octokit::Client::SourceImport","","Octokit/Client/SourceImport.html","","<p>Methods for the Source Import API\n<p>@see developer.github.com/v3/migration/source_imports\n"],["Octokit::Client::Stats","","Octokit/Client/Stats.html","","<p>Methods for the Repository Statistics API\n<p>@see developer.github.com/v3/repos/statistics/\n"],["Octokit::Client::Statuses","","Octokit/Client/Statuses.html","","<p>Methods for the Commit Statuses API\n<p>@see developer.github.com/v3/repos/statuses/\n"],["Octokit::Client::Traffic","","Octokit/Client/Traffic.html","","<p>Methods for the Traffic API\n<p>@see developer.github.com/v3/repos/traffic/\n"],["Octokit::Client::Users","","Octokit/Client/Users.html","","<p>Methods for the Users API\n<p>@see developer.github.com/v3/users/\n"],["Octokit::ClientError","","Octokit/ClientError.html","","<p>Raised on errors in the 400-499 range\n"],["Octokit::CommitIsNotPartOfPullRequest","","Octokit/CommitIsNotPartOfPullRequest.html","","<p>Raised when GitHub returns a 422 HTTP status code and body matches &#39;PullRequestReviewComment&#39; …\n"],["Octokit::Configurable","","Octokit/Configurable.html","","<p>Configuration options for {Client}, defaulting to values in {Default}\n"],["Octokit::Conflict","","Octokit/Conflict.html","","<p>Raised when GitHub returns a 409 HTTP status code\n"],["Octokit::Connection","","Octokit/Connection.html","","<p>Network layer for API clients.\n"],["Octokit::Default","","Octokit/Default.html","","<p>Default configuration options for {Client}\n"],["Octokit::EnterpriseAdminClient","","Octokit/EnterpriseAdminClient.html","","<p>EnterpriseAdminClient is only meant to be used by GitHub Enterprise Admins and provides access the Admin …\n"],["Octokit::EnterpriseAdminClient::AdminStats","","Octokit/EnterpriseAdminClient/AdminStats.html","","<p>Methods for the Enterprise Admin Stats API\n<p>@see developer.github.com/v3/enterprise-admin/admin_stats/ …\n"],["Octokit::EnterpriseAdminClient::License","","Octokit/EnterpriseAdminClient/License.html","","<p>Methods for the Enterprise License API\n<p>@see developer.github.com/v3/enterprise-admin/license/\n"],["Octokit::EnterpriseAdminClient::Orgs","","Octokit/EnterpriseAdminClient/Orgs.html","","<p>Methods for the Enterprise Orgs API\n<p>@see developer.github.com/v3/enterprise-admin/orgs/\n"],["Octokit::EnterpriseAdminClient::SearchIndexing","","Octokit/EnterpriseAdminClient/SearchIndexing.html","","<p>Methods for the Enterprise Search Indexing API\n<p>@see developer.github.com/v3/enterprise-admin/search_indexing …\n"],["Octokit::EnterpriseAdminClient::Users","","Octokit/EnterpriseAdminClient/Users.html","","<p>Methods for the Enterprise User Administration API\n<p>@see developer.github.com/enterprise/v3/enterprise-admin/users …\n"],["Octokit::EnterpriseManagementConsoleClient","","Octokit/EnterpriseManagementConsoleClient.html","","<p>EnterpriseManagementConsoleClient is only meant to be used by GitHub Enterprise Admins and provides access …\n"],["Octokit::EnterpriseManagementConsoleClient::ManagementConsole","","Octokit/EnterpriseManagementConsoleClient/ManagementConsole.html","","<p>Methods for the Enterprise Management Console API\n<p>@see developer.github.com/v3/enterprise-admin/management_console …\n"],["Octokit::Error","","Octokit/Error.html","","<p>Custom error class for rescuing from all GitHub errors\n"],["Octokit::Forbidden","","Octokit/Forbidden.html","","<p>Raised when GitHub returns a 403 HTTP status code\n"],["Octokit::Gist","","Octokit/Gist.html","","<p>Class to parse and create Gist URLs\n"],["Octokit::InstallationSuspended","","Octokit/InstallationSuspended.html","","<p>Raised when GitHub returns a 403 HTTP status code and body matches &#39;suspended your access&#39;\n"],["Octokit::InternalServerError","","Octokit/InternalServerError.html","","<p>Raised when GitHub returns a 500 HTTP status code\n"],["Octokit::InvalidRepository","","Octokit/InvalidRepository.html","","<p>Raised when a repository is created with an invalid format\n"],["Octokit::MethodNotAllowed","","Octokit/MethodNotAllowed.html","","<p>Raised when GitHub returns a 405 HTTP status code\n"],["Octokit::Middleware","","Octokit/Middleware.html","",""],["Octokit::Middleware::FollowRedirects","","Octokit/Middleware/FollowRedirects.html","","<p>Public: Follow HTTP 301, 302, 303, and 307 redirects.\n<p>For HTTP 303, the original GET, POST, PUT, DELETE …\n"],["Octokit::Middleware::RedirectLimitReached","","Octokit/Middleware/RedirectLimitReached.html","","<p>Public: Exception thrown when the maximum amount of requests is exceeded.\n"],["Octokit::MissingContentType","","Octokit/MissingContentType.html","","<p>Raised when client fails to provide valid Content-Type\n"],["Octokit::NotAcceptable","","Octokit/NotAcceptable.html","","<p>Raised when GitHub returns a 406 HTTP status code\n"],["Octokit::NotFound","","Octokit/NotFound.html","","<p>Raised when GitHub returns a 404 HTTP status code\n"],["Octokit::NotImplemented","","Octokit/NotImplemented.html","","<p>Raised when GitHub returns a 501 HTTP status code\n"],["Octokit::OneTimePasswordRequired","","Octokit/OneTimePasswordRequired.html","","<p>Raised when GitHub returns a 401 HTTP status code and headers include “X-GitHub-OTP”\n"],["Octokit::Organization","","Octokit/Organization.html","","<p>GitHub organization class to generate API path urls\n"],["Octokit::PathDiffTooLarge","","Octokit/PathDiffTooLarge.html","","<p>Raised when GitHub returns a 422 HTTP status code and body matches &#39;Path diff too large&#39;. It …\n"],["Octokit::Preview","","Octokit/Preview.html","","<p>Default setup options for preview features\n"],["Octokit::RateLimit","","Octokit/RateLimit.html","","<p>Class for API Rate Limit info\n<p>@!attribute [w] limit\n\n<pre>@return [Integer] Max tries per rate limit period</pre>\n"],["Octokit::RepoArguments","","Octokit/RepoArguments.html","","<p>Class to extract options from Ruby arguments for Repository-related methods\n"],["Octokit::Repository","","Octokit/Repository.html","","<p>Class to parse GitHub repository owner and name from URLs and to generate URLs\n"],["Octokit::RepositoryUnavailable","","Octokit/RepositoryUnavailable.html","","<p>Raised when GitHub returns a 403 HTTP status code and body matches &#39;repository access blocked&#39; …\n"],["Octokit::Response","","Octokit/Response.html","","<p>Faraday response middleware\n"],["Octokit::Response::FeedParser","","Octokit/Response/FeedParser.html","","<p>Parses RSS and Atom feed responses.\n"],["Octokit::Response::RaiseError","","Octokit/Response/RaiseError.html","","<p>This class raises an Octokit-flavored exception based HTTP status codes returned by the API\n"],["Octokit::SAMLProtected","","Octokit/SAMLProtected.html","","<p>Raised when GitHub returns a 403 HTTP status code and body matches &#39;Resource protected by organization …\n"],["Octokit::ServerError","","Octokit/ServerError.html","","<p>Raised on errors in the 500-599 range\n"],["Octokit::ServiceUnavailable","","Octokit/ServiceUnavailable.html","","<p>Raised when GitHub returns a 503 HTTP status code\n"],["Octokit::TooLargeContent","","Octokit/TooLargeContent.html","","<p>Raised when GitHub returns a 403 HTTP status code and body matches &#39;returns blobs up to [0-9]+ MB&#39; …\n"],["Octokit::TooManyLoginAttempts","","Octokit/TooManyLoginAttempts.html","","<p>Raised when GitHub returns a 403 HTTP status code and body matches &#39;login attempts exceeded&#39; …\n"],["Octokit::TooManyRequests","","Octokit/TooManyRequests.html","","<p>Raised when GitHub returns a 403 HTTP status code and body matches &#39;rate limit exceeded&#39;\n"],["Octokit::Unauthorized","","Octokit/Unauthorized.html","","<p>Raised when GitHub returns a 401 HTTP status code\n"],["Octokit::UnavailableForLegalReasons","","Octokit/UnavailableForLegalReasons.html","","<p>Raised when GitHub returns a 451 HTTP status code\n"],["Octokit::UnprocessableEntity","","Octokit/UnprocessableEntity.html","","<p>Raised when GitHub returns a 422 HTTP status code\n"],["Octokit::UnsupportedMediaType","","Octokit/UnsupportedMediaType.html","","<p>Raised when GitHub returns a 414 HTTP status code\n"],["Octokit::UnverifiedEmail","","Octokit/UnverifiedEmail.html","","<p>Raised when GitHub returns a 403 HTTP status code and body matches &#39;email address must be verified&#39; …\n"],["Octokit::User","","Octokit/User.html","","<p>GitHub user class to generate API path urls\n"],["Octokit::Warnable","","Octokit/Warnable.html","","<p>Allows warnings to be suppressed via environment variable.\n"],["accept_repo_invitation","Octokit::Client::RepositoryInvitations","Octokit/Client/RepositoryInvitations.html#method-i-accept_repo_invitation","(invitation_id, options = {})",""],["accept_repository_invitation","Octokit::Client::RepositoryInvitations","Octokit/Client/RepositoryInvitations.html#method-i-accept_repository_invitation","(invitation_id, options = {})","<p>Accept a repository invitation\n<p>Requires authenticated client\n<p>@param invitation_id [Integer] The id of the …\n"],["access_token","Octokit::Default","Octokit/Default.html#method-c-access_token","()","<p>Default access token from ENV @return [String]\n"],["access_token=","Octokit::Client","Octokit/Client.html#method-i-access_token-3D","(value)","<p>Set OAuth access token for authentication\n<p>@param value [String] 40 character GitHub OAuth access token …\n"],["add_assignees","Octokit::Client::Issues","Octokit/Client/Issues.html#method-i-add_assignees","(repo, number, assignees, options = {})","<p>Add assignees to an issue\n<p>@param repo [Integer, String, Repository, Hash] A GitHub repository @param number …\n"],["add_authorized_key","Octokit::EnterpriseManagementConsoleClient::ManagementConsole","Octokit/EnterpriseManagementConsoleClient/ManagementConsole.html#method-i-add_authorized_key","(key)","<p>Add an authorized SSH keys on the Enterprise install\n<p>@param key Either the file path to a key, a File …\n"],["add_collab","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-add_collab","(repo, collaborator, options = {})",""],["add_collaborator","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-add_collaborator","(repo, collaborator, options = {})","<p>Add collaborator to repo\n<p>This can also be used to update the permission of an existing collaborator\n<p>Requires …\n"],["add_comment","Octokit::Client::Issues","Octokit/Client/Issues.html#method-i-add_comment","(repo, number, comment, options = {})","<p>Add a comment to an issue\n<p>@param repo [Integer, String, Repository, Hash] A GitHub repository @param number …\n"],["add_content","Octokit::Client::Contents","Octokit/Client/Contents.html#method-i-add_content","(*args)",""],["add_contents","Octokit::Client::Contents","Octokit/Client/Contents.html#method-i-add_contents","(*args)",""],["add_deploy_key","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-add_deploy_key","(repo, title, key, options = {})","<p>Add deploy key to a repo\n<p>Requires authenticated client.\n<p>@param repo [Integer, String, Hash, Repository] …\n"],["add_email","Octokit::Client::Users","Octokit/Client/Users.html#method-i-add_email","(email, options = {})","<p>Add email address to user.\n<p>Requires authenticated client.\n<p>@param email [String] Email address to add to …\n"],["add_key","Octokit::Client::Users","Octokit/Client/Users.html#method-i-add_key","(title, key, options = {})","<p>Add public key to user account.\n<p>Requires authenticated client.\n<p>@param title [String] Title to give reference …\n"],["add_label","Octokit::Client::Labels","Octokit/Client/Labels.html#method-i-add_label","(repo, label, color=\"ffffff\", options = {})","<p>Add a label to a repository\n<p>@param repo [Integer, String, Repository, Hash] A GitHub repository @param …\n"],["add_labels_to_an_issue","Octokit::Client::Labels","Octokit/Client/Labels.html#method-i-add_labels_to_an_issue","(repo, number, labels)","<p>Add label(s) to an Issue\n<p>@param repo [Integer, String, Repository, Hash] A Github repository @param number …\n"],["add_repo_to_installation","Octokit::Client::Apps","Octokit/Client/Apps.html#method-i-add_repo_to_installation","(installation, repo, options = {})",""],["add_repository_to_app_installation","Octokit::Client::Apps","Octokit/Client/Apps.html#method-i-add_repository_to_app_installation","(installation, repo, options = {})","<p>Add a single repository to an installation\n<p>@param installation [Integer] The id of a GitHub App Installation …\n"],["add_repository_to_integration_installation","Octokit::Client::Apps","Octokit/Client/Apps.html#method-i-add_repository_to_integration_installation","(installation, repo, options = {})",""],["add_team_member","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-add_team_member","(team_id, user, options = {})","<p>Add team member\n<p>Requires authenticated organization owner or member with team `admin` permission.\n<p>@param …\n"],["add_team_membership","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-add_team_membership","(team_id, user, options = {})","<p>Add or invite a user to a team\n<p>@param team_id [Integer] Team id. @param user [String] GitHub username …\n"],["add_team_repo","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-add_team_repo","(team_id, repo, options = {})",""],["add_team_repository","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-add_team_repository","(team_id, repo, options = {})","<p>Add team repository\n<p>This can also be used to update the permission of an existing team\n<p>Requires authenticated …\n"],["admin_comments_stats","Octokit::EnterpriseAdminClient::AdminStats","Octokit/EnterpriseAdminClient/AdminStats.html#method-i-admin_comments_stats","()","<p>Get only comment-related stats\n<p>@return [Sawyer::Resource] Only comment-related stats @example Get only …\n"],["admin_gists_stats","Octokit::EnterpriseAdminClient::AdminStats","Octokit/EnterpriseAdminClient/AdminStats.html#method-i-admin_gists_stats","()","<p>Get only gist-related stats\n<p>@return [Sawyer::Resource] Only only gist-related stats @example Get only …\n"],["admin_hooks_stats","Octokit::EnterpriseAdminClient::AdminStats","Octokit/EnterpriseAdminClient/AdminStats.html#method-i-admin_hooks_stats","()","<p>Get only hooks-related stats\n<p>@return [Sawyer::Resource] Only hooks-related stats @example Get only hooks-related …\n"],["admin_issues_stats","Octokit::EnterpriseAdminClient::AdminStats","Octokit/EnterpriseAdminClient/AdminStats.html#method-i-admin_issues_stats","()","<p>Get only issue-related stats\n<p>@return [Sawyer::Resource] Only issue-related stats @example Get only issue-related …\n"],["admin_milestones_stats","Octokit::EnterpriseAdminClient::AdminStats","Octokit/EnterpriseAdminClient/AdminStats.html#method-i-admin_milestones_stats","()","<p>Get only milestone-related stats\n<p>@return [Sawyer::Resource] Only milestone-related stats @example Get …\n"],["admin_organization_stats","Octokit::EnterpriseAdminClient::AdminStats","Octokit/EnterpriseAdminClient/AdminStats.html#method-i-admin_organization_stats","()","<p>Get only organization-related stats\n<p>@return [Sawyer::Resource] Only organization-related stats @example …\n"],["admin_pages_stats","Octokit::EnterpriseAdminClient::AdminStats","Octokit/EnterpriseAdminClient/AdminStats.html#method-i-admin_pages_stats","()","<p>Get only pages-related stats\n<p>@return [Sawyer::Resource] Only pages-related stats @example Get only pages-related …\n"],["admin_pull_requests_stats","Octokit::EnterpriseAdminClient::AdminStats","Octokit/EnterpriseAdminClient/AdminStats.html#method-i-admin_pull_requests_stats","()","<p>Get only pull request-related stats\n<p>@return [Sawyer::Resource] Only pull request-related stats @example …\n"],["admin_repository_stats","Octokit::EnterpriseAdminClient::AdminStats","Octokit/EnterpriseAdminClient/AdminStats.html#method-i-admin_repository_stats","()","<p>Get only repository-related stats\n<p>@return [Sawyer::Resource] Only repository-related stats @example Get …\n"],["admin_stats","Octokit::EnterpriseAdminClient::AdminStats","Octokit/EnterpriseAdminClient/AdminStats.html#method-i-admin_stats","()","<p>Get all available stats\n<p>@return [Sawyer::Resource] All available stats @example Get all available stats …\n"],["admin_users_stats","Octokit::EnterpriseAdminClient::AdminStats","Octokit/EnterpriseAdminClient/AdminStats.html#method-i-admin_users_stats","()","<p>Get only user-related stats\n<p>@return [Sawyer::Resource] Only user-related stats @example Get only user-related …\n"],["agent","Octokit::Connection","Octokit/Connection.html#method-i-agent","()","<p>Hypermedia agent for the GitHub API\n<p>@return [Sawyer::Agent]\n"],["all_organizations","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-all_organizations","(options = {})","<p>List all GitHub organizations\n<p>This provides a list of every organization, in the order that they were …\n"],["all_orgs","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-all_orgs","(options = {})",""],["all_repositories","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-all_repositories","(options = {})","<p>List all repositories\n<p>This provides a dump of every repository, in the order that they were created.\n<p>@see …\n"],["all_users","Octokit::Client::Users","Octokit/Client/Users.html#method-i-all_users","(options = {})","<p>List all GitHub users\n<p>This provides a list of every user, in the order that they signed up for GitHub …\n"],["api_endpoint","Octokit::Configurable","Octokit/Configurable.html#method-i-api_endpoint","()",""],["api_endpoint","Octokit::Default","Octokit/Default.html#method-c-api_endpoint","()","<p>Default API endpoint from ENV or {API_ENDPOINT} @return [String]\n"],["app","Octokit::Client::Apps","Octokit/Client/Apps.html#method-i-app","(options = {})","<p>Get the authenticated App\n<p>@param options [Hash] A customizable set of options\n<p>@see developer.github.com/v3/apps/#get-the-authenticated-app …\n"],["application_authenticated?","Octokit::Authentication","Octokit/Authentication.html#method-i-application_authenticated-3F","()","<p>Indicates if the client has OAuth Application client_id and secret credentials to make anonymous requests …\n"],["archive_link","Octokit::Client::Contents","Octokit/Client/Contents.html#method-i-archive_link","(repo, options={})","<p>This method will provide a URL to download a tarball or zipball archive for a repository.\n<p>@param repo …\n"],["as_app","Octokit::Client","Octokit/Client.html#method-i-as_app","(key = client_id, secret = client_secret, &block)","<p>Duplicate client using client_id and client_secret as Basic Authentication credentials. @example\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Octokit</span>.<span class=\"ruby-identifier\">client_id</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["authorization","Octokit::Client::Authorizations","Octokit/Client/Authorizations.html#method-i-authorization","(number, options = {})","<p>Get a single authorization for the authenticated user.\n<p>You can only access your own tokens, and only through …\n"],["authorizations","Octokit::Client::Authorizations","Octokit/Client/Authorizations.html#method-i-authorizations","(options = {})","<p>List the authenticated user&#39;s authorizations\n<p>API for users to manage their own tokens. You can only …\n"],["authorize_url","Octokit::Client::Authorizations","Octokit/Client/Authorizations.html#method-i-authorize_url","(app_id = client_id, options = {})","<p>Get the URL to authorize a user for an application via the web flow\n<p>@param app_id [String] Client Id we …\n"],["authorized_keys","Octokit::EnterpriseManagementConsoleClient::ManagementConsole","Octokit/EnterpriseManagementConsoleClient/ManagementConsole.html#method-i-authorized_keys","()","<p>Fetch the authorized SSH keys on the Enterprise install\n<p>@return [Sawyer::Resource] An array of authorized …\n"],["auto_paginate","Octokit::Default","Octokit/Default.html#method-c-auto_paginate","()","<p>Default pagination preference from ENV @return [String]\n"],["available_hooks","Octokit::Client::Hooks","Octokit/Client/Hooks.html#method-i-available_hooks","(options = {})","<p>List all Service Hooks supported by GitHub\n<p>@return [Sawyer::Resource] A list of all hooks on GitHub @see …\n"],["basic_authenticated?","Octokit::Authentication","Octokit/Authentication.html#method-i-basic_authenticated-3F","()","<p>Indicates if the client was supplied  Basic Auth username and password\n<p>@see developer.github.com/v3/#authentication …\n"],["bearer_authenticated?","Octokit::Authentication","Octokit/Authentication.html#method-i-bearer_authenticated-3F","()","<p>Indicates if the client was supplied a bearer token\n<p>@see developer.github.com/early-access/integrations/authentication/#as-an-integration …\n"],["bearer_token","Octokit::Default","Octokit/Default.html#method-c-bearer_token","()","<p>Default bearer token from ENV @return [String]\n"],["bearer_token=","Octokit::Client","Octokit/Client.html#method-i-bearer_token-3D","(value)","<p>Set Bearer Token for authentication\n<p>@param value [String] JWT\n"],["billing_actions","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-billing_actions","(org)","<p>Get GitHub Actions billing for an organization\n<p>Requires authenticated organization owner.\n<p>@param org [String, …\n"],["blob","Octokit::Client::Objects","Octokit/Client/Objects.html#method-i-blob","(repo, blob_sha, options = {})","<p>Get a single blob, fetching its content and encoding\n<p>@param repo [Integer, String, Hash, Repository]  …\n"],["boolean_from_response","Octokit::Connection","Octokit/Connection.html#method-i-boolean_from_response","(method, path, options = {})","<p>Executes the request, checking if it was successful\n<p>@return [Boolean] True on success, false otherwise …\n"],["branch","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-branch","(repo, branch, options = {})","<p>Get a single branch from a repository\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository. …\n"],["branch_protection","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-branch_protection","(repo, branch, options = {})","<p>Get branch protection summary\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository. @param …\n"],["branches","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-branches","(repo, options = {})","<p>List branches\n<p>Requires authenticated client for private repos.\n<p>@param repo [Integer, String, Hash, Repository] …\n"],["build_error_context","Octokit::Error","Octokit/Error.html#method-i-build_error_context","()",""],["build_error_message","Octokit::Error","Octokit/Error.html#method-i-build_error_message","()",""],["call","Octokit::Middleware::FollowRedirects","Octokit/Middleware/FollowRedirects.html#method-i-call","(env)",""],["cancel_source_import","Octokit::Client::SourceImport","Octokit/Client/SourceImport.html#method-i-cancel_source_import","(repo, options = {})","<p>Stop an import for a repository.\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository. …\n"],["cancel_workflow_run","Octokit::Client::ActionsWorkflowRuns","Octokit/Client/ActionsWorkflowRuns.html#method-i-cancel_workflow_run","(repo, id, options = {})","<p>Cancels a workflow run\n<p>@param repo [Integer, String, Repository, Hash] A GitHub repository @param id [Integer] …\n"],["check_application_authorization","Octokit::Client::OauthApplications","Octokit/Client/OauthApplications.html#method-i-check_application_authorization","(access_token, options = {})",""],["check_assignee","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-check_assignee","(repo, assignee, options = {})","<p>Check to see if a particular user is an assignee for a repository.\n<p>@param repo [Integer, String, Hash …\n"],["check_run","Octokit::Client::Checks","Octokit/Client/Checks.html#method-i-check_run","(repo, id, options = {})","<p>Get a single check run\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository @param id [Integer] …\n"],["check_run_annotations","Octokit::Client::Checks","Octokit/Client/Checks.html#method-i-check_run_annotations","(repo, id, options = {})","<p>List annotations for a check run\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository @param …\n"],["check_runs_for_check_suite","Octokit::Client::Checks","Octokit/Client/Checks.html#method-i-check_runs_for_check_suite","(repo, id, options = {})","<p>List check runs in a check suite\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository @param …\n"],["check_runs_for_ref","Octokit::Client::Checks","Octokit/Client/Checks.html#method-i-check_runs_for_ref","(repo, ref, options = {})","<p>List check runs for a specific ref\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository …\n"],["check_suite","Octokit::Client::Checks","Octokit/Client/Checks.html#method-i-check_suite","(repo, id, options = {})","<p>Get a single check suite\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository @param id …\n"],["check_suites_for_ref","Octokit::Client::Checks","Octokit/Client/Checks.html#method-i-check_suites_for_ref","(repo, ref, options = {})","<p>List check suites for a specific ref\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository …\n"],["check_token","Octokit::Client::OauthApplications","Octokit/Client/OauthApplications.html#method-i-check_token","(access_token, options = {})","<p>Check if a token is valid.\n<p>Applications can check if a token is valid without rate limits.\n<p>@param access_token …\n"],["child_teams","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-child_teams","(team_id, options = {})","<p>List child teams\n<p>Requires authenticated organization member.\n<p>@param team_id [Integer] Team id. @return …\n"],["client","Octokit","Octokit.html#method-c-client","()","<p>API client based on configured options {Configurable}\n<p>@return [Octokit::Client] API wrapper\n"],["client_id","Octokit::Default","Octokit/Default.html#method-c-client_id","()","<p>Default OAuth app key from ENV @return [String]\n"],["client_id=","Octokit::Client","Octokit/Client.html#method-i-client_id-3D","(value)","<p>Set OAuth app client_id\n<p>@param value [String] 20 character GitHub OAuth app client_id\n"],["client_secret","Octokit::Default","Octokit/Default.html#method-c-client_secret","()","<p>Default OAuth app secret from ENV @return [String]\n"],["client_secret=","Octokit::Client","Octokit/Client.html#method-i-client_secret-3D","(value)","<p>Set OAuth app client_secret\n<p>@param value [String] 40 character GitHub OAuth app client_secret\n"],["client_without_redirects","Octokit::Client","Octokit/Client.html#method-i-client_without_redirects","(options = {})",""],["clones","Octokit::Client::Traffic","Octokit/Client/Traffic.html#method-i-clones","(repo, options = {})","<p>Get the total number of clones and breakdown per day or week for the last 14 days\n<p>@param repo [Integer, …\n"],["close_issue","Octokit::Client::Issues","Octokit/Client/Issues.html#method-i-close_issue","(repo, number, options = {})","<p>Close an issue\n<p>@param repo [Integer, String, Repository, Hash] A GitHub repository @param number [Integer] …\n"],["close_pull_request","Octokit::Client::PullRequests","Octokit/Client/PullRequests.html#method-i-close_pull_request","(repo, number, options = {})","<p>Close a pull request\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository. @param number …\n"],["code_frequency_stats","Octokit::Client::Stats","Octokit/Client/Stats.html#method-i-code_frequency_stats","(repo, options = {})","<p>Get the number of additions and deletions per week\n<p>@param repo [Integer, String, Hash, Repository] A  …\n"],["collaborator?","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-collaborator-3F","(repo, collaborator, options={})","<p>Checks if a user is a collaborator for a repo.\n<p>Requires authenticated client.\n<p>@param repo [Integer, String …\n"],["collaborators","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-collaborators","(repo, options = {})","<p>List collaborators\n<p>Requires authenticated client for private repos.\n<p>@param repo [Integer, String, Hash …\n"],["collabs","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-collabs","(repo, options = {})",""],["column_cards","Octokit::Client::Projects","Octokit/Client/Projects.html#method-i-column_cards","(id, options = {})","<p>List columns cards\n<p>Requires authenticated client\n<p>@param id [Integer] Project column id @return [Array&lt;Sawyer::Resource&gt;] …\n"],["combined_status","Octokit::Client::Statuses","Octokit/Client/Statuses.html#method-i-combined_status","(repo, ref, options = {})","<p>Get the combined status for a ref\n<p>@param repo [Integer, String, Repository, Hash] a GitHub repository …\n"],["commit","Octokit::Client::Commits","Octokit/Client/Commits.html#method-i-commit","(repo, sha, options = {})","<p>Get a single commit\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository @param sha [String] …\n"],["commit_activity_stats","Octokit::Client::Stats","Octokit/Client/Stats.html#method-i-commit_activity_stats","(repo, options = {})","<p>Get the last year of commit activity data\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository …\n"],["commit_branches","Octokit::Client::CommitBranches","Octokit/Client/CommitBranches.html#method-i-commit_branches","(repo, sha, options = {})","<p>List branches for a single HEAD commit\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository …\n"],["commit_comment","Octokit::Client::CommitComments","Octokit/Client/CommitComments.html#method-i-commit_comment","(repo, id, options = {})","<p>Get a single commit comment\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository @param …\n"],["commit_comment_reactions","Octokit::Client::Reactions","Octokit/Client/Reactions.html#method-i-commit_comment_reactions","(repo, id, options = {})","<p>List reactions for a commit comment\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository …\n"],["commit_comments","Octokit::Client::CommitComments","Octokit/Client/CommitComments.html#method-i-commit_comments","(repo, sha, options = {})","<p>List comments for a single commit\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository …\n"],["commit_pulls","Octokit::Client::CommitPulls","Octokit/Client/CommitPulls.html#method-i-commit_pulls","(repo, sha, options = {})","<p>List pulls for a single commit\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository @param …\n"],["commits","Octokit::Client::Commits","Octokit/Client/Commits.html#method-i-commits","(*args)","<p>List commits\n<p>@overload commits(repo, sha_or_branch, options = {})\n\n<pre>@deprecated\n@param repo [Integer, String, ...</pre>\n"],["commits_before","Octokit::Client::Commits","Octokit/Client/Commits.html#method-i-commits_before","(*args)","<p>Get commits before a specified date\n<p>@overload commits_before(repo, date, options = {})\n\n<pre>@param repo [Integer, ...</pre>\n"],["commits_between","Octokit::Client::Commits","Octokit/Client/Commits.html#method-i-commits_between","(*args)","<p>Get commits made between two nominated dates\n<p>@overload commits_between(repo, start_date, end_date, options …\n"],["commits_on","Octokit::Client::Commits","Octokit/Client/Commits.html#method-i-commits_on","(*args)","<p>Get commits on a specified date\n<p>@overload commits_on(repo, date, options = {})\n\n<pre>@param repo [Integer, String, ...</pre>\n"],["commits_since","Octokit::Client::Commits","Octokit/Client/Commits.html#method-i-commits_since","(*args)","<p>Get commits after a specified date\n<p>@overload commits_since(repo, date, options = {})\n\n<pre>@param repo [Integer, ...</pre>\n"],["community_profile","Octokit::Client::CommunityProfile","Octokit/Client/CommunityProfile.html#method-i-community_profile","(repo, options = {})","<p>Get community profile metrics for a repository\n<p>@param repo [Integer, String, Hash, Repository] A GitHub …\n"],["compare","Octokit::Client::Commits","Octokit/Client/Commits.html#method-i-compare","(repo, start, endd, options = {})","<p>Compare two commits\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository @param start [String] …\n"],["conceal_membership","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-conceal_membership","(org, user, options = {})",""],["config_check","Octokit::EnterpriseManagementConsoleClient::ManagementConsole","Octokit/EnterpriseManagementConsoleClient/ManagementConsole.html#method-i-config_check","()",""],["config_status","Octokit::EnterpriseManagementConsoleClient::ManagementConsole","Octokit/EnterpriseManagementConsoleClient/ManagementConsole.html#method-i-config_status","()","<p>Get information about the Enterprise installation\n<p>@return [Sawyer::Resource] The installation information …\n"],["configure","Octokit::Configurable","Octokit/Configurable.html#method-i-configure","()","<p>Set configuration options using a block\n"],["connection_options","Octokit::Default","Octokit/Default.html#method-c-connection_options","()","<p>Default options for Faraday::Connection @return [Hash]\n"],["content","Octokit::Client::Contents","Octokit/Client/Contents.html#method-i-content","(repo, options={})",""],["content_type_from_file","Octokit::Client::Releases","Octokit/Client/Releases.html#method-i-content_type_from_file","(file)",""],["contents","Octokit::Client::Contents","Octokit/Client/Contents.html#method-i-contents","(repo, options={})","<p>Receive a listing of a repository folder or the contents of a file\n<p>@param repo [Integer, String, Repository …\n"],["contribs","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-contribs","(repo, anon = nil, options = {})",""],["contributor_stats","Octokit::Client::Stats","Octokit/Client/Stats.html#method-i-contributor_stats","(repo, options = {})",""],["contributors","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-contributors","(repo, anon = nil, options = {})","<p>List contributors to a repo\n<p>Requires authenticated client for private repos.\n<p>@param repo [Integer, String …\n"],["contributors_stats","Octokit::Client::Stats","Octokit/Client/Stats.html#method-i-contributors_stats","(repo, options = {})","<p>Get contributors list with additions, deletions, and commit counts\n<p>@param repo [Integer, String, Hash …\n"],["convert_to_get?","Octokit::Middleware::FollowRedirects","Octokit/Middleware/FollowRedirects.html#method-i-convert_to_get-3F","(response)",""],["convert_to_outside_collaborator","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-convert_to_outside_collaborator","(org, user, options={})","<p>Converts an organization member to an outside collaborator\n<p>Requires authenticated organization members. …\n"],["create","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-create","(name, options = {})",""],["create_app_installation_access_token","Octokit::Client::Apps","Octokit/Client/Apps.html#method-i-create_app_installation_access_token","(installation, options = {})","<p>Create a new installation token\n<p>@param installation [Integer] The id of a GitHub App Installation @param …\n"],["create_authorization","Octokit::Client::Authorizations","Octokit/Client/Authorizations.html#method-i-create_authorization","(options = {})","<p>Create an authorization for the authenticated user.\n<p>You can create your own tokens, and only through  …\n"],["create_blob","Octokit::Client::Objects","Octokit/Client/Objects.html#method-i-create_blob","(repo, content, encoding=\"utf-8\", options = {})","<p>Create a blob\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository @param content [String] …\n"],["create_check_run","Octokit::Client::Checks","Octokit/Client/Checks.html#method-i-create_check_run","(repo, name, head_sha, options = {})","<p>Create a check run\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository @param name [String] …\n"],["create_check_suite","Octokit::Client::Checks","Octokit/Client/Checks.html#method-i-create_check_suite","(repo, head_sha, options = {})","<p>Create a check suite\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository @param head_sha …\n"],["create_commit","Octokit::Client::Commits","Octokit/Client/Commits.html#method-i-create_commit","(repo, message, tree, parents=nil, options = {})","<p>Create a commit\n<p>Optionally pass <code>author</code> and <code>committer</code> hashes in <code>options</code> if you&#39;d like manual control …\n"],["create_commit_comment","Octokit::Client::CommitComments","Octokit/Client/CommitComments.html#method-i-create_commit_comment","(repo, sha, body, path=nil, line=nil, position=nil, options = {})","<p>Create a commit comment\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository @param sha …\n"],["create_commit_comment_reaction","Octokit::Client::Reactions","Octokit/Client/Reactions.html#method-i-create_commit_comment_reaction","(repo, id, reaction, options = {})","<p>Create a reaction for a commit comment\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository …\n"],["create_content","Octokit::Client::Contents","Octokit/Client/Contents.html#method-i-create_content","(*args)",""],["create_contents","Octokit::Client::Contents","Octokit/Client/Contents.html#method-i-create_contents","(*args)","<p>Add content to a repository\n<p>@overload create_contents(repo, path, message, content = nil, options = {}) …\n"],["create_deployment","Octokit::Client::Deployments","Octokit/Client/Deployments.html#method-i-create_deployment","(repo, ref, options = {})","<p>Create a deployment for a ref\n<p>@param repo [Integer, String, Repository, Hash] A GitHub repository @param …\n"],["create_deployment_status","Octokit::Client::Deployments","Octokit/Client/Deployments.html#method-i-create_deployment_status","(deployment_url, state, options = {})","<p>Create a deployment status for a Deployment\n<p>@param deployment_url [String] A URL for a deployment resource …\n"],["create_gist","Octokit::Client::Gists","Octokit/Client/Gists.html#method-i-create_gist","(options = {})","<p>Create a gist\n<p>@param options [Hash] Gist information. @option options [String] :description @option options …\n"],["create_gist_comment","Octokit::Client::Gists","Octokit/Client/Gists.html#method-i-create_gist_comment","(gist_id, comment, options = {})","<p>Create gist comment\n<p>Requires authenticated client.\n<p>@param gist_id [String] Id of the gist. @param comment …\n"],["create_hook","Octokit::Client::Hooks","Octokit/Client/Hooks.html#method-i-create_hook","(repo, name, config, options = {})","<p>Create a hook\n<p>Requires authenticated client.\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository. …\n"],["create_impersonation_token","Octokit::EnterpriseAdminClient::Users","Octokit/EnterpriseAdminClient/Users.html#method-i-create_impersonation_token","(login, options = {})","<p>Creates an impersonation OAuth token.\n<p>@param login [String] The user to create a token for. @param options …\n"],["create_installation_access_token","Octokit::Client::Apps","Octokit/Client/Apps.html#method-i-create_installation_access_token","(installation, options = {})",""],["create_integration_installation_access_token","Octokit::Client::Apps","Octokit/Client/Apps.html#method-i-create_integration_installation_access_token","(installation, options = {})",""],["create_issue","Octokit::Client::Issues","Octokit/Client/Issues.html#method-i-create_issue","(repo, title, body = nil, options = {})","<p>Create an issue for a repository\n<p>@param repo [Integer, String, Repository, Hash] A GitHub repository @param …\n"],["create_issue_comment_reaction","Octokit::Client::Reactions","Octokit/Client/Reactions.html#method-i-create_issue_comment_reaction","(repo, id, reaction, options = {})","<p>Create reaction for an issue comment\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository …\n"],["create_issue_reaction","Octokit::Client::Reactions","Octokit/Client/Reactions.html#method-i-create_issue_reaction","(repo, number, reaction, options = {})","<p>Create reaction for an issue\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository @param …\n"],["create_milestone","Octokit::Client::Milestones","Octokit/Client/Milestones.html#method-i-create_milestone","(repository, title, options = {})","<p>Create a milestone for a repository\n<p>@param repository [Integer, String, Repository, Hash] A GitHub repository …\n"],["create_or_update_secret","Octokit::Client::ActionsSecrets","Octokit/Client/ActionsSecrets.html#method-i-create_or_update_secret","(repo, name, options)","<p>Create or update secrets\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository @param name …\n"],["create_org_hook","Octokit::Client::Hooks","Octokit/Client/Hooks.html#method-i-create_org_hook","(org, config, options = {})","<p>Create an org hook\n<p>Requires client authenticated as admin for the org.\n<p>@param org [String, Integer] Organization …\n"],["create_org_project","Octokit::Client::Projects","Octokit/Client/Projects.html#method-i-create_org_project","(org, name, options = {})","<p>Create organization project\n<p>Requires authenticated client\n<p>@param org [String] A GitHub organization @param …\n"],["create_organization","Octokit::EnterpriseAdminClient::Orgs","Octokit/EnterpriseAdminClient/Orgs.html#method-i-create_organization","(login, admin, options = {})","<p>Create a new organization on the instance.\n<p>@param login [String] The organization&#39;s username. @param …\n"],["create_organization_project","Octokit::Client::Projects","Octokit/Client/Projects.html#method-i-create_organization_project","(org, name, options = {})",""],["create_project","Octokit::Client::Projects","Octokit/Client/Projects.html#method-i-create_project","(repo, name, options = {})","<p>Create a project\n<p>Requires authenticated client\n<p>@param repo [Integer, String, Repository, Hash] A GitHub …\n"],["create_project_card","Octokit::Client::Projects","Octokit/Client/Projects.html#method-i-create_project_card","(id, options = {})","<p>Create project card\n<p>Requires authenticated client\n<p>@param id [Integer] Project column id @option options …\n"],["create_project_column","Octokit::Client::Projects","Octokit/Client/Projects.html#method-i-create_project_column","(id, name, options = {})","<p>Create a project column\n<p>Requires authenticated client\n<p>@param id [Integer] Project column id @param name …\n"],["create_pull_comment","Octokit::Client::PullRequests","Octokit/Client/PullRequests.html#method-i-create_pull_comment","(repo, pull_id, body, commit_id, path, position, options = {})",""],["create_pull_reply","Octokit::Client::PullRequests","Octokit/Client/PullRequests.html#method-i-create_pull_reply","(repo, pull_id, body, comment_id, options = {})",""],["create_pull_request","Octokit::Client::PullRequests","Octokit/Client/PullRequests.html#method-i-create_pull_request","(repo, base, head, title, body = nil, options = {})","<p>Create a pull request\n<p>@see developer.github.com/v3/pulls/#create-a-pull-request @param repo [Integer, …\n"],["create_pull_request_comment","Octokit::Client::PullRequests","Octokit/Client/PullRequests.html#method-i-create_pull_request_comment","(repo, pull_id, body, commit_id, path, position, options = {})","<p>Create a pull request comment\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository @param …\n"],["create_pull_request_comment_reply","Octokit::Client::PullRequests","Octokit/Client/PullRequests.html#method-i-create_pull_request_comment_reply","(repo, pull_id, body, comment_id, options = {})","<p>Create reply to a pull request comment\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository …\n"],["create_pull_request_for_issue","Octokit::Client::PullRequests","Octokit/Client/PullRequests.html#method-i-create_pull_request_for_issue","(repo, base, head, issue, options = {})","<p>Create a pull request from existing issue\n<p>@see developer.github.com/v3/pulls/#alternative-input @param …\n"],["create_pull_request_review","Octokit::Client::Reviews","Octokit/Client/Reviews.html#method-i-create_pull_request_review","(repo, number, options = {})","<p>Create a pull request review\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository @param …\n"],["create_pull_request_review_comment_reaction","Octokit::Client::Reactions","Octokit/Client/Reactions.html#method-i-create_pull_request_review_comment_reaction","(repo, id, reaction, options = {})","<p>Create reaction for a pull request review comment\n<p>@param repo [Integer, String, Hash, Repository] A GitHub …\n"],["create_ref","Octokit::Client::Refs","Octokit/Client/Refs.html#method-i-create_ref","(repo, ref, sha, options = {})","<p>Create a reference\n<p>@param repo [Integer, String, Repository, Hash] A GitHub repository @param ref [String] …\n"],["create_reference","Octokit::Client::Refs","Octokit/Client/Refs.html#method-i-create_reference","(repo, ref, sha, options = {})",""],["create_release","Octokit::Client::Releases","Octokit/Client/Releases.html#method-i-create_release","(repo, tag_name, options = {})","<p>Create a release\n<p>@param repo [Integer, String, Repository, Hash] A GitHub repository @param tag_name [String] …\n"],["create_repo","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-create_repo","(name, options = {})",""],["create_repo_from_template","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-create_repo_from_template","(repo, name, options = {})",""],["create_repository","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-create_repository","(name, options = {})","<p>Create a repository for a user or organization\n<p>@param name [String] Name of the new repo @option options …\n"],["create_repository_from_template","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-create_repository_from_template","(repo, name, options = {})","<p>Create a repository for a user or organization generated from a template repository\n<p>@param repo [Integer, …\n"],["create_review_reply","Octokit::Client::PullRequests","Octokit/Client/PullRequests.html#method-i-create_review_reply","(repo, pull_id, body, comment_id, options = {})",""],["create_status","Octokit::Client::Statuses","Octokit/Client/Statuses.html#method-i-create_status","(repo, sha, state, options = {})","<p>Create status for a commit\n<p>@param repo [Integer, String, Repository, Hash] A GitHub repository @param …\n"],["create_tag","Octokit::Client::Objects","Octokit/Client/Objects.html#method-i-create_tag","(repo, tag, message, object_sha, type, tagger_name, tagger_email, tagger_date, options = {})","<p>Create a tag\n<p>Requires authenticated client.\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository. …\n"],["create_team","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-create_team","(org, options = {})","<p>Create team\n<p>Requires authenticated organization owner.\n<p>@param org [String, Integer] Organization GitHub …\n"],["create_tree","Octokit::Client::Objects","Octokit/Client/Objects.html#method-i-create_tree","(repo, tree, options = {})","<p>Create a tree\n<p>Pass <code>:base_tree =&gt; &quot;827efc6...&quot;</code> in <code>options</code> to update an existing tree with …\n"],["create_user","Octokit::EnterpriseAdminClient::Users","Octokit/EnterpriseAdminClient/Users.html#method-i-create_user","(login, email, options = {})","<p>Create a new user.\n<p>@param login [String] The user&#39;s username. @param email [String] The user&#39;s …\n"],["create_view_comment","Octokit::Client::PullRequests","Octokit/Client/PullRequests.html#method-i-create_view_comment","(repo, pull_id, body, commit_id, path, position, options = {})",""],["data","Octokit::Error","Octokit/Error.html#method-i-data","()",""],["decline_invitation","Octokit::Client::RepositoryInvitations","Octokit/Client/RepositoryInvitations.html#method-i-decline_invitation","(invitation_id, options = {})",""],["decline_repository_invitation","Octokit::Client::RepositoryInvitations","Octokit/Client/RepositoryInvitations.html#method-i-decline_repository_invitation","(invitation_id, options = {})","<p>Decline a repository invitation\n<p>Requires authenticated client\n<p>@param invitation_id [Integer] The id of …\n"],["default_media_type","Octokit::Default","Octokit/Default.html#method-c-default_media_type","()","<p>Default media type from ENV or {MEDIA_TYPE} @return [String]\n"],["delete","Octokit::Connection","Octokit/Connection.html#method-i-delete","(url, options = {})","<p>Make a HTTP DELETE request\n<p>@param url [String] The path, relative to {#api_endpoint} @param options [Hash] …\n"],["delete_app_authorization","Octokit::Client::OauthApplications","Octokit/Client/OauthApplications.html#method-i-delete_app_authorization","(access_token, options = {})","<p>Delete an app authorization\n<p>OAuth application owners can revoke a grant for their OAuth application and …\n"],["delete_app_token","Octokit::Client::OauthApplications","Octokit/Client/OauthApplications.html#method-i-delete_app_token","(access_token, options = {})","<p>Delete an app token\n<p>Applications can revoke (delete) a token\n<p>@param access_token [String] 40 character …\n"],["delete_application_authorization","Octokit::Client::OauthApplications","Octokit/Client/OauthApplications.html#method-i-delete_application_authorization","(access_token, options = {})",""],["delete_authorization","Octokit::Client::Authorizations","Octokit/Client/Authorizations.html#method-i-delete_authorization","(number, options = {})","<p>Delete an authorization for the authenticated user.\n<p>You can delete your own tokens, and only through  …\n"],["delete_authorized_key","Octokit::EnterpriseManagementConsoleClient::ManagementConsole","Octokit/EnterpriseManagementConsoleClient/ManagementConsole.html#method-i-delete_authorized_key","(key)",""],["delete_branch","Octokit::Client::Refs","Octokit/Client/Refs.html#method-i-delete_branch","(repo, branch, options = {})","<p>Delete a single branch\n<p>@param repo [Integer, String, Repository, Hash] A GitHub repository @param branch …\n"],["delete_comment","Octokit::Client::Issues","Octokit/Client/Issues.html#method-i-delete_comment","(repo, number, options = {})","<p>Delete a single comment\n<p>@param repo [Integer, String, Repository, Hash] A GitHub repository @param number …\n"],["delete_commit_comment","Octokit::Client::CommitComments","Octokit/Client/CommitComments.html#method-i-delete_commit_comment","(repo, id, options = {})","<p>Delete a commit comment\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository @param id …\n"],["delete_content","Octokit::Client::Contents","Octokit/Client/Contents.html#method-i-delete_content","(repo, path, message, sha, options = {})",""],["delete_contents","Octokit::Client::Contents","Octokit/Client/Contents.html#method-i-delete_contents","(repo, path, message, sha, options = {})","<p>Delete content in a repository\n<p>@param repo [Integer, String, Repository, Hash] A GitHub repository @param …\n"],["delete_deployment","Octokit::Client::Deployments","Octokit/Client/Deployments.html#method-i-delete_deployment","(repo, deployment_id, options = {})","<p>Delete a Deployment\n<p>@param repo [Integer, String, Repository, Hash] A GitHub repository @param deployment_id …\n"],["delete_download","Octokit::Client::Downloads","Octokit/Client/Downloads.html#method-i-delete_download","(repo, id, options = {})","<p>Delete a single download for a repository\n<p>@param repo [Integer, String, Repository, Hash] A GitHub repository …\n"],["delete_gist","Octokit::Client::Gists","Octokit/Client/Gists.html#method-i-delete_gist","(gist, options = {})","<p>Delete a gist\n<p>@param gist [String] Gist ID @return [Boolean] Indicating success of deletion @see developer.github.com/v3/gists/#delete-a-gist …\n"],["delete_gist_comment","Octokit::Client::Gists","Octokit/Client/Gists.html#method-i-delete_gist_comment","(gist_id, gist_comment_id, options = {})","<p>Delete gist comment\n<p>Requires authenticated client.\n<p>@param gist_id [String] Id of the gist. @param gist_comment_id …\n"],["delete_impersonation_token","Octokit::EnterpriseAdminClient::Users","Octokit/EnterpriseAdminClient/Users.html#method-i-delete_impersonation_token","(login, options = {})","<p>Deletes an impersonation OAuth token.\n<p>@param login [String] The user whose token should be deleted. @see …\n"],["delete_installation","Octokit::Client::Apps","Octokit/Client/Apps.html#method-i-delete_installation","(installation, options = {})","<p>Delete an installation and uninstall a GitHub App\n<p>@param installation [Integer] The id of a GitHub App …\n"],["delete_key","Octokit::EnterpriseAdminClient::Users","Octokit/EnterpriseAdminClient/Users.html#method-i-delete_key","(id, options = {})","<p>Deletes a public SSH keys.\n<p>@param id [Number] The ID of the key to delete. @see developer.github.com/enterprise/v3/enterprise-admin/users/#delete-a-public-key …\n"],["delete_label!","Octokit::Client::Labels","Octokit/Client/Labels.html#method-i-delete_label-21","(repo, label, options = {})","<p>Delete a label from a repository.\n<p>This deletes the label from the repository, and removes it from all …\n"],["delete_migration_archive","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-delete_migration_archive","(org, id, options = {})","<p>Deletes a previous migration archive.\n<p>Requires authenticated organization owner.\n<p>@param org [String, Integer] …\n"],["delete_milestone","Octokit::Client::Milestones","Octokit/Client/Milestones.html#method-i-delete_milestone","(repository, number, options = {})","<p>Delete a single milestone for a repository\n<p>@param repository [Integer, String, Repository, Hash] A GitHub …\n"],["delete_project","Octokit::Client::Projects","Octokit/Client/Projects.html#method-i-delete_project","(id, options = {})","<p>Delete a project\n<p>Requires authenticated client\n<p>@param id [Integer] Project id @return [Boolean] Result …\n"],["delete_project_card","Octokit::Client::Projects","Octokit/Client/Projects.html#method-i-delete_project_card","(id, options = {})","<p>Delete a project card\n<p>Requires authenticated client\n<p>@param id [Integer] Project card id @return [Boolean] …\n"],["delete_project_column","Octokit::Client::Projects","Octokit/Client/Projects.html#method-i-delete_project_column","(id, options = {})","<p>Delete a project column\n<p>Requires authenticated client\n<p>@param id [Integer] Project column id @return [Boolean] …\n"],["delete_pull_comment","Octokit::Client::PullRequests","Octokit/Client/PullRequests.html#method-i-delete_pull_comment","(repo, comment_id, options = {})",""],["delete_pull_request_comment","Octokit::Client::PullRequests","Octokit/Client/PullRequests.html#method-i-delete_pull_request_comment","(repo, comment_id, options = {})","<p>Delete pull request comment\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository @param …\n"],["delete_pull_request_review","Octokit::Client::Reviews","Octokit/Client/Reviews.html#method-i-delete_pull_request_review","(repo, number, review, options = {})","<p>Delete a pending review\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository @param number …\n"],["delete_pull_request_review_request","Octokit::Client::Reviews","Octokit/Client/Reviews.html#method-i-delete_pull_request_review_request","(repo, id, reviewers={}, options = {})","<p>Delete a review request\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository @param id …\n"],["delete_reaction","Octokit::Client::Reactions","Octokit/Client/Reactions.html#method-i-delete_reaction","(id, options = {})","<p>Delete a reaction\n<p>@param id [Integer] Reaction id\n<p>@see developer.github.com/v3/reactions/#delete-a-reaction …\n"],["delete_ref","Octokit::Client::Refs","Octokit/Client/Refs.html#method-i-delete_ref","(repo, ref, options = {})","<p>Delete a single reference\n<p>@param repo [Integer, String, Repository, Hash] A GitHub repository @param ref …\n"],["delete_reference","Octokit::Client::Refs","Octokit/Client/Refs.html#method-i-delete_reference","(repo, ref, options = {})",""],["delete_release","Octokit::Client::Releases","Octokit/Client/Releases.html#method-i-delete_release","(url, options = {})","<p>Delete a release\n<p>@param url [String] URL for the release as returned from .releases @return [Boolean] …\n"],["delete_release_asset","Octokit::Client::Releases","Octokit/Client/Releases.html#method-i-delete_release_asset","(asset_url, options = {})","<p>Delete a release asset\n<p>@param asset_url [String] URL for the asset as returned from .release_assets @return …\n"],["delete_repo","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-delete_repo","(repo, options = {})",""],["delete_repo_invitation","Octokit::Client::RepositoryInvitations","Octokit/Client/RepositoryInvitations.html#method-i-delete_repo_invitation","(repo, invitation_id, options = {})",""],["delete_repository","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-delete_repository","(repo, options = {})","<p>Delete repository\n<p>Note: If OAuth is used, &#39;delete_repo&#39; scope is required\n<p>@see developer.github.com/v3/repos/#delete-a-repository …\n"],["delete_repository_invitation","Octokit::Client::RepositoryInvitations","Octokit/Client/RepositoryInvitations.html#method-i-delete_repository_invitation","(repo, invitation_id, options = {})","<p>Delete an invitation for a repository\n<p>Requires authenticated client\n<p>@param repo [Integer, String, Repository …\n"],["delete_review_comment","Octokit::Client::PullRequests","Octokit/Client/PullRequests.html#method-i-delete_review_comment","(repo, comment_id, options = {})",""],["delete_secret","Octokit::Client::ActionsSecrets","Octokit/Client/ActionsSecrets.html#method-i-delete_secret","(repo, name)","<p>Delete a secret\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository @param name [String] …\n"],["delete_subscription","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-delete_subscription","(repo, options = {})","<p>Delete a repository subscription\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository. …\n"],["delete_team","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-delete_team","(team_id, options = {})","<p>Delete team\n<p>Requires authenticated organization owner.\n<p>@param team_id [Integer] Team id. @return [Boolean] …\n"],["delete_thread_subscription","Octokit::Client::Notifications","Octokit/Client/Notifications.html#method-i-delete_thread_subscription","(thread_id, options = {})","<p>Delete a thread subscription\n<p>@param thread_id [Integer] Id of the thread. @return [Boolean] True if delete …\n"],["delete_user","Octokit::EnterpriseAdminClient::Users","Octokit/EnterpriseAdminClient/Users.html#method-i-delete_user","(username, options = {})","<p>Deletes a user.\n<p>@param username [String] The username to delete. @see developer.github.com/enterprise/v3/enterprise-admin/users/#delete-a-user …\n"],["delete_user_migration_archive","Octokit::Client::Users","Octokit/Client/Users.html#method-i-delete_user_migration_archive","(id, options = {})","<p>Deletes a previous migration archive.\n<p>Requires authenticated user.\n<p>@param id [Integer] ID number of the …\n"],["delete_workflow_run","Octokit::Client::ActionsWorkflowRuns","Octokit/Client/ActionsWorkflowRuns.html#method-i-delete_workflow_run","(repo, id, options = {})","<p>Deletes a workflow run\n<p>@param repo [Integer, String, Repository, Hash] A GitHub repository @param id [Integer] …\n"],["delete_workflow_run_logs","Octokit::Client::ActionsWorkflowRuns","Octokit/Client/ActionsWorkflowRuns.html#method-i-delete_workflow_run_logs","(repo, id, options = {})","<p>Delets all log files of a workflow run\n<p>@param repo [Integer, String, Repository, Hash] A GitHub repository …\n"],["delivery_method_from_header","Octokit::OneTimePasswordRequired","Octokit/OneTimePasswordRequired.html#method-i-delivery_method_from_header","()",""],["demote","Octokit::EnterpriseAdminClient::Users","Octokit/EnterpriseAdminClient/Users.html#method-i-demote","(user, options = {})","<p>Demote a site administrator to an ordinary user\n<p>@param user [String] Username of the user to demote. @return …\n"],["deploy_key","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-deploy_key","(repo, id, options={})","<p>Get a single deploy key for a repo\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository. …\n"],["deploy_keys","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-deploy_keys","(repo, options = {})","<p>Get deploy keys on a repo\n<p>Requires authenticated client.\n<p>@param repo [Integer, String, Hash, Repository] …\n"],["deployment","Octokit::Client::Deployments","Octokit/Client/Deployments.html#method-i-deployment","(repo, deployment_id, options = {})","<p>Fetch a single deployment for a repository\n<p>@param repo [Integer, String, Repository, Hash] A GitHub repository …\n"],["deployment_statuses","Octokit::Client::Deployments","Octokit/Client/Deployments.html#method-i-deployment_statuses","(deployment_url, options = {})","<p>List all statuses for a Deployment\n<p>@param deployment_url [String] A URL for a deployment resource @return …\n"],["deployments","Octokit::Client::Deployments","Octokit/Client/Deployments.html#method-i-deployments","(repo, options = {})","<p>List all deployments for a repository\n<p>@param repo [Integer, String, Repository, Hash] A GitHub repository …\n"],["disable_vulnerability_alerts","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-disable_vulnerability_alerts","(repo, options = {})","<p>Disable vulnerability alerts for a repository\n<p>@param repo [Integer, String, Hash, Repository] A GitHub …\n"],["dismiss_pull_request_review","Octokit::Client::Reviews","Octokit/Client/Reviews.html#method-i-dismiss_pull_request_review","(repo, number, review, message, options = {})","<p>Dismiss a pull request review\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository @param …\n"],["dispatch_event","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-dispatch_event","(repo, event_type, options = {})","<p>Create a repository dispatch event\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository. …\n"],["documentation_url","Octokit::Error","Octokit/Error.html#method-i-documentation_url","()","<p>Documentation URL returned by the API for some errors\n<p>@return [String]\n"],["download","Octokit::Client::Downloads","Octokit/Client/Downloads.html#method-i-download","(repo, id, options={})","<p>Get single download for a repository\n<p>@param repo [Integer, String, Repository, Hash] A GitHub repository …\n"],["downloads","Octokit::Client::Downloads","Octokit/Client/Downloads.html#method-i-downloads","(repo, options={})","<p>List available downloads for a repository\n<p>@param repo [Integer, String, Repository, Hash] A Github Repository …\n"],["edit","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-edit","(repo, options = {})",""],["edit_deploy_key","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-edit_deploy_key","(repo, id, options)","<p>Edit a deploy key\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository. @param id [Integer] …\n"],["edit_gist","Octokit::Client::Gists","Octokit/Client/Gists.html#method-i-edit_gist","(gist, options = {})","<p>Edit a gist\n<p>@param options [Hash] Gist information. @option options [String] :description @option options …\n"],["edit_hook","Octokit::Client::Hooks","Octokit/Client/Hooks.html#method-i-edit_hook","(repo, id, name, config, options = {})","<p>Edit a hook\n<p>Requires authenticated client.\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository. …\n"],["edit_maintenance_status","Octokit::EnterpriseManagementConsoleClient::ManagementConsole","Octokit/EnterpriseManagementConsoleClient/ManagementConsole.html#method-i-edit_maintenance_status","(maintenance)",""],["edit_milestone","Octokit::Client::Milestones","Octokit/Client/Milestones.html#method-i-edit_milestone","(repository, number, options = {})",""],["edit_org_hook","Octokit::Client::Hooks","Octokit/Client/Hooks.html#method-i-edit_org_hook","(org, id, config, options = {})","<p>Update an org hook\n<p>Requires client authenticated as admin for the org.\n<p>@param org [String, Integer] Organization …\n"],["edit_release","Octokit::Client::Releases","Octokit/Client/Releases.html#method-i-edit_release","(url, options = {})",""],["edit_release_asset","Octokit::Client::Releases","Octokit/Client/Releases.html#method-i-edit_release_asset","(asset_url, options = {})",""],["edit_repository","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-edit_repository","(repo, options = {})","<p>Edit a repository\n<p>@see developer.github.com/v3/repos/#update-a-repository @param repo [String, Hash, Repository] …\n"],["edit_settings","Octokit::EnterpriseManagementConsoleClient::ManagementConsole","Octokit/EnterpriseManagementConsoleClient/ManagementConsole.html#method-i-edit_settings","(settings)","<p>Modify the Enterprise settings\n<p>@param settings [Hash] A hash configuration of the new settings\n<p>@return …\n"],["emails","Octokit::Client::Users","Octokit/Client/Users.html#method-i-emails","(options = {})","<p>List email addresses for a user.\n<p>Requires authenticated client.\n<p>@return [Array&lt;String&gt;] Array of …\n"],["emojis","Octokit::Client::Emojis","Octokit/Client/Emojis.html#method-i-emojis","(options = {})","<p>List all emojis used on GitHub\n<p>@return [Sawyer::Resource] A list of all emojis on GitHub @see developer.github.com/v3/emojis/#emojis …\n"],["enable_vulnerability_alerts","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-enable_vulnerability_alerts","(repo, options = {})","<p>Enable vulnerability alerts for a repository\n<p>@param repo [Integer, String, Hash, Repository] A GitHub …\n"],["endpoint","Octokit::Connection","Octokit/Connection.html#method-i-endpoint","()",""],["endpoint","Octokit::EnterpriseManagementConsoleClient","Octokit/EnterpriseManagementConsoleClient.html#method-i-endpoint","()",""],["ensure_api_media_type","Octokit::Preview","Octokit/Preview.html#method-i-ensure_api_media_type","(type, options)",""],["enterprise_admin_client","Octokit","Octokit.html#method-c-enterprise_admin_client","()","<p>EnterpriseAdminClient client based on configured options {Configurable}\n<p>@return [Octokit::EnterpriseAdminClient] …\n"],["enterprise_management_console_client","Octokit","Octokit.html#method-c-enterprise_management_console_client","()","<p>EnterpriseManagementConsoleClient client based on configured options {Configurable}\n<p>@return [Octokit::EnterpriseManagementConsoleClient] …\n"],["error_for_401","Octokit::Error","Octokit/Error.html#method-c-error_for_401","(headers)","<p>Returns most appropriate error for 401 HTTP status code @private\n"],["error_for_403","Octokit::Error","Octokit/Error.html#method-c-error_for_403","(body)","<p>Returns most appropriate error for 403 HTTP status code @private\n"],["error_for_404","Octokit::Error","Octokit/Error.html#method-c-error_for_404","(body)","<p>Return most appropriate error for 404 HTTP status code @private\n"],["error_for_422","Octokit::Error","Octokit/Error.html#method-c-error_for_422","(body)","<p>Return most appropriate error for 422 HTTP status code @private\n"],["errors","Octokit::Error","Octokit/Error.html#method-i-errors","()","<p>Array of validation errors @return [Array&lt;Hash&gt;] Error info\n"],["exchange_code_for_token","Octokit::Client::Users","Octokit/Client/Users.html#method-i-exchange_code_for_token","(code, app_id = client_id, app_secret = client_secret, options = {})","<p>Retrieve the access_token.\n<p>@param code [String] Authorization code generated by GitHub. @param app_id …\n"],["faraday_configuration","Octokit::EnterpriseManagementConsoleClient","Octokit/EnterpriseManagementConsoleClient.html#method-i-faraday_configuration","()","<p>We fall back to raw Faraday for handling the licenses because I&#39;m suspicious that Sawyer isn&#39;t …\n"],["feed","Octokit::Client::Feeds","Octokit/Client/Feeds.html#method-i-feed","(name, options = {})","<p>Get a Feed by name\n<p>@param name [Symbol, String] Name of feed to retrieve. @return [Feed] Parsed feed in …\n"],["feeds","Octokit::Client::Feeds","Octokit/Client/Feeds.html#method-i-feeds","()","<p>List Feeds\n<p>The feeds returned depend on authentication, see the GitHub API docs for more information. …\n"],["fetch_client_id_and_secret","Octokit::Configurable","Octokit/Configurable.html#method-i-fetch_client_id_and_secret","(overrides = {})",""],["find_app_installations","Octokit::Client::Apps","Octokit/Client/Apps.html#method-i-find_app_installations","(options = {})","<p>Find all installations that belong to an App\n<p>@param options [Hash] A customizable set of options\n<p>@see  …\n"],["find_installation_repositories_for_user","Octokit::Client::Apps","Octokit/Client/Apps.html#method-i-find_installation_repositories_for_user","(installation, options = {})","<p>List repositories accessible to the user for an installation\n<p>@param installation [Integer] The id of a …\n"],["find_installations","Octokit::Client::Apps","Octokit/Client/Apps.html#method-i-find_installations","(options = {})",""],["find_integration_installations","Octokit::Client::Apps","Octokit/Client/Apps.html#method-i-find_integration_installations","(options = {})",""],["find_organization_installation","Octokit::Client::Apps","Octokit/Client/Apps.html#method-i-find_organization_installation","(organization, options = {})","<p>Enables an app to find the organization&#39;s installation information.\n<p>@param organization [String]  …\n"],["find_repository_installation","Octokit::Client::Apps","Octokit/Client/Apps.html#method-i-find_repository_installation","(repo, options = {})","<p>Enables an app to find the repository&#39;s installation information.\n<p>@param repo [String] A GitHub repository …\n"],["find_user_installation","Octokit::Client::Apps","Octokit/Client/Apps.html#method-i-find_user_installation","(user, options = {})","<p>Enables an app to find the user&#39;s installation information.\n<p>@param user [String] GitHub user login …\n"],["find_user_installations","Octokit::Client::Apps","Octokit/Client/Apps.html#method-i-find_user_installations","(options = {})","<p>Find all installations that are accessible to the authenticated user\n<p>@param options [Hash] A customizable …\n"],["follow","Octokit::Client::Users","Octokit/Client/Users.html#method-i-follow","(user, options = {})","<p>Follow a user.\n<p>Requires authenticatied client.\n<p>@param user [String] Username of the user to follow. @return …\n"],["follow_limit","Octokit::Middleware::FollowRedirects","Octokit/Middleware/FollowRedirects.html#method-i-follow_limit","()",""],["follow_redirect?","Octokit::Middleware::FollowRedirects","Octokit/Middleware/FollowRedirects.html#method-i-follow_redirect-3F","(env, response)",""],["followers","Octokit::Client::Users","Octokit/Client/Users.html#method-i-followers","(user=login, options = {})","<p>Get a user&#39;s followers.\n<p>@param user [Integer, String] GitHub user login or id of the user whose\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">list</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["following","Octokit::Client::Users","Octokit/Client/Users.html#method-i-following","(user=login, options = {})","<p>Get list of users a user is following.\n<p>@param user [Intger, String] GitHub user login or id of the user …\n"],["follows?","Octokit::Client::Users","Octokit/Client/Users.html#method-i-follows-3F","(*args)","<p>Check if you are following a user. Alternatively, check if a given user is following a target user.\n<p>Requries …\n"],["fork","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-fork","(repo, options = {})","<p>Fork a repository\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository @return [Sawyer::Resource] …\n"],["fork_gist","Octokit::Client::Gists","Octokit/Client/Gists.html#method-i-fork_gist","(gist, options = {})","<p>Fork a gist\n<p>@param gist [String] Gist ID @return [Sawyer::Resource] Data for the new gist @see developer.github.com/v3/gists/#fork-a-gist …\n"],["forks","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-forks","(repo, options = {})","<p>List forks\n<p>Requires authenticated client for private repos.\n<p>@param repo [Integer, String, Hash, Repository] …\n"],["from_response","Octokit::Error","Octokit/Error.html#method-c-from_response","(response)","<p>Returns the appropriate Octokit::Error subclass based on status and response message\n<p>@param [Hash] response …\n"],["from_response","Octokit::RateLimit","Octokit/RateLimit.html#method-c-from_response","(response)","<p>Get rate limit info from HTTP response\n<p>@param response [#headers] HTTP response @return [RateLimit]\n"],["from_url","Octokit::Gist","Octokit/Gist.html#method-c-from_url","(url)","<p>Instantiate {Gist} object from Gist URL @ return [Gist]\n"],["from_url","Octokit::Repository","Octokit/Repository.html#method-c-from_url","(url)","<p>Instantiate from a GitHub repository URL\n<p>@return [Repository]\n"],["get","Octokit::Connection","Octokit/Connection.html#method-i-get","(url, options = {})","<p>Make a HTTP GET request\n<p>@param url [String] The path, relative to {#api_endpoint} @param options [Hash] …\n"],["get_admin_stats","Octokit::EnterpriseAdminClient::AdminStats","Octokit/EnterpriseAdminClient/AdminStats.html#method-i-get_admin_stats","(metric)","<p>@private Get enterprise stats\n<p>@param metric [String] The metrics you are looking for @return [Sawyer::Resource] …\n"],["get_authorized_keys","Octokit::EnterpriseManagementConsoleClient::ManagementConsole","Octokit/EnterpriseManagementConsoleClient/ManagementConsole.html#method-i-get_authorized_keys","()",""],["get_branch","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-get_branch","(repo, branch, options = {})",""],["get_maintenance_status","Octokit::EnterpriseManagementConsoleClient::ManagementConsole","Octokit/EnterpriseManagementConsoleClient/ManagementConsole.html#method-i-get_maintenance_status","()",""],["get_public_key","Octokit::Client::ActionsSecrets","Octokit/Client/ActionsSecrets.html#method-i-get_public_key","(repo)","<p>Get public key for secrets encryption\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository …\n"],["get_secret","Octokit::Client::ActionsSecrets","Octokit/Client/ActionsSecrets.html#method-i-get_secret","(repo, name)","<p>Get a secret\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository @param name [String] …\n"],["get_settings","Octokit::EnterpriseManagementConsoleClient::ManagementConsole","Octokit/EnterpriseManagementConsoleClient/ManagementConsole.html#method-i-get_settings","()",""],["get_stats","Octokit::Client::Stats","Octokit/Client/Stats.html#method-i-get_stats","(repo, metric, options = {})","<p>@private Get stats for a repository\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository …\n"],["gist","Octokit::Client::Gists","Octokit/Client/Gists.html#method-i-gist","(gist, options = {})","<p>Get a single gist\n<p>@param gist [String] ID of gist to fetch @option options [String] :sha Specific gist …\n"],["gist_comment","Octokit::Client::Gists","Octokit/Client/Gists.html#method-i-gist_comment","(gist_id, gist_comment_id, options = {})","<p>Get gist comment\n<p>@param gist_id [String] Id of the gist. @param gist_comment_id [Integer] Id of the gist …\n"],["gist_comments","Octokit::Client::Gists","Octokit/Client/Gists.html#method-i-gist_comments","(gist_id, options = {})","<p>List gist comments\n<p>@param gist_id [String] Gist Id. @return [Array&lt;Sawyer::Resource&gt;] Array of hashes …\n"],["gist_commits","Octokit::Client::Gists","Octokit/Client/Gists.html#method-i-gist_commits","(gist, options = {})","<p>List gist commits\n<p>@param gist [String] Gist ID @return [Array] List of commits to the gist @see developer.github.com/v3/gists/#list-gist-commits …\n"],["gist_forks","Octokit::Client::Gists","Octokit/Client/Gists.html#method-i-gist_forks","(gist, options = {})","<p>List gist forks\n<p>@param gist [String] Gist ID @return [Array] List of gist forks @see developer.github.com/v3/gists/#list-gist-forks …\n"],["gist_starred?","Octokit::Client::Gists","Octokit/Client/Gists.html#method-i-gist_starred-3F","(gist, options = {})","<p>Check if a gist is starred\n<p>@param gist [String] Gist ID @return [Boolean] Indicates if gist is starred …\n"],["gists","Octokit::Client::Gists","Octokit/Client/Gists.html#method-i-gists","(user=nil, options = {})","<p>List gists for a user or all public gists\n<p>@param user [String] An optional user to filter listing @return …\n"],["git_commit","Octokit::Client::Commits","Octokit/Client/Commits.html#method-i-git_commit","(repo, sha, options = {})","<p>Get a detailed git commit\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository @param sha …\n"],["github_meta","Octokit::Client::Meta","Octokit/Client/Meta.html#method-i-github_meta","(options = {})",""],["github_status","Octokit::Client::ServiceStatus","Octokit/Client/ServiceStatus.html#method-i-github_status","()","<p>Returns the current system status\n<p>@return [Sawyer::Resource] GitHub status @see status.github.com/api#api-current-status …\n"],["github_status_last_message","Octokit::Client::ServiceStatus","Octokit/Client/ServiceStatus.html#method-i-github_status_last_message","()","<p>Returns the last human communication, status, and timestamp.\n<p>@return [Sawyer::Resource] GitHub status …\n"],["github_status_messages","Octokit::Client::ServiceStatus","Octokit/Client/ServiceStatus.html#method-i-github_status_messages","()","<p>Returns the most recent human communications with status and timestamp.\n<p>@return [Array&lt;Sawyer::Resource&gt;] …\n"],["gitignore_template","Octokit::Client::Gitignore","Octokit/Client/Gitignore.html#method-i-gitignore_template","(template_name, options = {})","<p>Get a gitignore template.\n<p>Use the raw {developer.github.com/v3/media/ media type} to get the raw contents. …\n"],["gitignore_templates","Octokit::Client::Gitignore","Octokit/Client/Gitignore.html#method-i-gitignore_templates","(options = {})","<p>Listing available gitignore templates.\n<p>These templates can be passed option when creating a repository. …\n"],["head","Octokit::Connection","Octokit/Connection.html#method-i-head","(url, options = {})","<p>Make a HTTP HEAD request\n<p>@param url [String] The path, relative to {#api_endpoint} @param options [Hash] …\n"],["hook","Octokit::Client::Hooks","Octokit/Client/Hooks.html#method-i-hook","(repo, id, options = {})","<p>Get single hook\n<p>Requires authenticated client.\n<p>@param repo [Integer, String, Hash, Repository] A GitHub …\n"],["hooks","Octokit::Client::Hooks","Octokit/Client/Hooks.html#method-i-hooks","(repo, options = {})","<p>List repo hooks\n<p>Requires authenticated client.\n<p>@param repo [Integer, String, Hash, Repository] A GitHub …\n"],["href","Object","Object.html#method-i-href","(options=nil)",""],["id_api_path","Octokit::Repository","Octokit/Repository.html#method-i-id_api_path","()","<p>@return [String] Api path for id identified repos\n"],["index_organization","Octokit::EnterpriseAdminClient::SearchIndexing","Octokit/EnterpriseAdminClient/SearchIndexing.html#method-i-index_organization","(user)",""],["index_organizations_repositories","Octokit::EnterpriseAdminClient::SearchIndexing","Octokit/EnterpriseAdminClient/SearchIndexing.html#method-i-index_organizations_repositories","(user)",""],["index_organizations_repositories_code","Octokit::EnterpriseAdminClient::SearchIndexing","Octokit/EnterpriseAdminClient/SearchIndexing.html#method-i-index_organizations_repositories_code","(user)",""],["index_organizations_repositories_issues","Octokit::EnterpriseAdminClient::SearchIndexing","Octokit/EnterpriseAdminClient/SearchIndexing.html#method-i-index_organizations_repositories_issues","(user)",""],["index_repository","Octokit::EnterpriseAdminClient::SearchIndexing","Octokit/EnterpriseAdminClient/SearchIndexing.html#method-i-index_repository","(repo)","<p>Queue a Repository to be indexed\n<p>@param repo [String, Hash, Repository] A GitHub repository @return [Sawyer:Resource] …\n"],["index_repository_code","Octokit::EnterpriseAdminClient::SearchIndexing","Octokit/EnterpriseAdminClient/SearchIndexing.html#method-i-index_repository_code","(repo)","<p>Queue a repository&#39;s code to be indexed\n<p>@param repo [String, Hash, Repository] A GitHub repository …\n"],["index_repository_issues","Octokit::EnterpriseAdminClient::SearchIndexing","Octokit/EnterpriseAdminClient/SearchIndexing.html#method-i-index_repository_issues","(repo)","<p>Queue a repository&#39;s Issues to be indexed\n<p>@param repo [String, Hash, Repository] A GitHub repository …\n"],["index_user","Octokit::EnterpriseAdminClient::SearchIndexing","Octokit/EnterpriseAdminClient/SearchIndexing.html#method-i-index_user","(user)","<p>Queue a User or Organization to be indexed\n<p>@param user [String] A GitHub Enterprise user or organization …\n"],["index_users_repositories","Octokit::EnterpriseAdminClient::SearchIndexing","Octokit/EnterpriseAdminClient/SearchIndexing.html#method-i-index_users_repositories","(user)","<p>Queue a user&#39;s or organization&#39;s repositories to be indexed\n<p>@param user [String] A GitHub Enterprise …\n"],["index_users_repositories_code","Octokit::EnterpriseAdminClient::SearchIndexing","Octokit/EnterpriseAdminClient/SearchIndexing.html#method-i-index_users_repositories_code","(user)","<p>Queue an index of all the code contained in all of a user&#39;s or organization&#39;s repositories\n<p>@param …\n"],["index_users_repositories_issues","Octokit::EnterpriseAdminClient::SearchIndexing","Octokit/EnterpriseAdminClient/SearchIndexing.html#method-i-index_users_repositories_issues","(user)","<p>Queue an index of all the issues across all of a user&#39;s or organization&#39;s repositories\n<p>@param …\n"],["inspect","Octokit::Client","Octokit/Client.html#method-i-inspect","()","<p>Text representation of the client, masking tokens and passwords\n<p>@return [String]\n"],["installation","Octokit::Client::Apps","Octokit/Client/Apps.html#method-i-installation","(id, options = {})","<p>Get a single installation\n<p>@param id [Integer] Installation id\n<p>@see developer.github.com/v3/apps/#get-an-installation …\n"],["invite_user_to_repo","Octokit::Client::RepositoryInvitations","Octokit/Client/RepositoryInvitations.html#method-i-invite_user_to_repo","(repo, user, options = {})",""],["invite_user_to_repository","Octokit::Client::RepositoryInvitations","Octokit/Client/RepositoryInvitations.html#method-i-invite_user_to_repository","(repo, user, options = {})","<p>Invite a user to a repository\n<p>Requires authenticated client\n<p>@param repo [Integer, String, Hash, Repository] …\n"],["iso8601","Octokit::Client::Commits","Octokit/Client/Commits.html#method-i-iso8601","(date)",""],["issue","Octokit::Client::Issues","Octokit/Client/Issues.html#method-i-issue","(repo, number, options = {})","<p>Get a single issue from a repository\n<p>@param repo [Integer, String, Repository, Hash] A GitHub repository …\n"],["issue_comment","Octokit::Client::Issues","Octokit/Client/Issues.html#method-i-issue_comment","(repo, number, options = {})","<p>Get a single comment attached to an issue\n<p>@param repo [Integer, String, Repository, Hash] A GitHub repository …\n"],["issue_comment_reactions","Octokit::Client::Reactions","Octokit/Client/Reactions.html#method-i-issue_comment_reactions","(repo, id, options = {})","<p>List reactions for an issue comment\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository …\n"],["issue_comments","Octokit::Client::Issues","Octokit/Client/Issues.html#method-i-issue_comments","(repo, number, options = {})","<p>Get all comments attached to an issue\n<p>@param repo [Integer, String, Repository, Hash] A GitHub repository …\n"],["issue_event","Octokit::Client::Events","Octokit/Client/Events.html#method-i-issue_event","(repo, number, options = {})","<p>Get information on a single Issue Event\n<p>@param repo [Integer, String, Repository, Hash] A GitHub repository …\n"],["issue_events","Octokit::Client::Events","Octokit/Client/Events.html#method-i-issue_events","(repo, number, options = {})","<p>List events for an Issue\n<p>@param repo [Integer, String, Repository, Hash] A GitHub repository @param number …\n"],["issue_reactions","Octokit::Client::Reactions","Octokit/Client/Reactions.html#method-i-issue_reactions","(repo, number, options = {})","<p>List reactions for an issue\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository @param …\n"],["issue_timeline","Octokit::Client::Issues","Octokit/Client/Issues.html#method-i-issue_timeline","(repo, number, options = {})","<p>Get the timeline for an issue\n<p>@param repo [Integer, String, Repository, Hash] A GitHub repository @param …\n"],["issues","Octokit::Client::Issues","Octokit/Client/Issues.html#method-i-issues","(repository = nil, options = {})",""],["issues_comments","Octokit::Client::Issues","Octokit/Client/Issues.html#method-i-issues_comments","(repo, options = {})","<p>Get all comments attached to issues for the repository\n<p>By default, Issue Comments are ordered by ascending …\n"],["key","Octokit::Client::Users","Octokit/Client/Users.html#method-i-key","(key_id, options = {})","<p>Get a public key.\n<p>Note, when using dot notation to retrieve the values, ruby will return the hash key …\n"],["keys","Octokit::Client::Users","Octokit/Client/Users.html#method-i-keys","(options = {})","<p>Get list of public keys for user.\n<p>Requires authenticated client.\n<p>@return [Array&lt;Sawyer::Resource&gt;] …\n"],["keys","Octokit::Configurable","Octokit/Configurable.html#method-c-keys","()","<p>List of configurable keys for {Octokit::Client} @return [Array] of option keys\n"],["label","Octokit::Client::Labels","Octokit/Client/Labels.html#method-i-label","(repo, name, options = {})","<p>Get single label for a repository\n<p>@param repo [Integer, String, Repository, Hash] A GitHub repository …\n"],["labels","Octokit::Client::Labels","Octokit/Client/Labels.html#method-i-labels","(repo, options = {})","<p>List available labels for a repository\n<p>@param repo [Integer, String, Repository, Hash] A GitHub repository …\n"],["labels_for_issue","Octokit::Client::Labels","Octokit/Client/Labels.html#method-i-labels_for_issue","(repo, number, options = {})","<p>List labels for a given issue\n<p>@param repo [Integer, String, Repository, Hash] A GitHub repository @param …\n"],["labels_for_milestone","Octokit::Client::Labels","Octokit/Client/Labels.html#method-i-labels_for_milestone","(repo, number, options = {})","<p>Get labels for every issue in a milestone\n<p>@param repo [Integer, String, Repository, Hash] A GitHub repository …\n"],["languages","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-languages","(repo, options = {})","<p>List languages of code in the repo.\n<p>Requires authenticated client for private repos.\n<p>@param repo [Integer, …\n"],["last_response","Octokit::Connection","Octokit/Connection.html#method-i-last_response","()","<p>Response for last HTTP request\n<p>@return [Sawyer::Response]\n"],["latest_pages_build","Octokit::Client::Pages","Octokit/Client/Pages.html#method-i-latest_pages_build","(repo, options = {})","<p>List the latest Pages build information for a repository\n<p>@param repo [Integer, String, Repository, Hash] …\n"],["latest_release","Octokit::Client::Releases","Octokit/Client/Releases.html#method-i-latest_release","(repo, options = {})","<p>Get the latest release\n<p>@param repo [Integer, String, Repository, Hash] A GitHub repository @return [Sawyer::Resource] …\n"],["legacy_search_issues","Octokit::Client::LegacySearch","Octokit/Client/LegacySearch.html#method-i-legacy_search_issues","(repo, search_term, state='open', options = {})","<p>Legacy search issues within a repository\n<p>@param repo [String, Repository, Hash] A GitHub repository @param …\n"],["legacy_search_repositories","Octokit::Client::LegacySearch","Octokit/Client/LegacySearch.html#method-i-legacy_search_repositories","(q, options = {})","<p>Legacy repository search\n<p>@see developer.github.com/v3/search/#search-repositories @param q [String] Search …\n"],["legacy_search_users","Octokit::Client::LegacySearch","Octokit/Client/LegacySearch.html#method-i-legacy_search_users","(search, options = {})","<p>Search for user.\n<p>@param search [String] User to search for. @return [Array&lt;Sawyer::Resource&gt;] Array …\n"],["license","Octokit::Client::Licenses","Octokit/Client/Licenses.html#method-i-license","(license_name, options = {})","<p>List an individual license\n<p>@see developer.github.com/v3/licenses/#get-an-individual-license @param license_name …\n"],["license_info","Octokit::EnterpriseAdminClient::License","Octokit/EnterpriseAdminClient/License.html#method-i-license_info","()","<p>Get information about the Enterprise license\n<p>@return [Sawyer::Resource] The license information\n"],["licenses","Octokit::Client::Licenses","Octokit/Client/Licenses.html#method-i-licenses","(options = {})","<p>List all licenses\n<p>@see developer.github.com/v3/licenses/#list-all-licenses @return [Array&lt;Sawyer::Resource&gt;] …\n"],["list_accounts_for_plan","Octokit::Client::Marketplace","Octokit/Client/Marketplace.html#method-i-list_accounts_for_plan","(plan_id, options = {})","<p>List all GitHub accounts on a specific plan\n<p>@param plan_id [Integer] The id of the GitHub plan @param …\n"],["list_all_keys","Octokit::EnterpriseAdminClient::Users","Octokit/EnterpriseAdminClient/Users.html#method-i-list_all_keys","(options = {})","<p>Lists all the public SSH keys.\n<p>@see developer.github.com/enterprise/v3/enterprise-admin/users/#list-all-public-keys …\n"],["list_app_installation_repositories","Octokit::Client::Apps","Octokit/Client/Apps.html#method-i-list_app_installation_repositories","(options = {})","<p>List repositories that are accessible to the authenticated installation\n<p>@param options [Hash] A customizable …\n"],["list_assignees","Octokit::Client::Issues","Octokit/Client/Issues.html#method-i-list_assignees","(repo, options = {})","<p>Lists the available assignees for issues in a repository.\n<p>@param repo [Integer, String, Repository, Hash] …\n"],["list_check_runs_for_check_suite","Octokit::Client::Checks","Octokit/Client/Checks.html#method-i-list_check_runs_for_check_suite","(repo, id, options = {})",""],["list_check_runs_for_ref","Octokit::Client::Checks","Octokit/Client/Checks.html#method-i-list_check_runs_for_ref","(repo, ref, options = {})",""],["list_check_suites_for_ref","Octokit::Client::Checks","Octokit/Client/Checks.html#method-i-list_check_suites_for_ref","(repo, ref, options = {})",""],["list_commit_comments","Octokit::Client::CommitComments","Octokit/Client/CommitComments.html#method-i-list_commit_comments","(repo, options = {})","<p>List all commit comments\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository @return [Array] …\n"],["list_commits","Octokit::Client::Commits","Octokit/Client/Commits.html#method-i-list_commits","(*args)",""],["list_deploy_keys","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-list_deploy_keys","(repo, options = {})",""],["list_deployment_statuses","Octokit::Client::Deployments","Octokit/Client/Deployments.html#method-i-list_deployment_statuses","(deployment_url, options = {})",""],["list_deployments","Octokit::Client::Deployments","Octokit/Client/Deployments.html#method-i-list_deployments","(repo, options = {})",""],["list_downloads","Octokit::Client::Downloads","Octokit/Client/Downloads.html#method-i-list_downloads","(repo, options={})",""],["list_gists","Octokit::Client::Gists","Octokit/Client/Gists.html#method-i-list_gists","(user=nil, options = {})",""],["list_installation_repos","Octokit::Client::Apps","Octokit/Client/Apps.html#method-i-list_installation_repos","(options = {})",""],["list_integration_installation_repositories","Octokit::Client::Apps","Octokit/Client/Apps.html#method-i-list_integration_installation_repositories","(options = {})",""],["list_issues","Octokit::Client::Issues","Octokit/Client/Issues.html#method-i-list_issues","(repository = nil, options = {})","<p>List issues for the authenticated user or repository\n<p>@param repository [Integer, String, Repository, Hash] …\n"],["list_milestones","Octokit::Client::Milestones","Octokit/Client/Milestones.html#method-i-list_milestones","(repository, options = {})","<p>List milestones for a repository\n<p>@param repository [Integer, String, Repository, Hash] A GitHub repository …\n"],["list_org_hooks","Octokit::Client::Hooks","Octokit/Client/Hooks.html#method-i-list_org_hooks","(org, options = {})",""],["list_organizations","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-list_organizations","(user=nil, options = {})",""],["list_orgs","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-list_orgs","(user=nil, options = {})",""],["list_pages_builds","Octokit::Client::Pages","Octokit/Client/Pages.html#method-i-list_pages_builds","(repo, options = {})",""],["list_plans","Octokit::Client::Marketplace","Octokit/Client/Marketplace.html#method-i-list_plans","(options = {})","<p>List all plans for an app&#39;s marketplace listing\n<p>@param options [Hash] A customizable set of options …\n"],["list_references","Octokit::Client::Refs","Octokit/Client/Refs.html#method-i-list_references","(repo, namespace = nil, options = {})",""],["list_refs","Octokit::Client::Refs","Octokit/Client/Refs.html#method-i-list_refs","(repo, namespace = nil, options = {})",""],["list_releases","Octokit::Client::Releases","Octokit/Client/Releases.html#method-i-list_releases","(repo, options = {})",""],["list_repos","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-list_repos","(user=nil, options = {})",""],["list_repositories","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-list_repositories","(user=nil, options = {})",""],["list_repository_workflow_runs","Octokit::Client::ActionsWorkflowRuns","Octokit/Client/ActionsWorkflowRuns.html#method-i-list_repository_workflow_runs","(repo, options = {})",""],["list_secrets","Octokit::Client::ActionsSecrets","Octokit/Client/ActionsSecrets.html#method-i-list_secrets","(repo)","<p>List secrets\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository @return [Hash] total_count …\n"],["list_statuses","Octokit::Client::Statuses","Octokit/Client/Statuses.html#method-i-list_statuses","(repo, sha, options = {})",""],["list_workflow_runs","Octokit::Client::ActionsWorkflowRuns","Octokit/Client/ActionsWorkflowRuns.html#method-i-list_workflow_runs","(repo, workflow, options = {})",""],["list_workflows","Octokit::Client::ActionsWorkflows","Octokit/Client/ActionsWorkflows.html#method-i-list_workflows","(repo, options = {})",""],["lock_issue","Octokit::Client::Issues","Octokit/Client/Issues.html#method-i-lock_issue","(repo, number, options = {})","<p>Lock an issue&#39;s conversation, limiting it to collaborators\n<p>@param repo [Integer, String, Repository …\n"],["login","Octokit::Configurable","Octokit/Configurable.html#method-i-login","()",""],["login","Octokit::Default","Octokit/Default.html#method-c-login","()","<p>Default GitHub username for Basic Auth from ENV @return [String]\n"],["login=","Octokit::Client","Octokit/Client.html#method-i-login-3D","(value)","<p>Set username for authentication\n<p>@param value [String] GitHub username\n"],["login_from_netrc","Octokit::Authentication","Octokit/Authentication.html#method-i-login_from_netrc","()",""],["maintenance_status","Octokit::EnterpriseManagementConsoleClient::ManagementConsole","Octokit/EnterpriseManagementConsoleClient/ManagementConsole.html#method-i-maintenance_status","()","<p>Get information about the Enterprise maintenance status\n<p>@return [Sawyer::Resource] The maintenance status …\n"],["management_console_endpoint","Octokit::Configurable","Octokit/Configurable.html#method-i-management_console_endpoint","()",""],["management_console_endpoint","Octokit::Default","Octokit/Default.html#method-c-management_console_endpoint","()","<p>Default management console endpoint from ENV @return [String]\n"],["management_console_endpoint=","Octokit::EnterpriseManagementConsoleClient","Octokit/EnterpriseManagementConsoleClient.html#method-i-management_console_endpoint-3D","(value)","<p>Set Enterprise Management Console endpoint\n<p>@param value [String] Management console endpoint\n"],["management_console_password","Octokit::Default","Octokit/Default.html#method-c-management_console_password","()","<p>Default management console password from ENV @return [String]\n"],["management_console_password=","Octokit::EnterpriseManagementConsoleClient","Octokit/EnterpriseManagementConsoleClient.html#method-i-management_console_password-3D","(value)","<p>Set Enterprise Management Console password\n<p>@param value [String] Management console admin password\n"],["map_source_import_commit_author","Octokit::Client::SourceImport","Octokit/Client/SourceImport.html#method-i-map_source_import_commit_author","(author_url, values, options = {})","<p>Update an author&#39;s identity for the import.\n<p>@param author_url [String] The source import API url for …\n"],["mark_notifications_as_read","Octokit::Client::Notifications","Octokit/Client/Notifications.html#method-i-mark_notifications_as_read","(options = {})","<p>Mark notifications as read\n<p>@param options [Hash] Optional parameters @option options [Boolean] :unread …\n"],["mark_repo_notifications_as_read","Octokit::Client::Notifications","Octokit/Client/Notifications.html#method-i-mark_repo_notifications_as_read","(repo, options = {})",""],["mark_repository_notifications_as_read","Octokit::Client::Notifications","Octokit/Client/Notifications.html#method-i-mark_repository_notifications_as_read","(repo, options = {})","<p>Mark notifications from a specific repository as read\n<p>@param repo [Integer, String, Hash, Repository] …\n"],["mark_thread_as_read","Octokit::Client::Notifications","Octokit/Client/Notifications.html#method-i-mark_thread_as_read","(thread_id, options = {})","<p>Mark thread as read\n<p>@param thread_id [Integer] Id of the thread to update. @return [Boolean] True if updated, …\n"],["markdown","Octokit::Client::Markdown","Octokit/Client/Markdown.html#method-i-markdown","(text, options = {})","<p>Render an arbitrary Markdown document\n<p>@param text [String] Markdown source @option options [String] (optional) …\n"],["marketplace_purchases","Octokit::Client::Marketplace","Octokit/Client/Marketplace.html#method-i-marketplace_purchases","(options = {})","<p>Get user&#39;s Marketplace purchases\n<p>@param options [Hash] A customizable set of options\n<p>@see developer.github.com/v3/apps/marketplace/#get-a-users-marketplace-purchases …\n"],["matching_refs","Octokit::Client::Refs","Octokit/Client/Refs.html#method-i-matching_refs","(repo, ref, options = {})","<p>Fetch matching refs\n<p>@param repo [Integer, String, Repository, Hash] A GitHub repository @param ref [String] …\n"],["merge","Octokit::Client::Commits","Octokit/Client/Commits.html#method-i-merge","(repo, base, head, options = {})","<p>Merge a branch or sha\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository @param base …\n"],["merge_pull_request","Octokit::Client::PullRequests","Octokit/Client/PullRequests.html#method-i-merge_pull_request","(repo, number, commit_message='', options = {})","<p>Merge a pull request\n<p>@see developer.github.com/v3/pulls/#merge-a-pull-request-merge-button @param repo …\n"],["meta","Octokit::Client::Meta","Octokit/Client/Meta.html#method-i-meta","(options = {})","<p>Get meta information about GitHub.com, the service. @see developer.github.com/v3/meta/#meta @return [Sawyer::Resource] …\n"],["method_missing","Octokit","Octokit.html#method-c-method_missing","(method_name, *args, &block)",""],["middleware","Octokit::Default","Octokit/Default.html#method-c-middleware","()","<p>Default middleware stack for Faraday::Connection from {MIDDLEWARE} @return [Faraday::RackBuilder or Faraday::Builder] …\n"],["migration_archive_url","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-migration_archive_url","(org, id, options = {})","<p>Fetches the URL to a migration archive.\n<p>Requires authenticated organization owner.\n<p>@param org [String, …\n"],["migration_status","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-migration_status","(org, id, options = {})","<p>Fetches the status of a migration.\n<p>Requires authenticated organization owner.\n<p>@param org [String, Integer] …\n"],["migrations","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-migrations","(org, options = {})","<p>Lists the most recent migrations.\n<p>Requires authenticated organization owner.\n<p>@param org [String, Integer] …\n"],["milestone","Octokit::Client::Milestones","Octokit/Client/Milestones.html#method-i-milestone","(repository, number, options = {})","<p>Get a single milestone for a repository\n<p>@param repository [Integer, String, Repository, Hash] A GitHub …\n"],["milestones","Octokit::Client::Milestones","Octokit/Client/Milestones.html#method-i-milestones","(repository, options = {})",""],["move_project_card","Octokit::Client::Projects","Octokit/Client/Projects.html#method-i-move_project_card","(id, position, options = {})","<p>Move a project card\n<p>Requires authenticated client\n<p>@param id [Integer] Project card id @param position [String] …\n"],["move_project_column","Octokit::Client::Projects","Octokit/Client/Projects.html#method-i-move_project_column","(id, position, options = {})","<p>Move a project column\n<p>Requires authenticated client\n<p>@param id [Integer] Project column id @param position …\n"],["named_api_path","Octokit::Repository","Octokit/Repository.html#method-i-named_api_path","()","<p>@return [String] Api path for owner/name identified repos\n"],["netrc","Octokit::Default","Octokit/Default.html#method-c-netrc","()","<p>Default behavior for reading .netrc file @return [Boolean]\n"],["netrc?","Octokit::Configurable","Octokit/Configurable.html#method-i-netrc-3F","()",""],["netrc_file","Octokit::Default","Octokit/Default.html#method-c-netrc_file","()","<p>Default path for .netrc file @return [String]\n"],["network","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-network","(repo, options = {})",""],["new","Octokit::Arguments","Octokit/Arguments.html#method-c-new","(args)",""],["new","Octokit::Client","Octokit/Client.html#method-c-new","(options = {})",""],["new","Octokit::EnterpriseAdminClient","Octokit/EnterpriseAdminClient.html#method-c-new","(options = {})",""],["new","Octokit::EnterpriseManagementConsoleClient","Octokit/EnterpriseManagementConsoleClient.html#method-c-new","(options = {})",""],["new","Octokit::Error","Octokit/Error.html#method-c-new","(response=nil)",""],["new","Octokit::Gist","Octokit/Gist.html#method-c-new","(gist)",""],["new","Octokit::Middleware::FollowRedirects","Octokit/Middleware/FollowRedirects.html#method-c-new","(app, options = {})","<p>Public: Initialize the middleware.\n<p>options - An options Hash (default: {}):\n\n<pre>:limit               - A Integer ...</pre>\n"],["new","Octokit::Middleware::RedirectLimitReached","Octokit/Middleware/RedirectLimitReached.html#method-c-new","(response)",""],["new","Octokit::RepoArguments","Octokit/RepoArguments.html#method-c-new","(args)",""],["new","Octokit::Repository","Octokit/Repository.html#method-c-new","(repo)","<p>@raise [Octokit::InvalidRepository] if the repository\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">has</span> <span class=\"ruby-identifier\">an</span> <span class=\"ruby-identifier\">invalid</span> <span class=\"ruby-identifier\">format</span>\n</pre>\n"],["notifications","Octokit::Client::Notifications","Octokit/Client/Notifications.html#method-i-notifications","(options = {})","<p>List your notifications\n<p>@param options [Hash] Optional parameters @option options [Boolean] :all &#39;true&#39; …\n"],["octocat","Octokit::Client::Say","Octokit/Client/Say.html#method-i-octocat","(text = nil, options = {})",""],["octokit_warn","Octokit::Warnable","Octokit/Warnable.html#method-i-octokit_warn","(*message)","<p>Wrapper around Kernel#warn to print warnings unless OCTOKIT_SILENT is set to true.\n<p>@return [nil]\n"],["on_complete","Octokit::Response::FeedParser","Octokit/Response/FeedParser.html#method-i-on_complete","(env)",""],["on_complete","Octokit::Response::RaiseError","Octokit/Response/RaiseError.html#method-i-on_complete","(response)",""],["open_issue","Octokit::Client::Issues","Octokit/Client/Issues.html#method-i-open_issue","(repo, title, body = nil, options = {})",""],["options","Octokit::Configurable","Octokit/Configurable.html#method-i-options","()",""],["options","Octokit::Default","Octokit/Default.html#method-c-options","()","<p>Configuration options @return [Hash]\n"],["org","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-org","(org, options = {})",""],["org_hook","Octokit::Client::Hooks","Octokit/Client/Hooks.html#method-i-org_hook","(org, id, options = {})","<p>Get an org hook\n<p>Requires client authenticated as admin for the org.\n<p>@param org [String, Integer] Organization …\n"],["org_hooks","Octokit::Client::Hooks","Octokit/Client/Hooks.html#method-i-org_hooks","(org, options = {})","<p>List org hooks\n<p>Requires client authenticated as admin for the org.\n<p>@param org [String, Integer] Organization …\n"],["org_invitations","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-org_invitations","(org, options = {})",""],["org_issues","Octokit::Client::Issues","Octokit/Client/Issues.html#method-i-org_issues","(org, options = {})","<p>List all issues for a given organization for the authenticated user\n<p>@param org [String, Integer] Organization …\n"],["org_member?","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-org_member-3F","(org, user, options = {})",""],["org_members","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-org_members","(org, options = {})",""],["org_membership","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-org_membership","(org, options = {})",""],["org_memberships","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-org_memberships","(options = {})",""],["org_projects","Octokit::Client::Projects","Octokit/Client/Projects.html#method-i-org_projects","(org, options = {})","<p>List organization projects\n<p>Requires authenticated client\n<p>@param org [String] A GitHub organization @return …\n"],["org_public_member?","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-org_public_member-3F","(org, user, options = {})",""],["org_public_members","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-org_public_members","(org, options = {})",""],["org_repos","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-org_repos","(org, options = {})",""],["org_repositories","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-org_repositories","(org, options = {})",""],["org_teams","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-org_teams","(org, options = {})",""],["organization","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-organization","(org, options = {})","<p>Get an organization\n<p>@param org [String, Integer] Organization GitHub login or id. @return [Sawyer::Resource] …\n"],["organization_events","Octokit::Client::Events","Octokit/Client/Events.html#method-i-organization_events","(org, options = {})","<p>List all events for an organization\n<p>Requires authenticated client.\n<p>@param org [String] Organization GitHub …\n"],["organization_invitations","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-organization_invitations","(org, options = {})","<p>List pending organization invitations\n<p>Requires authenticated organization member.\n<p>@param org [String, Integer] …\n"],["organization_member?","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-organization_member-3F","(org, user, options = {})","<p>Check if a user is a member of an organization.\n<p>Use this to check if another user is a member of an organization …\n"],["organization_members","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-organization_members","(org, options = {})","<p>Get organization members\n<p>Public members of the organization are returned by default. An authenticated …\n"],["organization_membership","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-organization_membership","(org, options = {})","<p>Get an organization membership\n<p>@param org [Integer, String] The GitHub Organization. @option options [String] …\n"],["organization_memberships","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-organization_memberships","(options = {})","<p>List all organizations memberships for the authenticated user\n<p>@return [Array&lt;Sawyer::Resource&gt;] …\n"],["organization_projects","Octokit::Client::Projects","Octokit/Client/Projects.html#method-i-organization_projects","(org, options = {})",""],["organization_public_events","Octokit::Client::Events","Octokit/Client/Events.html#method-i-organization_public_events","(org, options = {})","<p>List an organization&#39;s public events\n<p>@param org [String, Integer] Organization GitHub login or id. …\n"],["organization_public_member?","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-organization_public_member-3F","(org, user, options = {})","<p>Check if a user is a public member of an organization.\n<p>If you are checking for membership of a user of …\n"],["organization_public_members","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-organization_public_members","(org, options = {})","<p>Get organization public members\n<p>Lists the public members of an organization\n<p>@param org [String] Organization …\n"],["organization_repositories","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-organization_repositories","(org, options = {})","<p>List organization repositories\n<p>Public repositories are available without authentication. Private repos …\n"],["organization_teams","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-organization_teams","(org, options = {})","<p>List teams\n<p>Requires authenticated organization member.\n<p>@param org [String, Integer] Organization GitHub …\n"],["organizations","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-organizations","(user=nil, options = {})","<p>Get organizations for a user.\n<p>Nonauthenticated calls to this method will return organizations that the …\n"],["orgs","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-orgs","(user=nil, options = {})",""],["outside_collaborators","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-outside_collaborators","(org, options={})","<p>List outside collaborators for an organization\n<p>Requires authenticated organization members.\n<p>@param org …\n"],["pages","Octokit::Client::Pages","Octokit/Client/Pages.html#method-i-pages","(repo, options = {})","<p>List Pages information for a repository\n<p>@param repo [Integer, String, Repository, Hash] A GitHub repository …\n"],["pages_build","Octokit::Client::Pages","Octokit/Client/Pages.html#method-i-pages_build","(repo, id, options = {})","<p>Get a specific Pages build by ID\n<p>@param repo [Integer, String, Repository, Hash] A GitHub repository @param …\n"],["pages_builds","Octokit::Client::Pages","Octokit/Client/Pages.html#method-i-pages_builds","(repo, options = {})","<p>List Pages builds for a repository\n<p>@param repo [Integer, String, Repository, Hash] A GitHub repository …\n"],["paginate","Octokit::Connection","Octokit/Connection.html#method-i-paginate","(url, options = {}, &block)","<p>Make one or more HTTP GET requests, optionally fetching the next page of results from URL in Link response …\n"],["parse_date","Octokit::Client::Commits","Octokit/Client/Commits.html#method-i-parse_date","(date)","<p>Parses the given string representation of a date, throwing a meaningful exception (containing the date …\n"],["parse_payload","Octokit::Client::Hooks","Octokit/Client/Hooks.html#method-i-parse_payload","(payload_string)","<p>Parse payload string\n<p>@param payload_string [String] The payload @return [Sawyer::Resource] The payload …\n"],["parse_query_and_convenience_headers","Octokit::Connection","Octokit/Connection.html#method-i-parse_query_and_convenience_headers","(options)",""],["participation_stats","Octokit::Client::Stats","Octokit/Client/Stats.html#method-i-participation_stats","(repo, options = {})","<p>Get the weekly commit count for the repo owner and everyone else\n<p>@param repo [Integer, String, Hash, Repository] …\n"],["password","Octokit::Default","Octokit/Default.html#method-c-password","()","<p>Default GitHub password for Basic Auth from ENV @return [String]\n"],["password=","Octokit::Client","Octokit/Client.html#method-i-password-3D","(value)","<p>Set password for authentication\n<p>@param value [String] GitHub password\n"],["password_delivery","Octokit::OneTimePasswordRequired","Octokit/OneTimePasswordRequired.html#method-i-password_delivery","()","<p>Delivery method for the user&#39;s OTP\n<p>@return [String]\n"],["password_hash","Octokit::EnterpriseManagementConsoleClient","Octokit/EnterpriseManagementConsoleClient.html#method-i-password_hash","()",""],["patch","Octokit::Connection","Octokit/Connection.html#method-i-patch","(url, options = {})","<p>Make a HTTP PATCH request\n<p>@param url [String] The path, relative to {#api_endpoint} @param options [Hash] …\n"],["path","Octokit::Organization","Octokit/Organization.html#method-c-path","(org)","<p>Get the api path for an organization\n<p>@param org [String, Integer] GitHub organization login or id @return …\n"],["path","Octokit::Repository","Octokit/Repository.html#method-i-path","()","<p>@return [String] Repository API path\n"],["path","Octokit::Repository","Octokit/Repository.html#method-c-path","(repo)","<p>Get the api path for a repo @param repo [Integer, String, Hash, Repository] A GitHub repository. @return …\n"],["path","Octokit::User","Octokit/User.html#method-c-path","(user)","<p>Get the api path for a user\n<p>@param user [String, Integer] GitHub user login or id @return [String] User …\n"],["per_page","Octokit::Default","Octokit/Default.html#method-c-per_page","()","<p>Default pagination page size from ENV @return [Integer] Page size\n"],["perform_with_redirection","Octokit::Middleware::FollowRedirects","Octokit/Middleware/FollowRedirects.html#method-i-perform_with_redirection","(env, follows)",""],["permission_level","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-permission_level","(repo, collaborator, options={})","<p>Get a user&#39;s permission level for a repo.\n<p>Requires authenticated client\n<p>@return [Sawyer::Resource] …\n"],["ping_hook","Octokit::Client::Hooks","Octokit/Client/Hooks.html#method-i-ping_hook","(repo, id, options={})","<p>Ping hook\n<p>Requires authenticated client.\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository. …\n"],["ping_org_hook","Octokit::Client::Hooks","Octokit/Client/Hooks.html#method-i-ping_org_hook","(org, id, options = {})","<p>Ping org hook\n<p>Requires client authenticated as admin for the org.\n<p>@param org [String, Integer] Organization …\n"],["plan_for_account","Octokit::Client::Marketplace","Octokit/Client/Marketplace.html#method-i-plan_for_account","(account_id, options = {})","<p>Get the plan associated with a given GitHub account\n<p>@param account_id [Integer] The id of the GitHub account …\n"],["post","Octokit::Connection","Octokit/Connection.html#method-i-post","(url, options = {})","<p>Make a HTTP POST request\n<p>@param url [String] The path, relative to {#api_endpoint} @param options [Hash] …\n"],["project","Octokit::Client::Projects","Octokit/Client/Projects.html#method-i-project","(id, options = {})","<p>Get a project by id \n<p>@param id [Integer] Project id @return [Sawyer::Resource] Project @see developer.github.com/v3/projects/#get-a-project …\n"],["project_card","Octokit::Client::Projects","Octokit/Client/Projects.html#method-i-project_card","(id, options = {})","<p>Get a project card\n<p>Requires authenticated client\n<p>@param id [Integer] Project card id @return [Sawyer::Resource] …\n"],["project_column","Octokit::Client::Projects","Octokit/Client/Projects.html#method-i-project_column","(id, options = {})","<p>Get a project column by ID\n<p>@param id [Integer] Project column id @return [Sawyer::Resource] Project column …\n"],["project_columns","Octokit::Client::Projects","Octokit/Client/Projects.html#method-i-project_columns","(id, options = {})","<p>List project columns\n<p>@param id [Integer] Project id  @return [Array&lt;Sawyer::Resource&gt;] List of project …\n"],["projects","Octokit::Client::Projects","Octokit/Client/Projects.html#method-i-projects","(repo, options = {})","<p>List projects for a repository\n<p>Requires authenticated client\n<p>@param repo [Integer, String, Repository, …\n"],["promote","Octokit::EnterpriseAdminClient::Users","Octokit/EnterpriseAdminClient/Users.html#method-i-promote","(user, options = {})","<p>Promote an ordinary user to a site administrator\n<p>@param user [String] Username of the user to promote. …\n"],["protect_branch","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-protect_branch","(repo, branch, options = {})","<p>Lock a single branch from a repository\n<p>Requires authenticated client\n<p>@param repo [Integer, String, Hash …\n"],["proxy","Octokit::Default","Octokit/Default.html#method-c-proxy","()","<p>Default proxy server URI for Faraday connection from ENV @return [String]\n"],["pub_sub_hubbub_request","Octokit::Client::PubSubHubbub","Octokit/Client/PubSubHubbub.html#method-i-pub_sub_hubbub_request","(options = {})",""],["public_events","Octokit::Client::Events","Octokit/Client/Events.html#method-i-public_events","(options = {})","<p>List all public events for GitHub\n<p>@return [Array&lt;Sawyer::Resource&gt;] A list of all public events …\n"],["public_gists","Octokit::Client::Gists","Octokit/Client/Gists.html#method-i-public_gists","(options = {})","<p>List public gists\n<p>@return [Array&lt;Sawyer::Resource&gt;] A list of gists @example Fetch all public gists …\n"],["publicize_membership","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-publicize_membership","(org, user, options = {})","<p>Publicize a user&#39;s membership of an organization\n<p>Requires authenticated organization owner.\n<p>@param …\n"],["pull","Octokit::Client::PullRequests","Octokit/Client/PullRequests.html#method-i-pull","(repo, number, options = {})",""],["pull_comment","Octokit::Client::PullRequests","Octokit/Client/PullRequests.html#method-i-pull_comment","(repo, comment_id, options = {})",""],["pull_comments","Octokit::Client::PullRequests","Octokit/Client/PullRequests.html#method-i-pull_comments","(repo, number, options = {})",""],["pull_commits","Octokit::Client::PullRequests","Octokit/Client/PullRequests.html#method-i-pull_commits","(repo, number, options = {})",""],["pull_files","Octokit::Client::PullRequests","Octokit/Client/PullRequests.html#method-i-pull_files","(repo, number, options = {})",""],["pull_merged?","Octokit::Client::PullRequests","Octokit/Client/PullRequests.html#method-i-pull_merged-3F","(repo, number, options = {})","<p>Check pull request merge status\n<p>@see developer.github.com/v3/pulls/#get-if-a-pull-request-has-been-merged …\n"],["pull_request","Octokit::Client::PullRequests","Octokit/Client/PullRequests.html#method-i-pull_request","(repo, number, options = {})","<p>Get a pull request\n<p>@see developer.github.com/v3/pulls/#get-a-single-pull-request @param repo [Integer, …\n"],["pull_request_comment","Octokit::Client::PullRequests","Octokit/Client/PullRequests.html#method-i-pull_request_comment","(repo, comment_id, options = {})","<p>Get a pull request comment\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository @param …\n"],["pull_request_comments","Octokit::Client::PullRequests","Octokit/Client/PullRequests.html#method-i-pull_request_comments","(repo, number, options = {})","<p>List comments on a pull request\n<p>@see developer.github.com/v3/pulls/comments/#list-comments-on-a-pull-request …\n"],["pull_request_commits","Octokit::Client::PullRequests","Octokit/Client/PullRequests.html#method-i-pull_request_commits","(repo, number, options = {})","<p>List commits on a pull request\n<p>@see developer.github.com/v3/pulls/#list-commits-on-a-pull-request @param …\n"],["pull_request_files","Octokit::Client::PullRequests","Octokit/Client/PullRequests.html#method-i-pull_request_files","(repo, number, options = {})","<p>List files on a pull request\n<p>@see developer.github.com/v3/pulls/#list-pull-requests-files @param repo …\n"],["pull_request_merged?","Octokit::Client::PullRequests","Octokit/Client/PullRequests.html#method-i-pull_request_merged-3F","(repo, number, options = {})",""],["pull_request_review","Octokit::Client::Reviews","Octokit/Client/Reviews.html#method-i-pull_request_review","(repo, number, review, options = {})","<p>Get a single review\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository @param number …\n"],["pull_request_review_comment_reactions","Octokit::Client::Reactions","Octokit/Client/Reactions.html#method-i-pull_request_review_comment_reactions","(repo, id, options = {})","<p>List reactions for a pull request review comment\n<p>@param repo [Integer, String, Hash, Repository] A GitHub …\n"],["pull_request_review_comments","Octokit::Client::Reviews","Octokit/Client/Reviews.html#method-i-pull_request_review_comments","(repo, number, review, options = {})","<p>Get comments for a single review\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository @param …\n"],["pull_request_review_requests","Octokit::Client::Reviews","Octokit/Client/Reviews.html#method-i-pull_request_review_requests","(repo, number, options = {})","<p>List review requests\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository @param number …\n"],["pull_request_reviews","Octokit::Client::Reviews","Octokit/Client/Reviews.html#method-i-pull_request_reviews","(repo, number, options = {})","<p>List reviews on a pull request\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository @param …\n"],["pull_requests","Octokit::Client::PullRequests","Octokit/Client/PullRequests.html#method-i-pull_requests","(repo, options = {})","<p>List pull requests for a repository\n<p>@overload pull_requests(repo, options)\n\n<pre>@param repo [Integer, String, ...</pre>\n"],["pull_requests_comments","Octokit::Client::PullRequests","Octokit/Client/PullRequests.html#method-i-pull_requests_comments","(repo, options = {})","<p>List pull request comments for a repository\n<p>By default, Review Comments are ordered by ascending ID.\n<p>@param …\n"],["pulls","Octokit::Client::PullRequests","Octokit/Client/PullRequests.html#method-i-pulls","(repo, options = {})",""],["pulls_comments","Octokit::Client::PullRequests","Octokit/Client/PullRequests.html#method-i-pulls_comments","(repo, options = {})",""],["punch_card","Octokit::Client::Stats","Octokit/Client/Stats.html#method-i-punch_card","(repo, options = {})",""],["punch_card_stats","Octokit::Client::Stats","Octokit/Client/Stats.html#method-i-punch_card_stats","(repo, options = {})","<p>Get the number of commits per hour in each day\n<p>@param repo [Integer, String, Hash, Repository] A GitHub …\n"],["put","Octokit::Connection","Octokit/Connection.html#method-i-put","(url, options = {})","<p>Make a HTTP PUT request\n<p>@param url [String] The path, relative to {#api_endpoint} @param options [Hash] …\n"],["queue_index","Octokit::EnterpriseAdminClient::SearchIndexing","Octokit/EnterpriseAdminClient/SearchIndexing.html#method-i-queue_index","(target)","<p>@private Queue a target for indexing\n<p>@param target [String] Target to index @return [Sawyer:Resource] …\n"],["raise_invalid_repository!","Octokit::Repository","Octokit/Repository.html#method-i-raise_invalid_repository-21","(repo)",""],["rate_limit","Octokit::Client::RateLimit","Octokit/Client/RateLimit.html#method-i-rate_limit","(options = {})","<p>Get rate limit info from last response if available or make a new request to fetch rate limit\n<p>@see developer.github.com/v3/rate_limit/#rate-limit …\n"],["rate_limit!","Octokit::Client::RateLimit","Octokit/Client/RateLimit.html#method-i-rate_limit-21","(options = {})","<p>Refresh rate limit info by making a new request\n<p>@see developer.github.com/v3/rate_limit/#rate-limit @return …\n"],["rate_limit_remaining","Octokit::Client::RateLimit","Octokit/Client/RateLimit.html#method-i-rate_limit_remaining","(options = {})","<p>Get number of rate limted requests remaining\n<p>@see developer.github.com/v3/rate_limit/#rate-limit @return …\n"],["rate_limit_remaining!","Octokit::Client::RateLimit","Octokit/Client/RateLimit.html#method-i-rate_limit_remaining-21","(options = {})","<p>Refresh rate limit info and get number of rate limted requests remaining\n<p>@see developer.github.com/v3/rate_limit/#rate-limit …\n"],["ratelimit","Octokit::Client::RateLimit","Octokit/Client/RateLimit.html#method-i-ratelimit","(options = {})",""],["ratelimit!","Octokit::Client::RateLimit","Octokit/Client/RateLimit.html#method-i-ratelimit-21","(options = {})",""],["ratelimit_remaining","Octokit::Client::RateLimit","Octokit/Client/RateLimit.html#method-i-ratelimit_remaining","(options = {})",""],["ratelimit_remaining!","Octokit::Client::RateLimit","Octokit/Client/RateLimit.html#method-i-ratelimit_remaining-21","(options = {})",""],["readme","Octokit::Client::Contents","Octokit/Client/Contents.html#method-i-readme","(repo, options={})","<p>Receive the default Readme for a repository\n<p>@param repo [Integer, String, Repository, Hash] A GitHub repository …\n"],["received_events","Octokit::Client::Events","Octokit/Client/Events.html#method-i-received_events","(user, options = {})","<p>List events that a user has received\n<p>@param user [Integer, String] GitHub user login or id @return [Array&lt;Sawyer::Resource&gt;] …\n"],["received_public_events","Octokit::Client::Events","Octokit/Client/Events.html#method-i-received_public_events","(user, options = {})","<p>List public events a user has received\n<p>@param user [Integer, String] GitHub user login or id @return [Array&lt;Sawyer::Resource&gt;] …\n"],["redact_url","Octokit::Error","Octokit/Error.html#method-i-redact_url","(url_string)",""],["ref","Octokit::Client::Refs","Octokit/Client/Refs.html#method-i-ref","(repo, ref, options = {})","<p>Fetch a given reference\n<p>@param repo [Integer, String, Repository, Hash] A GitHub repository @param ref …\n"],["reference","Octokit::Client::Refs","Octokit/Client/Refs.html#method-i-reference","(repo, ref, options = {})",""],["references","Octokit::Client::Refs","Octokit/Client/Refs.html#method-i-references","(repo, namespace = nil, options = {})",""],["refs","Octokit::Client::Refs","Octokit/Client/Refs.html#method-i-refs","(repo, namespace = nil, options = {})","<p>List all refs for a given user and repo\n<p>@param repo [Integer, String, Repository, Hash] A GitHub repository …\n"],["release","Octokit::Client::Releases","Octokit/Client/Releases.html#method-i-release","(url, options = {})","<p>Get a release\n<p>@param url [String] URL for the release as returned from .releases @return [Sawyer::Resource] …\n"],["release_asset","Octokit::Client::Releases","Octokit/Client/Releases.html#method-i-release_asset","(asset_url, options = {})","<p>Get a single release asset\n<p>@param asset_url [String] URL for the asset as returned from .release_assets …\n"],["release_assets","Octokit::Client::Releases","Octokit/Client/Releases.html#method-i-release_assets","(release_url, options = {})","<p>List release assets\n<p>@param release_url [String] URL for the release as returned from .releases @return …\n"],["release_for_tag","Octokit::Client::Releases","Octokit/Client/Releases.html#method-i-release_for_tag","(repo, tag_name, options = {})","<p>Get the release for a given tag\n<p>@param repo [Integer, String, Repository, Hash] A GitHub repository @param …\n"],["releases","Octokit::Client::Releases","Octokit/Client/Releases.html#method-i-releases","(repo, options = {})","<p>List releases for a repository\n<p>@param repo [Integer, String, Repository, Hash] A GitHub repository @return …\n"],["remove_all_labels","Octokit::Client::Labels","Octokit/Client/Labels.html#method-i-remove_all_labels","(repo, number, options = {})","<p>Remove all label from an Issue\n<p>This removes the label from the Issue\n<p>@param repo [Integer, String, Repository …\n"],["remove_assignees","Octokit::Client::Issues","Octokit/Client/Issues.html#method-i-remove_assignees","(repo, number, assignees, options = {})","<p>Remove assignees from an issue\n<p>@param repo [Integer, String, Repository, Hash] A GitHub repository @param …\n"],["remove_authorized_key","Octokit::EnterpriseManagementConsoleClient::ManagementConsole","Octokit/EnterpriseManagementConsoleClient/ManagementConsole.html#method-i-remove_authorized_key","(key)","<p>Removes an authorized SSH keys from the Enterprise install\n<p>@param key Either the file path to a key, a …\n"],["remove_collab","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-remove_collab","(repo, collaborator, options = {})",""],["remove_collaborator","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-remove_collaborator","(repo, collaborator, options = {})","<p>Remove collaborator from repo.\n<p>Requires authenticated client.\n<p>@param repo [Integer, String, Hash, Repository] …\n"],["remove_content","Octokit::Client::Contents","Octokit/Client/Contents.html#method-i-remove_content","(repo, path, message, sha, options = {})",""],["remove_contents","Octokit::Client::Contents","Octokit/Client/Contents.html#method-i-remove_contents","(repo, path, message, sha, options = {})",""],["remove_deploy_key","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-remove_deploy_key","(repo, id, options = {})","<p>Remove deploy key from a repo\n<p>Requires authenticated client.\n<p>@param repo [Integer, String, Hash, Repository] …\n"],["remove_email","Octokit::Client::Users","Octokit/Client/Users.html#method-i-remove_email","(email)","<p>Remove email from user.\n<p>Requires authenticated client.\n<p>@param email [String] Email address to remove. @return …\n"],["remove_hook","Octokit::Client::Hooks","Octokit/Client/Hooks.html#method-i-remove_hook","(repo, id, options = {})","<p>Delete hook\n<p>Requires authenticated client.\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository. …\n"],["remove_key","Octokit::Client::Users","Octokit/Client/Users.html#method-i-remove_key","(id, options = {})","<p>Remove a public key from user account.\n<p>Requires authenticated client.\n<p>@param id [String] Id of the public …\n"],["remove_label","Octokit::Client::Labels","Octokit/Client/Labels.html#method-i-remove_label","(repo, number, label, options = {})","<p>Remove a label from an Issue\n<p>This removes the label from the Issue\n<p>@param repo [Integer, String, Repository …\n"],["remove_org_hook","Octokit::Client::Hooks","Octokit/Client/Hooks.html#method-i-remove_org_hook","(org, id, options = {})","<p>Remove org hook\n<p>Requires client authenticated as admin for the org.\n<p>@param org [String, Integer] Organization …\n"],["remove_org_member","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-remove_org_member","(org, user, options = {})",""],["remove_org_membership","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-remove_org_membership","(org, options = {})",""],["remove_organization_member","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-remove_organization_member","(org, user, options = {})","<p>Remove organization member\n<p>Requires authenticated organization owner or member with team `admin` access. …\n"],["remove_organization_membership","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-remove_organization_membership","(org, options = {})","<p>Remove an organization membership\n<p>@param org [String, Integer] Organization GitHub login or id. @return …\n"],["remove_outside_collaborator","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-remove_outside_collaborator","(org, user, options={})","<p>Remove outside collaborator from an organization\n<p>Requires authenticated organization members.\n<p>@param org …\n"],["remove_repo_from_installation","Octokit::Client::Apps","Octokit/Client/Apps.html#method-i-remove_repo_from_installation","(installation, repo, options = {})",""],["remove_repository_from_app_installation","Octokit::Client::Apps","Octokit/Client/Apps.html#method-i-remove_repository_from_app_installation","(installation, repo, options = {})","<p>Remove a single repository to an installation\n<p>@param installation [Integer] The id of a GitHub App Installation …\n"],["remove_repository_from_integration_installation","Octokit::Client::Apps","Octokit/Client/Apps.html#method-i-remove_repository_from_integration_installation","(installation, repo, options = {})",""],["remove_team_member","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-remove_team_member","(team_id, user, options = {})","<p>Remove team member\n<p>Requires authenticated organization owner or member with team `admin` permission.\n<p>@param …\n"],["remove_team_membership","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-remove_team_membership","(team_id, user, options = {})","<p>Remove team membership\n<p>@param team_id [Integer] Team id. @param user [String] GitHub username of the user …\n"],["remove_team_repo","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-remove_team_repo","(team_id, repo, options = {})",""],["remove_team_repository","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-remove_team_repository","(team_id, repo, options = {})","<p>Remove team repository\n<p>Removes repository from team. Does not delete the repository.\n<p>Requires authenticated …\n"],["rename_branch","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-rename_branch","(repo, branch, new_name, options = {})","<p>Rename a single branch from a repository\n<p>Requires authenticated client\n<p>@param repo [Integer, String, Hash …\n"],["rename_user","Octokit::EnterpriseAdminClient::Users","Octokit/EnterpriseAdminClient/Users.html#method-i-rename_user","(old_login, new_login, options = {})","<p>Rename a user.\n<p>@param old_login [String] The user&#39;s old username. @param new_login [String] The user&#39;s …\n"],["reopen_issue","Octokit::Client::Issues","Octokit/Client/Issues.html#method-i-reopen_issue","(repo, number, options = {})","<p>Reopen an issue\n<p>@param repo [Integer, String, Repository, Hash] A GitHub repository @param number [Integer] …\n"],["replace_all_labels","Octokit::Client::Labels","Octokit/Client/Labels.html#method-i-replace_all_labels","(repo, number, labels, options = {})","<p>Replace all labels on an Issue\n<p>@param repo [Integer, String, Repository, Hash] A Github repository @param …\n"],["replace_all_topics","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-replace_all_topics","(repo, names, options = {})","<p>Replace all topics for a repository\n<p>Requires authenticated client.\n<p>@param repo [Integer, String, Repository …\n"],["repo","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-repo","(repo, options = {})",""],["repo_assignees","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-repo_assignees","(repo, options = {})",""],["repo_invitations","Octokit::Client::RepositoryInvitations","Octokit/Client/RepositoryInvitations.html#method-i-repo_invitations","(repo, options = {})",""],["repo_issue_events","Octokit::Client::Events","Octokit/Client/Events.html#method-i-repo_issue_events","(repo, options = {})",""],["repo_notifications","Octokit::Client::Notifications","Octokit/Client/Notifications.html#method-i-repo_notifications","(repo, options = {})",""],["repo_teams","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-repo_teams","(repo, options = {})",""],["repos","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-repos","(user=nil, options = {})",""],["repositories","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-repositories","(user=nil, options = {})","<p>List user repositories\n<p>If user is not supplied, repositories for the current\n\n<pre>authenticated user are returned.</pre>\n"],["repository","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-repository","(repo, options = {})","<p>Get a single repository\n<p>@see developer.github.com/v3/repos/#get @see developer.github.com/v3/licenses/#get-a-repositorys-license …\n"],["repository?","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-repository-3F","(repo, options = {})","<p>Check if a repository exists\n<p>@see developer.github.com/v3/repos/#get @param repo [Integer, String, Hash …\n"],["repository_assignees","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-repository_assignees","(repo, options = {})","<p>List users available for assigning to issues.\n<p>Requires authenticated client for private repos.\n<p>@param repo …\n"],["repository_events","Octokit::Client::Events","Octokit/Client/Events.html#method-i-repository_events","(repo, options = {})","<p>List events for a repository\n<p>@param repo [Integer, String, Repository, Hash] A GitHub repository @return …\n"],["repository_invitations","Octokit::Client::RepositoryInvitations","Octokit/Client/RepositoryInvitations.html#method-i-repository_invitations","(repo, options = {})","<p>List all invitations for a repository\n<p>Requires authenticated client\n<p>@param repo [Integer, String, Repository …\n"],["repository_issue_events","Octokit::Client::Events","Octokit/Client/Events.html#method-i-repository_issue_events","(repo, options = {})","<p>Get all Issue Events for a given Repository\n<p>@param repo [Integer, String, Repository, Hash] A GitHub repository …\n"],["repository_license_contents","Octokit::Client::Licenses","Octokit/Client/Licenses.html#method-i-repository_license_contents","(repo, options = {})","<p>Returns the contents of the repository’s license file, if one is detected.\n<p>@see developer.github.com/v3/licenses/#get-the-contents-of-a-repositorys-license …\n"],["repository_network_events","Octokit::Client::Events","Octokit/Client/Events.html#method-i-repository_network_events","(repo, options = {})","<p>List public events for a repository&#39;s network\n<p>@param repo [String, Repository, Hash] A GitHub repository …\n"],["repository_notifications","Octokit::Client::Notifications","Octokit/Client/Notifications.html#method-i-repository_notifications","(repo, options = {})","<p>List your notifications in a repository\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository …\n"],["repository_teams","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-repository_teams","(repo, options = {})","<p>List teams for a repo\n<p>Requires authenticated client that is an owner or collaborator of the repo.\n<p>@param …\n"],["repository_workflow_runs","Octokit::Client::ActionsWorkflowRuns","Octokit/Client/ActionsWorkflowRuns.html#method-i-repository_workflow_runs","(repo, options = {})","<p>List all workflow runs for a repository\n<p>@param repo [Integer, String, Repository, Hash] A GitHub repository …\n"],["request","Octokit::Connection","Octokit/Connection.html#method-i-request","(method, path, data, options = {})",""],["request_page_build","Octokit::Client::Pages","Octokit/Client/Pages.html#method-i-request_page_build","(repo, options = {})","<p>Request a page build for the latest revision of the default branch\n<p>You can only request builds for your …\n"],["request_pull_request_review","Octokit::Client::Reviews","Octokit/Client/Reviews.html#method-i-request_pull_request_review","(repo, number, reviewers = {}, options = {})","<p>Create a review request\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository @param number …\n"],["required_header","Octokit::OneTimePasswordRequired","Octokit/OneTimePasswordRequired.html#method-c-required_header","(headers)","<p>@private\n"],["rerequest_check_suite","Octokit::Client::Checks","Octokit/Client/Checks.html#method-i-rerequest_check_suite","(repo, id, options = {})","<p>Rerequest check suite\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository @param id [Integer] …\n"],["rerun_workflow_run","Octokit::Client::ActionsWorkflowRuns","Octokit/Client/ActionsWorkflowRuns.html#method-i-rerun_workflow_run","(repo, id, options = {})","<p>Re-runs a workflow run\n<p>@param repo [Integer, String, Repository, Hash] A GitHub repository @param id [Integer] …\n"],["reset!","Octokit::Configurable","Octokit/Configurable.html#method-i-reset-21","()","<p>Reset configuration options to default values\n"],["reset_agent","Octokit::Connection","Octokit/Connection.html#method-i-reset_agent","()",""],["reset_application_authorization","Octokit::Client::OauthApplications","Octokit/Client/OauthApplications.html#method-i-reset_application_authorization","(access_token, options = {})",""],["reset_token","Octokit::Client::OauthApplications","Octokit/Client/OauthApplications.html#method-i-reset_token","(access_token, options = {})","<p>Reset a token\n<p>Applications can reset a token without requiring a user to re-authorize.\n<p>@param access_token …\n"],["respond_to_missing?","Octokit","Octokit.html#method-c-respond_to_missing-3F","(method_name, include_private=false)",""],["response_body","Octokit::Error","Octokit/Error.html#method-i-response_body","()","<p>Body returned by the GitHub server.\n<p>@return [String]\n"],["response_error","Octokit::Error","Octokit/Error.html#method-i-response_error","()",""],["response_error_summary","Octokit::Error","Octokit/Error.html#method-i-response_error_summary","()",""],["response_headers","Octokit::Error","Octokit/Error.html#method-i-response_headers","()","<p>Headers returned by the GitHub server.\n<p>@return [Hash]\n"],["response_message","Octokit::Error","Octokit/Error.html#method-i-response_message","()",""],["response_status","Octokit::Error","Octokit/Error.html#method-i-response_status","()","<p>Status code returned by the GitHub server.\n<p>@return [Integer]\n"],["review_comment","Octokit::Client::PullRequests","Octokit/Client/PullRequests.html#method-i-review_comment","(repo, comment_id, options = {})",""],["review_comments","Octokit::Client::PullRequests","Octokit/Client/PullRequests.html#method-i-review_comments","(repo, number, options = {})",""],["reviews_comments","Octokit::Client::PullRequests","Octokit/Client/PullRequests.html#method-i-reviews_comments","(repo, options = {})",""],["revoke_all_application_authorizations","Octokit::Client::Authorizations","Octokit/Client/Authorizations.html#method-i-revoke_all_application_authorizations","(options = {})","<p>Revoke all tokens for an app\n<p>Applications can revoke all of their tokens in a single request\n<p>@deprecated …\n"],["revoke_application_authorization","Octokit::Client::OauthApplications","Octokit/Client/OauthApplications.html#method-i-revoke_application_authorization","(access_token, options = {})",""],["root","Octokit::Connection","Octokit/Connection.html#method-i-root","()","<p>Fetch the root resource for the API\n<p>@return [Sawyer::Resource]\n"],["safe_escape","Octokit::Middleware::FollowRedirects","Octokit/Middleware/FollowRedirects.html#method-i-safe_escape","(uri)","<p>Internal: Escapes unsafe characters from a URL which might be a path component only or a fully-qualified …\n"],["same_host?","Octokit::Middleware::FollowRedirects","Octokit/Middleware/FollowRedirects.html#method-i-same_host-3F","(original_url, redirect_url)",""],["same_options?","Octokit::Configurable","Octokit/Configurable.html#method-i-same_options-3F","(opts)","<p>Compares client options to a Hash of requested options\n<p>@param opts [Hash] Options to compare with current …\n"],["sawyer_options","Octokit::Connection","Octokit/Connection.html#method-i-sawyer_options","()",""],["say","Octokit::Client::Say","Octokit/Client/Say.html#method-i-say","(text = nil, options = {})","<p>Return a nifty ASCII Octocat with GitHub wisdom or your own\n<p>@return [String]\n"],["scopes","Octokit::Client::Authorizations","Octokit/Client/Authorizations.html#method-i-scopes","(token = @access_token, options = {})","<p>Check scopes for a token\n<p>@param token [String] GitHub OAuth token @param options [Hash] Header params …\n"],["search","Octokit::Client::Search","Octokit/Client/Search.html#method-i-search","(path, query, options = {})",""],["search_code","Octokit::Client::Search","Octokit/Client/Search.html#method-i-search_code","(query, options = {})","<p>Search code\n<p>@param query [String] Search term and qualifiers @param options [Hash] Sort and pagination …\n"],["search_commits","Octokit::Client::Search","Octokit/Client/Search.html#method-i-search_commits","(query, options = {})","<p>Search commits\n<p>@param query [String] Search terms and qualifiers @param options [Hash] Sort and pagination …\n"],["search_issues","Octokit::Client::Search","Octokit/Client/Search.html#method-i-search_issues","(query, options = {})","<p>Search issues\n<p>@param query [String] Search term and qualifiers @param options [Hash] Sort and pagination …\n"],["search_repos","Octokit::Client::Search","Octokit/Client/Search.html#method-i-search_repos","(query, options = {})",""],["search_repositories","Octokit::Client::Search","Octokit/Client/Search.html#method-i-search_repositories","(query, options = {})","<p>Search repositories\n<p>@param query [String] Search term and qualifiers @param options [Hash] Sort and pagination …\n"],["search_users","Octokit::Client::Search","Octokit/Client/Search.html#method-i-search_users","(query, options = {})","<p>Search users\n<p>@param query [String] Search term and qualifiers @param options [Hash] Sort and pagination …\n"],["set_check_suite_preferences","Octokit::Client::Checks","Octokit/Client/Checks.html#method-i-set_check_suite_preferences","(repo, options = {})","<p>Set preferences for check suites on a repository\n<p>@param repo [Integer, String, Hash, Repository] A GitHub …\n"],["set_maintenance_status","Octokit::EnterpriseManagementConsoleClient::ManagementConsole","Octokit/EnterpriseManagementConsoleClient/ManagementConsole.html#method-i-set_maintenance_status","(maintenance)","<p>Start (or turn off) the Enterprise maintenance mode\n<p>@param maintenance [Hash] A hash configuration of …\n"],["set_private","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-set_private","(repo, options = {})","<p>Hide a public repository\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository @return [Sawyer::Resource] …\n"],["set_public","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-set_public","(repo, options = {})","<p>Unhide a private repository\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository @return …\n"],["set_source_import_lfs_preference","Octokit::Client::SourceImport","Octokit/Client/SourceImport.html#method-i-set_source_import_lfs_preference","(repo, use_lfs, options = {})","<p>Set preference for using Git LFS to import files over 100MB\n<p>@param repo [Integer, String, Hash, Repository] …\n"],["settings","Octokit::EnterpriseManagementConsoleClient::ManagementConsole","Octokit/EnterpriseManagementConsoleClient/ManagementConsole.html#method-i-settings","()","<p>Get information about the Enterprise installation\n<p>@return [Sawyer::Resource] The settings\n"],["setup","Octokit::Configurable","Octokit/Configurable.html#method-i-setup","()",""],["slug","Octokit::Repository","Octokit/Repository.html#method-i-slug","()","<p>Repository owner/name @return [String]\n"],["source_import_commit_authors","Octokit::Client::SourceImport","Octokit/Client/SourceImport.html#method-i-source_import_commit_authors","(repo, options = {})","<p>List source import commit authors\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository. …\n"],["source_import_large_files","Octokit::Client::SourceImport","Octokit/Client/SourceImport.html#method-i-source_import_large_files","(repo, options = {})","<p>List source import large files\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository. @param …\n"],["source_import_progress","Octokit::Client::SourceImport","Octokit/Client/SourceImport.html#method-i-source_import_progress","(repo, options = {})","<p>View the progress of an import.\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository. @return …\n"],["ssl_verify_mode","Octokit::Default","Octokit/Default.html#method-c-ssl_verify_mode","()","<p>Default SSL verify mode from ENV @return [Integer]\n"],["star","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-star","(repo, options = {})","<p>Star a repository\n<p>@param repo [String, Hash, Repository] A GitHub repository @return [Boolean] `true` …\n"],["star_gist","Octokit::Client::Gists","Octokit/Client/Gists.html#method-i-star_gist","(gist, options = {})","<p>Star a gist\n<p>@param gist [String] Gist ID @return [Boolean] Indicates if gist is starred successfully @see …\n"],["stargazers","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-stargazers","(repo, options = {})","<p>List stargazers of a repo\n<p>Requires authenticated client for private repos.\n<p>@param repo [Integer, String …\n"],["starred","Octokit::Client::Users","Octokit/Client/Users.html#method-i-starred","(user=login, options = {})","<p>Get list of repos starred by a user.\n<p>@param user [Integer, String] GitHub user login of the user to get …\n"],["starred?","Octokit::Client::Users","Octokit/Client/Users.html#method-i-starred-3F","(repo, options = {})","<p>Check if you are starring a repo.\n<p>Requires authenticated client.\n<p>@param repo [String, Hash, Repository] …\n"],["starred_gists","Octokit::Client::Gists","Octokit/Client/Gists.html#method-i-starred_gists","(options = {})","<p>List the authenticated user’s starred gists\n<p>@return [Array&lt;Sawyer::Resource&gt;] A list of gists @see …\n"],["start_configuration","Octokit::EnterpriseManagementConsoleClient::ManagementConsole","Octokit/EnterpriseManagementConsoleClient/ManagementConsole.html#method-i-start_configuration","()","<p>Start a configuration process.\n<p>@return nil\n"],["start_migration","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-start_migration","(org, repositories, options = {})","<p>Initiates the generation of a migration archive.\n<p>Requires authenticated organization owner.\n<p>@param org …\n"],["start_source_import","Octokit::Client::SourceImport","Octokit/Client/SourceImport.html#method-i-start_source_import","(*args)","<p>Start a source import to a GitHub repository using GitHub Importer.\n<p>@overload start_source_import(repo, …\n"],["start_user_migration","Octokit::Client::Users","Octokit/Client/Users.html#method-i-start_user_migration","(repositories, options = {})","<p>Initiates the generation of a migration archive.\n<p>Requires authenticated user.\n<p>@param repositories [Array&lt;String&gt;] …\n"],["status","Octokit::Client::Statuses","Octokit/Client/Statuses.html#method-i-status","(repo, ref, options = {})",""],["statuses","Octokit::Client::Statuses","Octokit/Client/Statuses.html#method-i-statuses","(repo, sha, options = {})","<p>List all statuses for a given commit\n<p>@param repo [Integer, String, Repository, Hash] A GitHub repository …\n"],["submit_pull_request_review","Octokit::Client::Reviews","Octokit/Client/Reviews.html#method-i-submit_pull_request_review","(repo, number, review, event, options = {})","<p>Submit a pull request review\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository @param …\n"],["subscribe","Octokit::Client::PubSubHubbub","Octokit/Client/PubSubHubbub.html#method-i-subscribe","(topic, callback, secret = nil)","<p>Subscribe to a pubsub topic\n<p>@param topic [String] A recoginized and supported pubsub topic @param callback …\n"],["subscribe_service_hook","Octokit::Client::PubSubHubbub","Octokit/Client/PubSubHubbub.html#method-i-subscribe_service_hook","(repo, service_name, service_arguments = {}, secret = nil)","<p>Subscribe to a repository through pubsub\n<p>@param repo [String, Repository, Hash] A GitHub repository @param …\n"],["subscribers","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-subscribers","(repo, options = {})","<p>List watchers subscribing to notifications for a repo\n<p>@param repo [Integer, String, Hash, Repository] …\n"],["subscription","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-subscription","(repo, options = {})","<p>Get a repository subscription\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository. @return …\n"],["subscriptions","Octokit::Client::Users","Octokit/Client/Users.html#method-i-subscriptions","(user=login, options = {})","<p>List repositories being watched by a user.\n<p>@param user [Integer, String] GitHub user login or id. @return …\n"],["suspend","Octokit::EnterpriseAdminClient::Users","Octokit/EnterpriseAdminClient/Users.html#method-i-suspend","(user, options = {})","<p>Suspend a user.\n<p>@param user [String] Username of the user to suspend. @return [Boolean] True if suspend …\n"],["tag","Octokit::Client::Objects","Octokit/Client/Objects.html#method-i-tag","(repo, tag_sha, options = {})","<p>Get a tag\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository. @param tag_sha [String] …\n"],["tags","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-tags","(repo, options = {})","<p>List tags\n<p>Requires authenticated client for private repos.\n<p>@param repo [Integer, String, Hash, Repository] …\n"],["team","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-team","(team_id, options = {})","<p>Get team\n<p>Requires authenticated organization member.\n<p>@param team_id [Integer] Team id. @return [Sawyer::Resource] …\n"],["team_by_name","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-team_by_name","(org, team_slug, options = {})","<p>Get team by name and org\n<p>Requires authenticated organization member.\n<p>@param org [String, Integer] Organization …\n"],["team_invitations","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-team_invitations","(team_id, options = {})","<p>List pending team invitations\n<p>Requires authenticated organization member.\n<p>@param team_id [Integer] Team …\n"],["team_member?","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-team_member-3F","(team_id, user, options = {})","<p>Check if a user is a member of a team.\n<p>Use this to check if another user is a member of a team that you …\n"],["team_members","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-team_members","(team_id, options = {})","<p>List team members\n<p>Requires authenticated organization member.\n<p>@param team_id [Integer] Team id. @return …\n"],["team_membership","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-team_membership","(team_id, user, options = {})","<p>Check if a user has a team membership.\n<p>@param team_id [Integer] Team id. @param user [String] GitHub username …\n"],["team_repo?","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-team_repo-3F","(team_id, repo, options = {})",""],["team_repos","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-team_repos","(team_id, options = {})",""],["team_repositories","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-team_repositories","(team_id, options = {})","<p>List team repositories\n<p>Requires authenticated organization member.\n<p>@param team_id [Integer] Team id. @return …\n"],["team_repository?","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-team_repository-3F","(team_id, repo, options = {})","<p>Check if a repo is managed by a specific team\n<p>@param team_id [Integer] Team ID. @param repo [String,  …\n"],["teams","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-teams","(repo, options = {})",""],["test_hook","Octokit::Client::Hooks","Octokit/Client/Hooks.html#method-i-test_hook","(repo, id, options = {})","<p>Test hook\n<p>Requires authenticated client.\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository. …\n"],["thread_notifications","Octokit::Client::Notifications","Octokit/Client/Notifications.html#method-i-thread_notifications","(thread_id, options = {})","<p>List notifications for a specific thread\n<p>@param thread_id [Integer] Id of the thread. @return [Array&lt;Sawyer::Resource&gt;] …\n"],["thread_subscription","Octokit::Client::Notifications","Octokit/Client/Notifications.html#method-i-thread_subscription","(thread_id, options = {})","<p>Get thread subscription\n<p>@param thread_id [Integer] Id of the thread. @return [Sawyer::Resource] Subscription …\n"],["to_s","Octokit::Gist","Octokit/Gist.html#method-i-to_s","()","<p>Gist ID @return [String]\n"],["to_s","Octokit::Repository","Octokit/Repository.html#method-i-to_s","()",""],["token_authenticated?","Octokit::Authentication","Octokit/Authentication.html#method-i-token_authenticated-3F","()","<p>Indicates if the client was supplied an OAuth access token\n<p>@see developer.github.com/v3/#authentication …\n"],["top_paths","Octokit::Client::Traffic","Octokit/Client/Traffic.html#method-i-top_paths","(repo, options = {})","<p>Get the top 10 popular contents over the last 14 days\n<p>@param repo [Integer, String, Repository, Hash] …\n"],["top_referrers","Octokit::Client::Traffic","Octokit/Client/Traffic.html#method-i-top_referrers","(repo, options = {})","<p>Get the top 10 referrers over the last 14 days\n<p>@param repo [Integer, String, Repository, Hash] A GitHub …\n"],["topics","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-topics","(repo, options = {})","<p>List all topics for a repository\n<p>Requires authenticated client for private repos.\n<p>@param repo [Integer, …\n"],["transfer_repo","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-transfer_repo","(repo, new_owner, options = {})",""],["transfer_repository","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-transfer_repository","(repo, new_owner, options = {})","<p>Transfer repository\n<p>Transfer a repository owned by your organization\n<p>@see developer.github.com/v3/repos/#transfer-a-repository …\n"],["tree","Octokit::Client::Objects","Octokit/Client/Objects.html#method-i-tree","(repo, tree_sha, options = {})","<p>Get a single tree, fetching information about its root-level objects\n<p>Pass <code>:recursive =&gt; true</code> in <code>options</code> …\n"],["unfollow","Octokit::Client::Users","Octokit/Client/Users.html#method-i-unfollow","(user, options = {})","<p>Unfollow a user.\n<p>Requires authenticated client.\n<p>@param user [String] Username of the user to unfollow. …\n"],["unlock_issue","Octokit::Client::Issues","Octokit/Client/Issues.html#method-i-unlock_issue","(repo, number, options = {})","<p>Unlock an issue&#39;s conversation, opening it to all viewers\n<p>@param repo [Integer, String, Repository …\n"],["unlock_repository","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-unlock_repository","(org, id, repo, options = {})","<p>Unlock a previous migration archive.\n<p>Requires authenticated organization owner.\n<p>@param org [String, Integer] …\n"],["unlock_user_repository","Octokit::Client::Users","Octokit/Client/Users.html#method-i-unlock_user_repository","(id, repo, options = {})","<p>Unlock a user repository which has been locked by a migration.\n<p>Requires authenticated user.\n<p>@param id [Integer] …\n"],["unprotect_branch","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-unprotect_branch","(repo, branch, options = {})","<p>Unlock a single branch from a repository\n<p>Requires authenticated client\n<p>@param repo [Integer, String, Hash …\n"],["unpublicize_membership","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-unpublicize_membership","(org, user, options = {})","<p>Conceal a user&#39;s membership of an organization.\n<p>Requires authenticated organization owner.\n<p>@param org …\n"],["unstar","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-unstar","(repo, options = {})","<p>Unstar a repository\n<p>@param repo [String, Hash, Repository] A GitHub repository @return [Boolean] `true` …\n"],["unstar_gist","Octokit::Client::Gists","Octokit/Client/Gists.html#method-i-unstar_gist","(gist, options = {})","<p>Unstar a gist\n<p>@param gist [String] Gist ID @return [Boolean] Indicates if gist is unstarred successfully …\n"],["unsubscribe","Octokit::Client::PubSubHubbub","Octokit/Client/PubSubHubbub.html#method-i-unsubscribe","(topic, callback)","<p>Unsubscribe from a pubsub topic\n<p>@param topic [String] A recoginized pubsub topic @param callback [String] …\n"],["unsubscribe_service_hook","Octokit::Client::PubSubHubbub","Octokit/Client/PubSubHubbub.html#method-i-unsubscribe_service_hook","(repo, service_name)","<p>Unsubscribe repository through pubsub\n<p>@param repo [String, Repository, Hash] A GitHub repository @param …\n"],["unsuspend","Octokit::EnterpriseAdminClient::Users","Octokit/EnterpriseAdminClient/Users.html#method-i-unsuspend","(user, options = {})","<p>Unsuspend a user.\n<p>@param user [String] Username of the user to unsuspend. @return [Boolean] True if unsuspend …\n"],["unwatch","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-unwatch","(repo, options = {})","<p>Unwatch a repository\n<p>@param repo [String, Hash, Repository] A GitHub repository @return [Boolean] `true` …\n"],["update","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-update","(repo, options = {})",""],["update_authorization","Octokit::Client::Authorizations","Octokit/Client/Authorizations.html#method-i-update_authorization","(number, options = {})","<p>Update an authorization for the authenticated user.\n<p>You can update your own tokens, but only through  …\n"],["update_branch","Octokit::Client::Refs","Octokit/Client/Refs.html#method-i-update_branch","(repo, branch, sha, force = true, options = {})","<p>Update a branch\n<p>@param repo [Integer, String, Repository, Hash] A GitHub repository @param branch [String] …\n"],["update_check_run","Octokit::Client::Checks","Octokit/Client/Checks.html#method-i-update_check_run","(repo, id, options = {})","<p>Update a check run\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository @param id [Integer] …\n"],["update_comment","Octokit::Client::Issues","Octokit/Client/Issues.html#method-i-update_comment","(repo, number, comment, options = {})","<p>Update a single comment on an issue\n<p>@param repo [Integer, String, Repository, Hash] A GitHub repository …\n"],["update_commit_comment","Octokit::Client::CommitComments","Octokit/Client/CommitComments.html#method-i-update_commit_comment","(repo, id, body, options = {})","<p>Update a commit comment\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository @param id …\n"],["update_content","Octokit::Client::Contents","Octokit/Client/Contents.html#method-i-update_content","(*args)",""],["update_contents","Octokit::Client::Contents","Octokit/Client/Contents.html#method-i-update_contents","(*args)","<p>Update content in a repository\n<p>@overload update_contents(repo, path, message, sha, content = nil, options …\n"],["update_deploy_key","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-update_deploy_key","(repo, id, options)",""],["update_env","Octokit::Middleware::FollowRedirects","Octokit/Middleware/FollowRedirects.html#method-i-update_env","(env, request_body, response)",""],["update_gist_comment","Octokit::Client::Gists","Octokit/Client/Gists.html#method-i-update_gist_comment","(gist_id, gist_comment_id, comment, options = {})","<p>Update gist comment\n<p>Requires authenticated client\n<p>@param gist_id [String] Id of the gist. @param gist_comment_id …\n"],["update_issue","Octokit::Client::Issues","Octokit/Client/Issues.html#method-i-update_issue","(repo, number, *args)","<p>Update an issue\n<p>@overload update_issue(repo, number, title, body, options)\n\n<pre>@param repo [Integer, String, ...</pre>\n"],["update_key","Octokit::Client::Users","Octokit/Client/Users.html#method-i-update_key","(key_id, options = {})","<p>Update a public key\n<p>Requires authenticated client\n<p>@param key_id [Integer] Id of key to update. @param options …\n"],["update_label","Octokit::Client::Labels","Octokit/Client/Labels.html#method-i-update_label","(repo, label, options = {})","<p>Update a label\n<p>@param repo [Integer, String, Repository, Hash] A GitHub repository @param label [String] …\n"],["update_milestone","Octokit::Client::Milestones","Octokit/Client/Milestones.html#method-i-update_milestone","(repository, number, options = {})","<p>Update a milestone for a repository\n<p>@param repository [Integer, String, Repository, Hash] A GitHub repository …\n"],["update_org","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-update_org","(org, values, options = {})",""],["update_org_hook","Octokit::Client::Hooks","Octokit/Client/Hooks.html#method-i-update_org_hook","(org, id, config, options = {})",""],["update_org_membership","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-update_org_membership","(org, options = {})",""],["update_organization","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-update_organization","(org, values, options = {})","<p>Update an organization.\n<p>Requires authenticated client with proper organization permissions.\n<p>@param org …\n"],["update_organization_membership","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-update_organization_membership","(org, options = {})","<p>Edit an organization membership\n<p>@param org [String, Integer] Organization GitHub login or id. @option …\n"],["update_project","Octokit::Client::Projects","Octokit/Client/Projects.html#method-i-update_project","(id, options = {})","<p>Update a project\n<p>Requires authenticated client\n<p>@param id [Integer] Project id @option options [String] …\n"],["update_project_card","Octokit::Client::Projects","Octokit/Client/Projects.html#method-i-update_project_card","(id, options = {})","<p>Update a project card\n<p>Requires authenticated client\n<p>@param id [Integer] Project card id @option options …\n"],["update_project_column","Octokit::Client::Projects","Octokit/Client/Projects.html#method-i-update_project_column","(id, name, options = {})","<p>Update a project column\n<p>Requires authenticated client\n<p>@param id [Integer] Project column id @param name …\n"],["update_pull_comment","Octokit::Client::PullRequests","Octokit/Client/PullRequests.html#method-i-update_pull_comment","(repo, comment_id, body, options = {})",""],["update_pull_request","Octokit::Client::PullRequests","Octokit/Client/PullRequests.html#method-i-update_pull_request","(*args)","<p>Update a pull request @overload update_pull_request(repo, number, title=nil, body=nil, state=nil, options …\n"],["update_pull_request_comment","Octokit::Client::PullRequests","Octokit/Client/PullRequests.html#method-i-update_pull_request_comment","(repo, comment_id, body, options = {})","<p>Update pull request comment\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository @param …\n"],["update_pull_request_review","Octokit::Client::Reviews","Octokit/Client/Reviews.html#method-i-update_pull_request_review","(repo, number, review, body, options = {})","<p>Update a review request comment\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository @param …\n"],["update_ref","Octokit::Client::Refs","Octokit/Client/Refs.html#method-i-update_ref","(repo, ref, sha, force = true, options = {})","<p>Update a reference\n<p>@param repo [Integer, String, Repository, Hash] A GitHub repository @param ref [String] …\n"],["update_reference","Octokit::Client::Refs","Octokit/Client/Refs.html#method-i-update_reference","(repo, ref, sha, force = true, options = {})",""],["update_release","Octokit::Client::Releases","Octokit/Client/Releases.html#method-i-update_release","(url, options = {})","<p>Update a release\n<p>@param url [String] URL for the release as returned from .releases @option options [String] …\n"],["update_release_asset","Octokit::Client::Releases","Octokit/Client/Releases.html#method-i-update_release_asset","(asset_url, options = {})","<p>Update a release asset\n<p>@param asset_url [String] URL for the asset as returned from .release_assets @option …\n"],["update_repo_invitation","Octokit::Client::RepositoryInvitations","Octokit/Client/RepositoryInvitations.html#method-i-update_repo_invitation","(repo, invitation_id, options = {})",""],["update_repository","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-update_repository","(repo, options = {})",""],["update_repository_invitation","Octokit::Client::RepositoryInvitations","Octokit/Client/RepositoryInvitations.html#method-i-update_repository_invitation","(repo, invitation_id, options = {})","<p>Update an invitation for a repository\n<p>Requires authenticated client\n<p>@param repo [Integer, String, Repository …\n"],["update_review_comment","Octokit::Client::PullRequests","Octokit/Client/PullRequests.html#method-i-update_review_comment","(repo, comment_id, body, options = {})",""],["update_source_import","Octokit::Client::SourceImport","Octokit/Client/SourceImport.html#method-i-update_source_import","(repo, options = {})","<p>Update source import with authentication or project choice Restart source import if no options are passed …\n"],["update_subscription","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-update_subscription","(repo, options = {})","<p>Update repository subscription\n<p>@param repo [Integer, String, Hash, Repository] A GitHub repository. @param …\n"],["update_team","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-update_team","(team_id, options = {})","<p>Update team\n<p>Requires authenticated organization owner.\n<p>@param team_id [Integer] Team id. @option options …\n"],["update_thread_subscription","Octokit::Client::Notifications","Octokit/Client/Notifications.html#method-i-update_thread_subscription","(thread_id, options = {})","<p>Update thread subscription\n<p>This lets you subscribe to a thread, or ignore it. Subscribing to a thread …\n"],["update_user","Octokit::Client::Users","Octokit/Client/Users.html#method-i-update_user","(options)","<p>Update the authenticated user\n<p>@param options [Hash] A customizable set of options. @option options [String] …\n"],["upgrade","Octokit::EnterpriseManagementConsoleClient::ManagementConsole","Octokit/EnterpriseManagementConsoleClient/ManagementConsole.html#method-i-upgrade","(license)","<p>Upgrade an Enterprise installation\n<p>@param license [String] The path to your .ghl license file.\n<p>@return …\n"],["upload_asset","Octokit::Client::Releases","Octokit/Client/Releases.html#method-i-upload_asset","(release_url, path_or_file, options = {})","<p>Upload a release asset\n<p>@param release_url [String] URL for the release as returned from .releases @param …\n"],["upload_license","Octokit::EnterpriseManagementConsoleClient::ManagementConsole","Octokit/EnterpriseManagementConsoleClient/ManagementConsole.html#method-i-upload_license","(license, settings = nil)","<p>Uploads a license for the first time\n<p>@param license [String] The path to your .ghl license file. @param …\n"],["url","Octokit::Gist","Octokit/Gist.html#method-i-url","()","<p>Gist URL @return [String]\n"],["url","Octokit::Repository","Octokit/Repository.html#method-i-url","()","<p>Repository URL based on {Octokit::Client#web_endpoint} @return [String]\n"],["user","Octokit::Client::Users","Octokit/Client/Users.html#method-i-user","(user=nil, options = {})","<p>Get a single user\n<p>@param user [Integer, String] GitHub user login or id. @return [Sawyer::Resource] @see …\n"],["user_agent","Octokit::Default","Octokit/Default.html#method-c-user_agent","()","<p>Default User-Agent header string from ENV or {USER_AGENT} @return [String]\n"],["user_authenticated?","Octokit::Authentication","Octokit/Authentication.html#method-i-user_authenticated-3F","()","<p>Indicates if the client was supplied an OAuth access token or Basic Auth username and password\n<p>@see developer.github.com/v3/#authentication …\n"],["user_events","Octokit::Client::Events","Octokit/Client/Events.html#method-i-user_events","(user, options = {})","<p>List all user events\n<p>@param user [Integer, String] GitHub user login or id. @return [Array&lt;Sawyer::Resource&gt;] …\n"],["user_issues","Octokit::Client::Issues","Octokit/Client/Issues.html#method-i-user_issues","(options = {})","<p>List all issues across owned and member repositories for the authenticated user\n<p>@param options [Sawyer::Resource] …\n"],["user_keys","Octokit::Client::Users","Octokit/Client/Users.html#method-i-user_keys","(user, options = {})","<p>Get list of public keys for user.\n<p>@param user [Integer, String] GitHub user login or id. @return [Array&lt;Sawyer::Resource&gt;] …\n"],["user_migration_archive_url","Octokit::Client::Users","Octokit/Client/Users.html#method-i-user_migration_archive_url","(id, options = {})","<p>Fetches the URL to a migration archive.\n<p>Requires authenticated user.\n<p>@param id [Integer] ID number of the …\n"],["user_migration_repositories","Octokit::Client::Users","Octokit/Client/Users.html#method-i-user_migration_repositories","(id, options = {})","<p>List repositories for a user migration.\n<p>Requires authenticated user.\n<p>@param id [Integer] ID number of the …\n"],["user_migration_status","Octokit::Client::Users","Octokit/Client/Users.html#method-i-user_migration_status","(id, options = {})","<p>Fetches the status of a migration.\n<p>Requires authenticated user.\n<p>@param id [Integer] ID number of the migration. …\n"],["user_migrations","Octokit::Client::Users","Octokit/Client/Users.html#method-i-user_migrations","(options = {})","<p>Lists the most recent migrations.\n<p>Requires authenticated user.\n<p>@return [Array&lt;Sawyer::Resource&gt;] …\n"],["user_path","Octokit::Client","Octokit/Client.html#method-i-user_path","(user, path)","<p>convenience method for constructing a user specific path, if the user is logged in\n"],["user_public_events","Octokit::Client::Events","Octokit/Client/Events.html#method-i-user_public_events","(user, options = {})","<p>List public user events\n<p>@param user [Integer, String] GitHub user login or id @return [Array&lt;Sawyer::Resource&gt;] …\n"],["user_repo_invitations","Octokit::Client::RepositoryInvitations","Octokit/Client/RepositoryInvitations.html#method-i-user_repo_invitations","(options = {})",""],["user_repository_invitations","Octokit::Client::RepositoryInvitations","Octokit/Client/RepositoryInvitations.html#method-i-user_repository_invitations","(options = {})","<p>List all repository invitations for the user\n<p>Requires authenticated client\n<p>@return [Array&lt;Sawyer::Resource&gt;] …\n"],["user_teams","Octokit::Client::Organizations","Octokit/Client/Organizations.html#method-i-user_teams","(options = {})","<p>List all teams for the authenticated user across all their orgs\n<p>@return [Array&lt;Sawyer::Resource&gt;] …\n"],["validate_credentials","Octokit::Client::Users","Octokit/Client/Users.html#method-i-validate_credentials","(options = {})","<p>Validate user username and password\n<p>@param options [Hash] User credentials @option options [String] :login …\n"],["validate_owner_and_name!","Octokit::Repository","Octokit/Repository.html#method-i-validate_owner_and_name-21","(repo)",""],["views","Octokit::Client::Traffic","Octokit/Client/Traffic.html#method-i-views","(repo, options = {})","<p>Get the total number of views and breakdown per day or week for the last 14 days\n<p>@param repo [Integer, …\n"],["vulnerability_alerts_enabled?","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-vulnerability_alerts_enabled-3F","(repo, options = {})","<p>Check to see if vulnerability alerts are enabled for a repository\n<p>The authenticated user must have admin …\n"],["warn_preview","Octokit::Preview","Octokit/Preview.html#method-i-warn_preview","(type)",""],["watch","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-watch","(repo, options = {})","<p>Watch a repository\n<p>@param repo [String, Hash, Repository] A GitHub repository @return [Boolean] `true` …\n"],["watched","Octokit::Client::Users","Octokit/Client/Users.html#method-i-watched","(user=login, options = {})",""],["watchers","Octokit::Client::Repositories","Octokit/Client/Repositories.html#method-i-watchers","(repo, options = {})","<p>@deprecated Use {#stargazers} instead\n<p>List watchers of repo.\n<p>Requires authenticated client for private …\n"],["web_endpoint","Octokit::Configurable","Octokit/Configurable.html#method-i-web_endpoint","()","<p>Base URL for generated web URLs\n<p>@return [String] Default: github.com/\n"],["web_endpoint","Octokit::Default","Octokit/Default.html#method-c-web_endpoint","()","<p>Default web endpoint from ENV or {WEB_ENDPOINT} @return [String]\n"],["workflow","Octokit::Client::ActionsWorkflows","Octokit/Client/ActionsWorkflows.html#method-i-workflow","(repo, id, options = {})","<p>Get single workflow in a repository\n<p>@param repo [Integer, String, Repository, Hash] A GitHub repository …\n"],["workflow_dispatch","Octokit::Client::ActionsWorkflows","Octokit/Client/ActionsWorkflows.html#method-i-workflow_dispatch","(repo, id, ref, options = {})","<p>Create a workflow dispatch event\n<p>@param repo [Integer, String, Repository, Hash] A GitHub repository @param …\n"],["workflow_run","Octokit::Client::ActionsWorkflowRuns","Octokit/Client/ActionsWorkflowRuns.html#method-i-workflow_run","(repo, id, options = {})","<p>Get a workflow run\n<p>@param repo [Integer, String, Repository, Hash] A GitHub repository @param id [Integer] …\n"],["workflow_run_logs","Octokit::Client::ActionsWorkflowRuns","Octokit/Client/ActionsWorkflowRuns.html#method-i-workflow_run_logs","(repo, id, options = {})","<p>Get a download url for archived log files of a workflow run\n<p>@param repo [Integer, String, Repository, …\n"],["workflow_runs","Octokit::Client::ActionsWorkflowRuns","Octokit/Client/ActionsWorkflowRuns.html#method-i-workflow_runs","(repo, workflow, options = {})","<p>List all runs for a repository workflow\n<p>@param repo [Integer, String, Repository, Hash] A GitHub repository …\n"],["workflows","Octokit::Client::ActionsWorkflows","Octokit/Client/ActionsWorkflows.html#method-i-workflows","(repo, options = {})","<p>Get the workflows in a repository\n<p>@param repo [Integer, String, Repository, Hash] A GitHub repository …\n"]]}}